--- sound/soc/codecs/sound_control_3_gpl.c
+++ sound/soc/codecs/sound_control_3_gpl.c
@@ -20,7 +20,7 @@
 #include <linux/sysfs.h>
 #include <linux/kallsyms.h>
 #include <linux/mfd/wcd9xxx/core.h>
-#include <linux/mfd/wcd9xxx/wcd9320_registers.h>
+#include <linux/mfd/wcd9xxx/wcd9310_registers.h>
 
 #define SOUND_CONTROL_MAJOR_VERSION	3
 #define SOUND_CONTROL_MINOR_VERSION	6
@@ -31,12 +31,13 @@ extern int wcd9xxx_hw_revision;
 static int snd_ctrl_locked = 0;
 static int snd_rec_ctrl_locked = 0;
 
-unsigned int taiko_read(struct snd_soc_codec *codec, unsigned int reg);
-int taiko_write(struct snd_soc_codec *codec, unsigned int reg,
+unsigned int tabla_read(struct snd_soc_codec *codec, unsigned int reg);
+int tabla_write(struct snd_soc_codec *codec, unsigned int reg,
 		unsigned int value);
 
+
 #define REG_SZ	25
-static unsigned int cached_regs[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+static unsigned int cached_regs[] = {6, 6, 0, 0, 0, 0, 0, 0, 0, 0,
 			    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 			    0, 0, 0, 0, 0 };
 
@@ -45,73 +46,73 @@ static unsigned int *cache_select(unsigned int reg)
 	unsigned int *out = NULL;
 
         switch (reg) {
-                case TAIKO_A_RX_HPH_L_GAIN:
+                case TABLA_A_RX_HPH_L_GAIN:
 			out = &cached_regs[0];
 			break;
-                case TAIKO_A_RX_HPH_R_GAIN:
+                case TABLA_A_RX_HPH_R_GAIN:
 			out = &cached_regs[1];
 			break;
-                case TAIKO_A_CDC_RX1_VOL_CTL_B2_CTL:
+                case TABLA_A_CDC_RX1_VOL_CTL_B2_CTL:
 			out = &cached_regs[4];
 			break;
-                case TAIKO_A_CDC_RX2_VOL_CTL_B2_CTL:
+                case TABLA_A_CDC_RX2_VOL_CTL_B2_CTL:
 			out = &cached_regs[5];
 			break;
-                case TAIKO_A_CDC_RX3_VOL_CTL_B2_CTL:
+                case TABLA_A_CDC_RX3_VOL_CTL_B2_CTL:
 			out = &cached_regs[6];
 			break;
-                case TAIKO_A_CDC_RX4_VOL_CTL_B2_CTL:
+                case TABLA_A_CDC_RX4_VOL_CTL_B2_CTL:
 			out = &cached_regs[7];
 			break;
-                case TAIKO_A_CDC_RX5_VOL_CTL_B2_CTL:
+                case TABLA_A_CDC_RX5_VOL_CTL_B2_CTL:
 			out = &cached_regs[8];
 			break;
-                case TAIKO_A_CDC_RX6_VOL_CTL_B2_CTL:
+                case TABLA_A_CDC_RX6_VOL_CTL_B2_CTL:
 			out = &cached_regs[9];
 			break;
-                case TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL:
+                case TABLA_A_CDC_RX7_VOL_CTL_B2_CTL:
 			out = &cached_regs[10];
 			break;
-                case TAIKO_A_CDC_TX1_VOL_CTL_GAIN:
+                case TABLA_A_CDC_TX1_VOL_CTL_GAIN:
 			out = &cached_regs[11];
 			break;
-                case TAIKO_A_CDC_TX2_VOL_CTL_GAIN:
+                case TABLA_A_CDC_TX2_VOL_CTL_GAIN:
 			out = &cached_regs[12];
 			break;
-                case TAIKO_A_CDC_TX3_VOL_CTL_GAIN:
+                case TABLA_A_CDC_TX3_VOL_CTL_GAIN:
 			out = &cached_regs[13];
 			break;
-                case TAIKO_A_CDC_TX4_VOL_CTL_GAIN:
+                case TABLA_A_CDC_TX4_VOL_CTL_GAIN:
 			out = &cached_regs[14];
 			break;
-                case TAIKO_A_CDC_TX5_VOL_CTL_GAIN:
+                case TABLA_A_CDC_TX5_VOL_CTL_GAIN:
 			out = &cached_regs[15];
 			break;
-                case TAIKO_A_CDC_TX6_VOL_CTL_GAIN:
+                case TABLA_A_CDC_TX6_VOL_CTL_GAIN:
 			out = &cached_regs[16];
 			break;
-                case TAIKO_A_CDC_TX7_VOL_CTL_GAIN:
+                case TABLA_A_CDC_TX7_VOL_CTL_GAIN:
 			out = &cached_regs[17];
 			break;
-                case TAIKO_A_CDC_TX8_VOL_CTL_GAIN:
+                case TABLA_A_CDC_TX8_VOL_CTL_GAIN:
 			out = &cached_regs[18];
 			break;
-                case TAIKO_A_CDC_TX9_VOL_CTL_GAIN:
+                case TABLA_A_CDC_TX9_VOL_CTL_GAIN:
 			out = &cached_regs[19];
 			break;
-                case TAIKO_A_CDC_TX10_VOL_CTL_GAIN:
+                case TABLA_A_CDC_TX10_VOL_CTL_GAIN:
 			out = &cached_regs[20];
 			break;
-		case TAIKO_A_RX_LINE_1_GAIN:
+                case TABLA_A_RX_LINE_1_GAIN:
 			out = &cached_regs[21];
 			break;
-		case TAIKO_A_RX_LINE_2_GAIN:
+                case TABLA_A_RX_LINE_2_GAIN:
 			out = &cached_regs[22];
 			break;
-		case TAIKO_A_RX_LINE_3_GAIN:
+                case TABLA_A_RX_LINE_3_GAIN:
 			out = &cached_regs[23];
 			break;
-		case TAIKO_A_RX_LINE_4_GAIN:
+                case TABLA_A_RX_LINE_4_GAIN:
 			out = &cached_regs[24];
 			break;
         }
@@ -141,37 +142,37 @@ int snd_hax_reg_access(unsigned int reg)
 	int ret = 1;
 
 	switch (reg) {
-		case TAIKO_A_RX_HPH_L_GAIN:
-		case TAIKO_A_RX_HPH_R_GAIN:
-		case TAIKO_A_RX_HPH_L_STATUS:
-		case TAIKO_A_RX_HPH_R_STATUS:
+		case TABLA_A_RX_HPH_L_GAIN:
+		case TABLA_A_RX_HPH_R_GAIN:
+		case TABLA_A_RX_HPH_L_STATUS:
+		case TABLA_A_RX_HPH_R_STATUS:
 			if (snd_ctrl_locked > 1)
 				ret = 0;
 			break;
-		case TAIKO_A_CDC_RX1_VOL_CTL_B2_CTL:
-		case TAIKO_A_CDC_RX2_VOL_CTL_B2_CTL:
-		case TAIKO_A_CDC_RX3_VOL_CTL_B2_CTL:
-		case TAIKO_A_CDC_RX4_VOL_CTL_B2_CTL:
-		case TAIKO_A_CDC_RX5_VOL_CTL_B2_CTL:
-		case TAIKO_A_CDC_RX6_VOL_CTL_B2_CTL:
-		case TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL:
-		case TAIKO_A_RX_LINE_1_GAIN:
-		case TAIKO_A_RX_LINE_2_GAIN:
-		case TAIKO_A_RX_LINE_3_GAIN:
-		case TAIKO_A_RX_LINE_4_GAIN:
+		case TABLA_A_CDC_RX1_VOL_CTL_B2_CTL:
+		case TABLA_A_CDC_RX2_VOL_CTL_B2_CTL:
+		case TABLA_A_CDC_RX3_VOL_CTL_B2_CTL:
+		case TABLA_A_CDC_RX4_VOL_CTL_B2_CTL:
+		case TABLA_A_CDC_RX5_VOL_CTL_B2_CTL:
+		case TABLA_A_CDC_RX6_VOL_CTL_B2_CTL:
+		case TABLA_A_CDC_RX7_VOL_CTL_B2_CTL:
+		case TABLA_A_RX_LINE_1_GAIN:
+		case TABLA_A_RX_LINE_2_GAIN:
+		case TABLA_A_RX_LINE_3_GAIN:
+		case TABLA_A_RX_LINE_4_GAIN:
 			if (snd_ctrl_locked > 0)
 				ret = 0;
 			break;
-		case TAIKO_A_CDC_TX1_VOL_CTL_GAIN:
-		case TAIKO_A_CDC_TX2_VOL_CTL_GAIN:
-		case TAIKO_A_CDC_TX3_VOL_CTL_GAIN:
-		case TAIKO_A_CDC_TX4_VOL_CTL_GAIN:
-		case TAIKO_A_CDC_TX5_VOL_CTL_GAIN:
-		case TAIKO_A_CDC_TX6_VOL_CTL_GAIN:
-		case TAIKO_A_CDC_TX7_VOL_CTL_GAIN:
-		case TAIKO_A_CDC_TX8_VOL_CTL_GAIN:
-		case TAIKO_A_CDC_TX9_VOL_CTL_GAIN:
-		case TAIKO_A_CDC_TX10_VOL_CTL_GAIN:
+		case TABLA_A_CDC_TX1_VOL_CTL_GAIN:
+		case TABLA_A_CDC_TX2_VOL_CTL_GAIN:
+		case TABLA_A_CDC_TX3_VOL_CTL_GAIN:
+		case TABLA_A_CDC_TX4_VOL_CTL_GAIN:
+		case TABLA_A_CDC_TX5_VOL_CTL_GAIN:
+		case TABLA_A_CDC_TX6_VOL_CTL_GAIN:
+		case TABLA_A_CDC_TX7_VOL_CTL_GAIN:
+		case TABLA_A_CDC_TX8_VOL_CTL_GAIN:
+		case TABLA_A_CDC_TX9_VOL_CTL_GAIN:
+		case TABLA_A_CDC_TX10_VOL_CTL_GAIN:
 			if (snd_rec_ctrl_locked > 0)
 				ret = 0;
 			break;
@@ -199,8 +200,8 @@ static ssize_t cam_mic_gain_show(struct kobject *kobj,
 		struct kobj_attribute *attr, char *buf)
 {
         return sprintf(buf, "%u\n",
-		taiko_read(fauxsound_codec_ptr,
-			TAIKO_A_CDC_TX6_VOL_CTL_GAIN));
+		tabla_read(fauxsound_codec_ptr,
+			TABLA_A_CDC_TX6_VOL_CTL_GAIN));
 
 }
 
@@ -212,8 +213,8 @@ static ssize_t cam_mic_gain_store(struct kobject *kobj,
 	sscanf(buf, "%u %u", &lval, &chksum);
 
 	if (calc_checksum(lval, 0, chksum)) {
-		taiko_write(fauxsound_codec_ptr,
-			TAIKO_A_CDC_TX6_VOL_CTL_GAIN, lval);
+		tabla_write(fauxsound_codec_ptr,
+			TABLA_A_CDC_TX6_VOL_CTL_GAIN, lval);
 	}
 	return count;
 }
@@ -222,8 +223,8 @@ static ssize_t mic_gain_show(struct kobject *kobj,
 		struct kobj_attribute *attr, char *buf)
 {
 	return sprintf(buf, "%u\n",
-		taiko_read(fauxsound_codec_ptr,
-			TAIKO_A_CDC_TX7_VOL_CTL_GAIN));
+		tabla_read(fauxsound_codec_ptr,
+			TABLA_A_CDC_TX7_VOL_CTL_GAIN));
 }
 
 static ssize_t mic_gain_store(struct kobject *kobj,
@@ -234,8 +235,8 @@ static ssize_t mic_gain_store(struct kobject *kobj,
 	sscanf(buf, "%u %u", &lval, &chksum);
 
 	if (calc_checksum(lval, 0, chksum)) {
-		taiko_write(fauxsound_codec_ptr,
-			TAIKO_A_CDC_TX7_VOL_CTL_GAIN, lval);
+		tabla_write(fauxsound_codec_ptr,
+			TABLA_A_CDC_TX7_VOL_CTL_GAIN, lval);
 	}
 	return count;
 
@@ -245,10 +246,10 @@ static ssize_t speaker_gain_show(struct kobject *kobj,
 		struct kobj_attribute *attr, char *buf)
 {
         return sprintf(buf, "%u %u\n",
-			taiko_read(fauxsound_codec_ptr,
-				TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL),
-			taiko_read(fauxsound_codec_ptr,
-				TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL));
+			tabla_read(fauxsound_codec_ptr,
+				TABLA_A_CDC_RX3_VOL_CTL_B2_CTL),
+			tabla_read(fauxsound_codec_ptr,
+				TABLA_A_CDC_RX4_VOL_CTL_B2_CTL));
 
 }
 
@@ -260,10 +261,10 @@ static ssize_t speaker_gain_store(struct kobject *kobj,
 	sscanf(buf, "%u %u %u", &lval, &rval, &chksum);
 
 	if (calc_checksum(lval, rval, chksum)) {
-		taiko_write(fauxsound_codec_ptr,
-			TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL, lval);
-		taiko_write(fauxsound_codec_ptr,
-			TAIKO_A_CDC_RX7_VOL_CTL_B2_CTL, rval);
+		tabla_write(fauxsound_codec_ptr,
+			TABLA_A_CDC_RX3_VOL_CTL_B2_CTL, lval);
+		tabla_write(fauxsound_codec_ptr,
+			TABLA_A_CDC_RX4_VOL_CTL_B2_CTL, rval);
 	}
 	return count;
 }
@@ -272,10 +273,10 @@ static ssize_t headphone_gain_show(struct kobject *kobj,
 		struct kobj_attribute *attr, char *buf)
 {
 	return sprintf(buf, "%u %u\n",
-			taiko_read(fauxsound_codec_ptr,
-				TAIKO_A_CDC_RX1_VOL_CTL_B2_CTL),
-			taiko_read(fauxsound_codec_ptr,
-				TAIKO_A_CDC_RX2_VOL_CTL_B2_CTL));
+			tabla_read(fauxsound_codec_ptr,
+				TABLA_A_CDC_RX1_VOL_CTL_B2_CTL),
+			tabla_read(fauxsound_codec_ptr,
+				TABLA_A_CDC_RX2_VOL_CTL_B2_CTL));
 }
 
 static ssize_t headphone_gain_store(struct kobject *kobj,
@@ -286,10 +287,10 @@ static ssize_t headphone_gain_store(struct kobject *kobj,
 	sscanf(buf, "%u %u %u", &lval, &rval, &chksum);
 
 	if (calc_checksum(lval, rval, chksum)) {
-		taiko_write(fauxsound_codec_ptr,
-			TAIKO_A_CDC_RX1_VOL_CTL_B2_CTL, lval);
-		taiko_write(fauxsound_codec_ptr,
-			TAIKO_A_CDC_RX2_VOL_CTL_B2_CTL, rval);
+		tabla_write(fauxsound_codec_ptr,
+			TABLA_A_CDC_RX1_VOL_CTL_B2_CTL, lval);
+		tabla_write(fauxsound_codec_ptr,
+			TABLA_A_CDC_RX2_VOL_CTL_B2_CTL, rval);
 	}
 	return count;
 }
@@ -298,8 +299,8 @@ static ssize_t headphone_pa_gain_show(struct kobject *kobj,
 		struct kobj_attribute *attr, char *buf)
 {
 	return sprintf(buf, "%u %u\n",
-		taiko_read(fauxsound_codec_ptr, TAIKO_A_RX_HPH_L_GAIN),
-		taiko_read(fauxsound_codec_ptr, TAIKO_A_RX_HPH_R_GAIN));
+		tabla_read(fauxsound_codec_ptr, TABLA_A_RX_HPH_L_GAIN),
+		tabla_read(fauxsound_codec_ptr, TABLA_A_RX_HPH_R_GAIN));
 }
 
 static ssize_t headphone_pa_gain_store(struct kobject *kobj,
@@ -312,21 +313,21 @@ static ssize_t headphone_pa_gain_store(struct kobject *kobj,
 	sscanf(buf, "%u %u %u", &lval, &rval, &chksum);
 
 	if (calc_checksum(lval, rval, chksum)) {
-	gain = taiko_read(fauxsound_codec_ptr, TAIKO_A_RX_HPH_L_GAIN);
+	gain = tabla_read(fauxsound_codec_ptr, TABLA_A_RX_HPH_L_GAIN);
 	out = (gain & 0xf0) | lval;
-	taiko_write(fauxsound_codec_ptr, TAIKO_A_RX_HPH_L_GAIN, out);
+	tabla_write(fauxsound_codec_ptr, TABLA_A_RX_HPH_L_GAIN, out);
 
-	status = taiko_read(fauxsound_codec_ptr, TAIKO_A_RX_HPH_L_STATUS);
+	status = tabla_read(fauxsound_codec_ptr, TABLA_A_RX_HPH_L_STATUS);
 	out = (status & 0x0f) | (lval << 4);
-	taiko_write(fauxsound_codec_ptr, TAIKO_A_RX_HPH_L_STATUS, out);
+	tabla_write(fauxsound_codec_ptr, TABLA_A_RX_HPH_L_STATUS, out);
 
-	gain = taiko_read(fauxsound_codec_ptr, TAIKO_A_RX_HPH_R_GAIN);
+	gain = tabla_read(fauxsound_codec_ptr, TABLA_A_RX_HPH_R_GAIN);
 	out = (gain & 0xf0) | rval;
-	taiko_write(fauxsound_codec_ptr, TAIKO_A_RX_HPH_R_GAIN, out);
+	tabla_write(fauxsound_codec_ptr, TABLA_A_RX_HPH_R_GAIN, out);
 
-	status = taiko_read(fauxsound_codec_ptr, TAIKO_A_RX_HPH_R_STATUS);
+	status = tabla_read(fauxsound_codec_ptr, TABLA_A_RX_HPH_R_STATUS);
 	out = (status & 0x0f) | (rval << 4);
-	taiko_write(fauxsound_codec_ptr, TAIKO_A_RX_HPH_R_STATUS, out);
+	tabla_write(fauxsound_codec_ptr, TABLA_A_RX_HPH_R_STATUS, out);
 	}
 	return count;
 }
@@ -348,7 +349,7 @@ static ssize_t sound_reg_read_show(struct kobject *kobj,
 		return -1;
 	else
 		return sprintf(buf, "%u\n",
-			taiko_read(fauxsound_codec_ptr, selected_reg));
+			tabla_read(fauxsound_codec_ptr, selected_reg));
 }
 
 static ssize_t sound_reg_write_store(struct kobject *kobj,
@@ -359,7 +360,7 @@ static ssize_t sound_reg_write_store(struct kobject *kobj,
 	sscanf(buf, "%u %u", &out, &chksum);
 	if (calc_checksum(out, 0, chksum)) {
 		if (selected_reg != 0xdeadbeef)
-			taiko_write(fauxsound_codec_ptr, selected_reg, out);
+			tabla_write(fauxsound_codec_ptr, selected_reg, out);
 	}
 	return count;
 }
@@ -408,10 +409,9 @@ static ssize_t sound_control_rec_locked_store(struct kobject *kobj,
 	return count;
 }
 
-static ssize_t sound_control_rec_locked_show(struct kobject *kobj,
-		struct kobj_attribute *attr, char *buf)
+static ssize_t sound_control_rec_locked_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
 {
-        return sprintf(buf, "%d\n", snd_rec_ctrl_locked);
+	return sprintf(buf, "%d\n", snd_rec_ctrl_locked);
 }
 
 static struct kobj_attribute sound_reg_sel_attribute =
@@ -542,3 +542,5 @@ module_exit(sound_control_exit);
 MODULE_LICENSE("GPL and additional rights");
 MODULE_AUTHOR("Paul Reioux <reioux@gmail.com>");
 MODULE_DESCRIPTION("Sound Control Module 3.x");
+
+
