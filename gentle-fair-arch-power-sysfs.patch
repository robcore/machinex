From 815b1a219d3058247619145b2ebf1482fcd4394c Mon Sep 17 00:00:00 2001
From: Hybridmax <hybridmax95@gmail.com>
Date: Sun, 8 Mar 2015 01:40:07 +0100
Subject: [PATCH] sched: Added sysfs Interface for arch_power &
 gentle_fair_sleepers

---
 kernel/ksysfs.c     | 62 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 kernel/sched/fair.c | 19 +++++++++++++---
 2 files changed, 78 insertions(+), 3 deletions(-)

diff --git a/kernel/ksysfs.c b/kernel/ksysfs.c
index 4e316e1..b038b87 100755
--- a/kernel/ksysfs.c
+++ b/kernel/ksysfs.c
@@ -189,6 +189,62 @@ static struct attribute_group kernel_attr_group = {
 	.attrs = kernel_attrs,
 };
 
+static unsigned int Lgentle_fair_sleepers = 1;
+extern void relay_gfs(unsigned int gfs);
+static unsigned int Larch_power = 1;
+extern void relay_ap(unsigned int ap);
+
+static ssize_t gentle_fair_sleepers_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%u\n", Lgentle_fair_sleepers);
+}
+static ssize_t gentle_fair_sleepers_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret, cpu;
+	ret = sscanf(buf, "%u", &input);
+	if (input != 0 && input != 1)
+		input = 0;
+	
+	Lgentle_fair_sleepers = input;
+	relay_gfs(Lgentle_fair_sleepers);
+	return count;
+}
+
+KERNEL_ATTR_RW(gentle_fair_sleepers);
+
+static ssize_t arch_power_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
+{
+ return sprintf(buf, "%u\n", Larch_power);
+}
+
+static ssize_t arch_power_store(struct kobject *kobj, struct kobj_attribute *attr, const char *buf, size_t count)
+{
+ unsigned int input;
+ int ret;
+ ret = sscanf(buf, "%u", &input);
+ if (input != 0 && input != 1)
+ input = 0;
+
+ Larch_power = input;
+ relay_ap(Larch_power);
+ return count;
+}
+KERNEL_ATTR_RW(arch_power);
+
+static struct attribute * sched_features_attrs[] = {
+ &gentle_fair_sleepers_attr.attr,
+ &arch_power_attr.attr,
+       NULL
+};
+
+static struct attribute_group sched_features_attr_group = {
+.attrs = sched_features_attrs,
+};
+
+/* Initialize fast charge sysfs folder */
+static struct kobject *sched_features_kobj;
+
 static int __init ksysfs_init(void)
 {
 	int error;
@@ -202,6 +258,12 @@ static int __init ksysfs_init(void)
 	if (error)
 		goto kset_exit;
 
+	sched_features_kobj = kobject_create_and_add("sched", kernel_kobj);
+        error = sysfs_create_group(sched_features_kobj, &sched_features_attr_group);
+
+	if (error)
+                kobject_put(sched_features_kobj);
+
 	if (notes_size > 0) {
 		notes_attr.size = notes_size;
 		error = sysfs_create_bin_file(kernel_kobj, &notes_attr);
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 434c80c..9ed3953 100755
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -1054,6 +1054,19 @@ static void check_spread(struct cfs_rq *cfs_rq, struct sched_entity *se)
 #endif
 }
 
+static unsigned int Lgentle_fair_sleepers = 1;
+static unsigned int Larch_power = 1;
+
+void relay_gfs(unsigned int gfs)
+{
+	Lgentle_fair_sleepers = gfs;
+}
+
+void relay_ap(unsigned int ap)
+{
+	Larch_power = ap;
+}
+
 static void
 place_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int initial)
 {
@@ -1076,7 +1089,7 @@ place_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int initial)
 		 * Halve their sleep time's effect, to allow
 		 * for a gentler effect of sleepers:
 		 */
-		if (sched_feat(GENTLE_FAIR_SLEEPERS))
+		if (Lgentle_fair_sleepers)
 			thresh >>= 1;
 
 		vruntime -= thresh;
@@ -3702,7 +3715,7 @@ static void update_cpu_power(struct sched_domain *sd, int cpu)
 	struct sched_group *sdg = sd->groups;
 
 	if ((sd->flags & SD_SHARE_CPUPOWER) && weight > 1) {
-		if (sched_feat(ARCH_POWER))
+		if (Larch_power)
 			power *= arch_scale_smt_power(sd, cpu);
 		else
 			power *= default_scale_smt_power(sd, cpu);
@@ -3712,7 +3725,7 @@ static void update_cpu_power(struct sched_domain *sd, int cpu)
 
 	sdg->sgp->power_orig = power;
 
-	if (sched_feat(ARCH_POWER))
+	if (Larch_power)
 		power *= arch_scale_freq_power(sd, cpu);
 	else
 		power *= default_scale_freq_power(sd, cpu);
