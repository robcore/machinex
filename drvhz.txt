accessibility/braille/braille_console.c:		kd_mksound(freq, HZ/10);
acpi/acpi_ipmi.c:#define IPMI_TIMEOUT			(5 * HZ)
acpi/acpi_ipmi.c:	int count = HZ / 10;
acpi/acpi_pad.c:		expire_time = jiffies + HZ * (100 - idle_pct) / 100;
acpi/acpi_pad.c:		if (last_jiffies + round_robin_time * HZ < jiffies) {
acpi/acpi_pad.c:			schedule_timeout_killable(HZ * idle_pct / 100);
acpi/apei/ghes.c:	static DEFINE_RATELIMIT_STATE(ratelimit_corrected, 5*HZ, 2);
acpi/apei/ghes.c:	static DEFINE_RATELIMIT_STATE(ratelimit_uncorrected, 5*HZ, 2);
acpi/dock.c:	dock_station->last_dock_time = jiffies - HZ;
acpi/dock.c:	    time_before(jiffies, (ds->last_dock_time + HZ)))
ata/ahci.c:		rc = ata_wait_after_reset(link, jiffies + 2 * HZ,
ata/libata-core.c:		    (deadline - now > 3 * HZ)) {
ata/libata-core.c:		if (!warned && time_after(now, start + 5 * HZ) &&
ata/libata-core.c:static DEFINE_RATELIMIT_STATE(ratelimit, HZ / 5, 1);
ata/libata-eh.c:	const u64 j5mins = 5LLU * 60 * HZ, j10mins = 10LLU * 60 * HZ;
ata/libata-scsi.c:			   round_jiffies_relative(HZ));
ata/libata-scsi.c:				  sensebuf, (10*HZ), 5, 0, NULL);
ata/libata-scsi.c:				sensebuf, (10*HZ), 5, 0, NULL);
ata/pata_atp867x.c:	ATP867X_IO_SYS_INFO_66MHZ	= 0x04,
ata/pata_atp867x.c:		ioread8(ATP867X_SYS_INFO(ap)) & ATP867X_IO_SYS_INFO_66MHZ;
ata/pata_pdc2027x.c:	long pout_required = board_idx? PDC_133_MHZ:PDC_100_MHZ;
ata/pata_pdc2027x.c:	PDC_100_MHZ		= 100000000,
ata/pata_pdc2027x.c:	PDC_133_MHZ		= 133333333,
ata/pata_pdc2027x.c: * @pll_clock: The input of PLL in HZ
ata/pata_pxa.c:		wait_for_completion_timeout(&pd->dma_done, HZ))
ata/pata_via.c:	static int via_clock = 33333;	/* Bus clock in kHZ */
ata/sata_mv.c:				extra = HZ; /* only extend it once, max */
ata/sata_mv.c:			if (time_after(jiffies + HZ, deadline))
ata/sata_via.c:	unsigned long timeout = jiffies + (HZ * 5);
atm/ambassador.c:  mod_timer(&dev->housekeeping, jiffies + 10*HZ);
atm/eni.c:				silence = (jiffies+2*HZ)|1;
atm/he.c:		timeout = schedule_timeout(30*HZ);
atm/he.c:		timeout = schedule_timeout(30*HZ);
atm/horizon.c:  mod_timer (&dev->housekeeping, jiffies + HZ/10);
atm/idt77105.h:#define IDT77105_RESTART_TIMER_PERIOD   (5 * HZ)
atm/idt77105.h:#define IDT77105_STATS_TIMER_PERIOD     (HZ)
atm/idt77252.c:	est->timer.expires = jiffies + ((HZ / 4) << est->interval);
atm/idt77252.c:	est->timer.expires = jiffies + ((HZ / 4) << est->interval);
atm/idt77252.c:	if (time_after(jiffies, scq->trans_start + HZ)) {
atm/idt77252.h:#define SCQFULL_TIMEOUT		HZ
atm/iphase.c:        else ia_vcc->ltimeout = 2700 * HZ  / ia_vcc->pcr;
atm/iphase.c:        else if (ia_vcc->pcr <= 170) ia_vcc->ltimeout = 16 * HZ;
atm/iphase.c:        else if (ia_vcc->pcr > (iadev->LineRate / 130)) ia_vcc->ltimeout = HZ;
atm/iphase.c:              ia_timer.expires = jiffies + 3*HZ;
atm/iphase.c:		ia_timer.expires = jiffies + 3*HZ;
atm/iphase.c:        if (ia_vcc->pcr > (iadev->LineRate / 6) ) ia_vcc->ltimeout = HZ / 10;
atm/iphase.c:	mod_timer(&ia_timer, jiffies + HZ / 4);
atm/lanai.c:#define LANAI_POLL_PERIOD	(10*HZ)
atm/lanai.c:	    (((lanai_buf_size(&lvcc->tx.buf) / 1024) * HZ) >> 7);
atm/lanai.c:			timeout += HZ / 10;
atm/nicstar.h:#define NS_POLL_PERIOD (HZ)
atm/nicstar.h:#define SCQFULL_TIMEOUT (5 * HZ)
atm/solos-pci.c:	wait_event_timeout(card->param_wq, prm.response, 5 * HZ);
atm/solos-pci.c:	wait_event_timeout(card->param_wq, prm.response, 5 * HZ);
atm/suni.c:	if (from_timer) mod_timer(&poll_timer,jiffies+HZ);
atm/suni.c:		poll_timer.expires = jiffies+HZ;
atm/uPD98402.c:			silence = (jiffies+HZ/2)|1;
atm/zatm.c:				silence = (jiffies+2*HZ)|1;
auxdisplay/cfag12864b.c:		HZ / cfag12864b_rate);
barcode_emul/barcode_emul_ice4_8930_442.c:		   BL 1=14, BW 1=4MHZ */
barcode_emul/barcode_emul_ice4_8930_442.c:		   BL 2=14, BW 2=2MHZ*/
barcode_emul/barcode_emul_ice4_8930_442.c:		   BL 3=14, BW 3=1MHZ*/
barcode_emul/barcode_emul_ice4_8930_442.c:		   BL 4=14, BW 4=500KHZ*/
barcode_emul/barcode_emul_ice4_8930_442.c:		   BL 5=14, BW 5=250KHZ*/
barcode_emul/barcode_emul_ice4_8930.c:		   BL 1=14, BW 1=4MHZ */
barcode_emul/barcode_emul_ice4_8930.c:		   BL 2=14, BW 2=2MHZ*/
barcode_emul/barcode_emul_ice4_8930.c:		   BL 3=14, BW 3=1MHZ*/
barcode_emul/barcode_emul_ice4_8930.c:		   BL 4=14, BW 4=500KHZ*/
barcode_emul/barcode_emul_ice4_8930.c:		   BL 5=14, BW 5=250KHZ*/
barcode_emul/barcode_emul_ice4.c:		   BL 1=14, BW 1=4MHZ */
barcode_emul/barcode_emul_ice4.c:		   BL 2=14, BW 2=2MHZ*/
barcode_emul/barcode_emul_ice4.c:		   BL 3=14, BW 3=1MHZ*/
barcode_emul/barcode_emul_ice4.c:		   BL 4=14, BW 4=500KHZ*/
barcode_emul/barcode_emul_ice4.c:		   BL 5=14, BW 5=250KHZ*/
base/power/main.c:	timer->expires = jiffies + HZ * 12;
base/power/main.c:	timer->expires = jiffies + HZ * CONFIG_DPM_WATCHDOG_TIMEOUT;
battery/sec_battery_8930.c:				polling_time_temp * HZ);
battery/sec_battery_8930.c:			schedule_delayed_work(&battery->polling_work, HZ);
battery/sec_battery_8930.c:		wake_lock_timeout(&battery->vbus_wake_lock, HZ * 10);
battery/sec_battery_8930.c:	wake_lock_timeout(&battery->vbus_wake_lock, HZ * 5);
Binary file staging/ft1000/ft1000-pcmcia/ft1000.img matches
Binary file staging/ft1000/ft1000-usb/ft3000.img matches
block/amiflop.c:	mod_timer(motor_off_timer + drive, jiffies + 3*HZ);
block/amiflop.c:		mod_timer(&motor_on_timer, jiffies + HZ/2);
block/amiflop.c:		motor_on_timer.expires = jiffies + HZ/10;
block/aoe/aoecmd.c:		&& (jiffies - t->lastwadj)/HZ > 10) {
block/aoe/aoecmd.c:		n /= HZ;
block/aoe/aoedev.c:	d->timer.expires = jiffies + HZ;
block/aoe/aoedev.c:	d->timer.expires = jiffies + HZ;
block/aoe/aoe.h:	MAXTIMER = HZ << 1,
block/aoe/aoe.h:	MINTIMER = HZ >> 2,
block/aoe/aoe.h:	TIMERTICK = HZ / 10,
block/aoe/aoemain.c:	enum { DTIMERTICK = HZ * 60 }; /* one minute */
block/ataflop.c:#define	CHECK_CHANGE_DELAY	HZ/2
block/ataflop.c:#define	FD_MOTOR_OFF_DELAY	(3*HZ)
block/ataflop.c:#define FLOPPY_TIMEOUT		(6*HZ)
block/ataflop.c:			  jiffies + HZ/5 + (old_motoron ? 0 : HZ));
block/ataflop.c:		  jiffies + (MotorOffTrys++ < FD_MOTOR_OFF_MAXTRY ? HZ/20 : HZ/2));
block/ataflop.c:		mod_timer(&readtrack_timer, jiffies + HZ/5/10);
block/ataflop.c:	timeout = jiffies + 2*HZ+HZ/2;
block/cciss_scsi.c:		if (waittime < (HZ * 30))
block/cciss_scsi.c:	int waittime = HZ;
block/cciss_scsi.c:			waittime / HZ);
block/cpqarray.h:#define IDA_TIMEOUT	(10*HZ)
block/cpqarray.h:#define IDA_TIMER	(5*HZ)
block/DAC960.c:	      sleep_on_timeout(&Controller->CommandWaitQueue, HZ);
block/DAC960.h:#define DAC960_HealthStatusMonitoringInterval	(1 * HZ)
block/DAC960.h:#define DAC960_MonitoringTimerInterval		(10 * HZ)
block/DAC960.h:#define DAC960_ProgressReportingInterval	(60 * HZ)
block/DAC960.h:#define DAC960_SecondaryMonitoringInterval	(60 * HZ)
block/drbd/drbd_actlog.c:			if (schedule_timeout_interruptible(HZ/10))
block/drbd/drbd_int.h:#define DRBD_SYNC_MARK_STEP (3*HZ)
block/drbd/drbd_int.h:#define SLEEP_TIME (HZ/10)
block/drbd/drbd_main.c:DEFINE_RATELIMIT_STATE(drbd_ratelimit_state, 5 * HZ, 5);
block/drbd/drbd_main.c:		mod_timer(&mdev->md_sync_timer, jiffies + 5*HZ);
block/drbd/drbd_main.c:		mod_timer(&mdev->md_sync_timer, jiffies + HZ);
block/drbd/drbd_nl.c:	fifo_size = (sc.c_plan_ahead * 10 * SLEEP_TIME) / HZ;
block/drbd/drbd_nl.c:			schedule_timeout_interruptible((mdev->net_conf->ping_timeo+1)*HZ/10);
block/drbd/drbd_proc.c:		dt = (jiffies - mdev->rs_mark_time[i]) / HZ;
block/drbd/drbd_proc.c:	dt = (jiffies - mdev->rs_mark_time[i]) / HZ;
block/drbd/drbd_proc.c:	dt = (jiffies - mdev->rs_start - mdev->rs_paused) / HZ;
block/drbd/drbd_receiver.c:		dt = ((long)jiffies - (long)mdev->rs_mark_time[i]) / HZ;
block/drbd/drbd_receiver.c:			fifo_size = (mdev->sync_conf.c_plan_ahead * 10 * SLEEP_TIME) / HZ;
block/drbd/drbd_receiver.c:	mdev->meta.socket->sk->sk_rcvtimeo = mdev->net_conf->ping_int*HZ;
block/drbd/drbd_receiver.c:				mdev->net_conf->ping_timeo*HZ/10;
block/drbd/drbd_receiver.c:		mdev->start_resync_timer.expires = jiffies + HZ;
block/drbd/drbd_receiver.c:	mod_timer(&mdev->request_timer, jiffies + HZ); /* just start it here. */
block/drbd/drbd_receiver.c:	msock->sk->sk_rcvtimeo = mdev->net_conf->ping_int*HZ;
block/drbd/drbd_receiver.c:	msock->sk->sk_sndtimeo = mdev->net_conf->timeout*HZ/10;
block/drbd/drbd_receiver.c:			schedule_timeout_interruptible(HZ);
block/drbd/drbd_receiver.c:			schedule_timeout_interruptible(HZ / 10);
block/drbd/drbd_receiver.c:			schedule_timeout_interruptible(mdev->net_conf->ping_timeo*HZ/10);
block/drbd/drbd_receiver.c:		schedule_timeout_uninterruptible(HZ/10);
block/drbd/drbd_receiver.c:	sock->sk->sk_rcvtimeo = mdev->net_conf->ping_timeo*4*HZ/10;
block/drbd/drbd_receiver.c:	 * sock->sk->sk_sndtimeo = mdev->net_conf->timeout*HZ/10;
block/drbd/drbd_receiver.c:	sock->sk->sk_sndtimeo = mdev->net_conf->timeout*HZ/10;
block/drbd/drbd_receiver.c:	sock->sk->sk_sndtimeo =  mdev->net_conf->try_connect_int*HZ;
block/drbd/drbd_receiver.c:	timeo = mdev->net_conf->try_connect_int * HZ;
block/drbd/drbd_receiver.c:		timeout = schedule_timeout(30*HZ);
block/drbd/drbd_req.c:		et = mdev->net_conf->timeout*HZ/10 * mdev->net_conf->ko_count;
block/drbd/drbd_worker.c:	dt = (jiffies - mdev->rs_start - mdev->rs_paused) / HZ;
block/drbd/drbd_worker.c:	max_sect = (mdev->sync_conf.c_max_rate * 2 * SLEEP_TIME) / HZ;
block/drbd/drbd_worker.c:		mdev->c_sync_rate = number * HZ * (BM_BLOCK_SIZE / 1024) / SLEEP_TIME;
block/drbd/drbd_worker.c:					mdev->net_conf->ping_int * HZ +
block/drbd/drbd_worker.c:					mdev->net_conf->ping_timeo*HZ/9);
block/drbd/drbd_worker.c:	mdev->rs_paused /= HZ;
block/drbd/drbd_worker.c:		mdev->start_resync_timer.expires = jiffies + HZ/10;
block/drbd/drbd_worker.c:		number = SLEEP_TIME * mdev->c_sync_rate  / ((BM_BLOCK_SIZE / 1024) * HZ);
block/drbd/drbd_worker.c:		schedule_timeout_interruptible(HZ / 10);
block/drbd/drbd_worker.c:			sect_in * mdev->sync_conf.c_delay_target * HZ / (SLEEP_TIME * 10);
block/drbd/drbd_worker.c:	steps = mdev->rs_plan_s.size; /* (mdev->sync_conf.c_plan_ahead * 10 * SLEEP_TIME) / HZ; */
block/drbd/drbd_worker.c:		want = ((mdev->sync_conf.rate * 2 * SLEEP_TIME) / HZ) * steps;
block/floppy.c:      0, { 1, 0, 0, 0, 0, 0, 0, 0}, 3*HZ/2, 1 }, "360K PC" }, /*5 1/4 360 KB PC*/
block/floppy.c:      0, { 2, 5, 6,23,10,20,12, 0}, 3*HZ/2, 2 }, "1.2M" }, /*5 1/4 HD AT*/
block/floppy.c:      0, { 4,22,21,30, 3, 0, 0, 0}, 3*HZ/2, 4 }, "720k" }, /*3 1/2 DD*/
block/floppy.c:{{0,  500, 16, 16, 8000,    1*HZ, 3*HZ,  0, SEL_DLY, 5,  80, 3*HZ, 20, {3,1,2,0,2}, 0,
block/floppy.c:      0, { 7, 4,25,22,31,21,29,11}, 3*HZ/2, 7 }, "1.44M" }, /*3 1/2 HD*/
block/floppy.c:      0, { 7, 4, 8, 2, 1, 5, 3,10}, 3*HZ/2, 0 }, "unknown" },
block/floppy.c:      0, { 7, 8, 4,25,28,22,31,21}, 3*HZ/2, 8 }, "2.88M" } /*3 1/2 ED*/
block/floppy.c:      0, { 7, 8, 4,25,28,22,31,21}, 3*HZ/2, 8 }, "2.88M AMI BIOS" }, /*3 1/2 ED*/
block/floppy.c:{{1,  300, 16, 16, 8000,    1*HZ, 3*HZ,  0, SEL_DLY, 5,  40, 3*HZ, 17, {3,1,2,0,2}, 0,
block/floppy.c:{{2,  500, 16, 16, 6000, 4*HZ/10, 3*HZ, 14, SEL_DLY, 6,  83, 3*HZ, 17, {3,1,2,0,2}, 0,
block/floppy.c:			    2 * HZ / 100;
block/floppy.c:{{3,  250, 16, 16, 3000,    1*HZ, 3*HZ,  0, SEL_DLY, 5,  83, 3*HZ, 20, {3,1,2,0,2}, 0,
block/floppy.c:{{4,  500, 16, 16, 4000, 4*HZ/10, 3*HZ, 10, SEL_DLY, 5,  83, 3*HZ, 20, {3,1,2,0,2}, 0,
block/floppy.c:{{5, 1000, 15,  8, 3000, 4*HZ/10, 3*HZ, 10, SEL_DLY, 5,  83, 3*HZ, 40, {3,1,2,0,2}, 0,
block/floppy.c:{{6, 1000, 15,  8, 3000, 4*HZ/10, 3*HZ, 10, SEL_DLY, 5,  83, 3*HZ, 40, {3,1,2,0,2}, 0,
block/floppy.c:#define SEL_DLY		(2 * HZ / 100)
block/floppy.c:		delta = ((delta * UDP->rps) % HZ) / UDP->rps;
block/floppy.c:		delta = jiffies - UDRS->first_read_date + HZ -
block/floppy.c:		fd_timeout.expires = jiffies + 20UL * HZ;
block/floppy.c:		fd_timer.expires = jiffies + HZ / 10;
block/floppy.c:	return fd_wait_for_completion(jiffies + 2UL * HZ / 100,
block/hd.c:#define TIMEOUT_VALUE (6*HZ)
block/hd.c:#define TIMEOUT_VALUE	(6*HZ)
block/mg_disk.c:		mod_timer(&host->timer, jiffies + 3 * HZ);
block/mg_disk.c:		mod_timer(&host->timer, jiffies + 3 * HZ);
block/mg_disk.c:		mod_timer(&host->timer, jiffies + 3 * HZ);
block/mg_disk.c:		mod_timer(&host->timer, jiffies + 3 * HZ);
block/nbd.c:		nbd->xmit_timeout = arg * HZ;
block/nvme.c:#define ADMIN_TIMEOUT	(60 * HZ)
block/nvme.c:#define NVME_IO_TIMEOUT	(5 * HZ)
block/nvme.c:		schedule_timeout(HZ);
block/nvme.c:	timeout = ((NVME_CAP_TIMEOUT(cap) + 1) * HZ / 2) + jiffies;
block/paride/pcd.c:#define PCD_SPIN	(1000000*PCD_TMO)/(HZ*PCD_DELAY)
block/paride/pcd.c:				pcd_completion, use HZ in loop timing
block/paride/pcd.c:	pcd_sleep(20 * HZ / 1000);	/* delay a bit */
block/paride/pcd.c:		pcd_sleep(HZ);
block/paride/pcd.c:		pcd_sleep(HZ / 10);
block/paride/pd.c:	1.04	GRG 1998.08.15  Extra debugging, use HZ in loop timing
block/paride/pd.c:#define PD_SPIN         (1000000*PD_TMO)/(HZ*PD_SPIN_DEL)
block/paride/pf.c:	1.03    GRG 1998.08.16  Use HZ in loop timings, extra debugging
block/paride/pf.c:#define PF_SPIN         (1000000*PF_TMO)/(HZ*PF_SPIN_DEL)
block/paride/pf.c:	pf_sleep(20 * HZ / 1000);
block/paride/pf.c:		pf_sleep(HZ / 10);
block/paride/pg.c:#define PG_RESET_TMO	10*HZ
block/paride/pg.c:#define PG_TMO		HZ
block/paride/pg.c:	dev->timeout = hdr.timeout * HZ + HZ / 2 + jiffies;
block/paride/pg.c:	hdr.duration = (jiffies - dev->start + HZ / 2) / HZ;
block/paride/pg.c:	pg_sleep(20 * HZ / 1000);
block/paride/pt.c:	1.03    GRG 1998.08.15  Adjusted PT_TMO, use HZ in loop timing,
block/paride/pt.c:#define PT_SPIN         ((1000000/(HZ*PT_SPIN_DEL))*PT_TMO)
block/paride/pt.c:		if (!pt_poll_dsc(tape, HZ / 100, PT_TMO, "read"))
block/paride/pt.c:		if (!pt_poll_dsc(tape, HZ / 100, PT_TMO, "write"))
block/paride/pt.c:	pt_poll_dsc(tape, HZ, tmo, fun);
block/paride/pt.c:	pt_sleep(20 * HZ / 1000);
block/paride/pt.c:		pt_sleep(HZ);
block/paride/pt.c:		pt_sleep(HZ / 10);
block/pktcdvd.c:	cgc.timeout = 60*HZ;
block/pktcdvd.c:			congestion_wait(BLK_RW_ASYNC, HZ);
block/pktcdvd.c:	rq->timeout = 60*HZ;
block/swim3.c:		for (n = 0; n < 2 * HZ; ++n) {
block/swim3.c:	for (n = HZ; n > 0; --n) {
block/swim3.c:			fs->settle_time = (HZ + 32) / 33;
block/swim3.c:	if (fs->settle_time < 2*HZ) {
block/swim3.c:			if (n >= HZ/30 && swim3_readbit(fs, SEEK_COMPLETE))
block/swim3.c:	set_timeout(fs, 2*HZ, xfer_timeout);	/* enable timeout */
block/swim3.c:	set_timeout(fs, 3*HZ, seek_timeout);	/* enable timeout */
block/swim3.c:	set_timeout(fs, HZ, scan_timeout);	/* enable timeout */
block/swim.c:		for (i = 0; i < 2*HZ; i++) {
block/swim.c:	for (i = 0; i < 2*HZ; i++) {
block/swim.c:	for (wait = 0; wait < HZ; wait++) {
block/umem.c:	battery_timer.expires = jiffies + (HZ * 60);
block/umem.c:				 (HZ * 60 * 60 * 5))) {
block/umem.h:#define IRQ_TIMEOUT (1 * HZ)
block/xen-blkback/blkback.c:				&blkif->drain_complete, HZ);
block/xsysace.c:			mod_timer(&ace->stall_timer, jiffies + HZ);
block/xsysace.c:	mod_timer(&ace->stall_timer, jiffies + HZ);
bluetooth/bluesleep_bcm.c:			mod_timer(&tx_timer, jiffies + TX_TIMER_INTERVAL * HZ);
bluetooth/bluesleep_bcm.c:		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL*HZ));
bluetooth/bluesleep_bcm.c:		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
bluetooth/bluesleep_bcm.c:		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
bluetooth/bluesleep_bcm.c:		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
bluetooth/bluesleep_bcm.c:	mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
bluetooth/bluesleep_bcm.c:    wake_lock_timeout(&bsi->wake_lock, HZ / 2);
bluetooth/bluesleep_bcm.c:			wake_lock_timeout(&bsi->wake_lock, HZ / 2);
bluetooth/bluesleep_bcm.c:	wake_lock_timeout(&bsi->wake_lock, HZ / 2);
bluetooth/bluesleep.c:				mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
bluetooth/bluesleep.c:			mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
bluetooth/bluesleep.c:		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL*HZ));
bluetooth/bluesleep.c:		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
bluetooth/bluesleep.c:		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
bluetooth/bluesleep.c:		mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
bluetooth/bluesleep.c:	mod_timer(&tx_timer, jiffies + (TX_TIMER_INTERVAL * HZ));
bluetooth/bluesleep.c:			wake_lock_timeout(&bsi->wake_lock, HZ / 8);
bluetooth/bluesleep.c:	wake_lock_timeout(&bsi->wake_lock, HZ / 8);
bluetooth/bluesleep.c:	wake_lock_timeout(&bsi->wake_lock, HZ / 8);
cdrom/cdrom.c:	cgc.timeout = 3000*HZ;
cdrom/cdrom.c:	cgc.timeout = 3000*HZ;
cdrom/cdrom.c:	cgc.timeout = 30*HZ;
cdrom/cdrom.c:	cgc.timeout = 5 * 60 * HZ;
cdrom/cdrom.c:	cgc.timeout = 5 * 60 * HZ;
cdrom/cdrom.c:	cgc.timeout = 5 * 60 * HZ;
cdrom/cdrom.c:	cgc.timeout = 60 * HZ;
cdrom/cdrom.c:	cgc.timeout = HZ;
cdrom/cdrom.c:#define CDROM_DEF_TIMEOUT	(7 * HZ)
cdrom/cdrom.c:		rq->timeout = 60 * HZ;
cdrom/gdrom.c:#define GDROM_DEFAULT_TIMEOUT	(HZ * 7)
cdrom/gdrom.c:		timeout = jiffies + HZ / 2;
cdrom/gdrom.c:		timeout = jiffies + HZ / 2;
cdrom/gdrom.c:		timeout = jiffies + HZ / 2;
char/agp/nvidia-agp.c:		end = jiffies + 3*HZ;
char/agp/sworks-agp.c:	timeout = jiffies + 3*HZ;
char/agp/sworks-agp.c:	timeout = jiffies + 3*HZ;
char/apm-emulation.c:			5*HZ);
char/diag/diagfwd_hsic.c:	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
char/diag/diagfwd_hsic.c:	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
char/dtlk.c:				__delay(50 * loops_per_jiffy / (1000/HZ));
char/dtlk.c:    __delay(loops_per_jiffy/(1000000/HZ));             \
char/dtlk.c:    __delay(loops_per_jiffy/(1000000/HZ));  /* 1 us */ \
char/dtlk.c:	expires = jiffies + 3*HZ / 100;
char/dtlk.c:	for (retries = 0; retries < loops_per_jiffy / (100000/HZ); retries++)
char/dtlk.c:		if (++retries > 10 * HZ) { /* wait no more than 10 sec
char/dtlk.c:	retries = (loops_per_jiffy * 20) / (1000000/HZ);
char/dtlk.c:				     retries < loops_per_jiffy / (4000/HZ);
char/genrtc.c: * from some routine that periodically (eg 100HZ) monitors
char/genrtc.c:		timer_task.expires = jiffies + HZ - (HZ/10);
char/hangcheck-timer.c:	mod_timer(&hangcheck_ticktock, jiffies + (hangcheck_tick*HZ));
char/hangcheck-timer.c:	mod_timer(&hangcheck_ticktock, jiffies + (hangcheck_tick*HZ));
char/hw_random/n2-drv.c:		schedule_delayed_work(&np->work, HZ * 2);
char/ipmi/ipmi_kcs_sm.c:#define ERROR0_OBF_WAIT_JIFFIES (2*HZ)
char/ipmi/ipmi_msghandler.c:#define IPMI_TIMEOUT_JIFFIES	((IPMI_TIMEOUT_TIME * HZ) / 1000)
char/ipmi/ipmi_si_intf.c:#define SI_USEC_PER_JIFFY	(1000000/HZ)
char/lp.c:		lp_table[i].timeout = 10 * HZ;
char/lp.c:			LP_TIME(minor) = arg * HZ/100;
char/lp.c:	to_jiffies = DIV_ROUND_UP(par_timeout->tv_usec, 1000000/HZ);
char/lp.c:	to_jiffies += par_timeout->tv_sec * (long) HZ;
char/msm_smd_pkt.c:				msecs_to_jiffies(2 * HZ));
char/nwflash.c:		timeout1 = jiffies + 1 * HZ;
char/nwflash.c:	timeout = jiffies + 10 * HZ;
char/nwflash.c:	timeout = jiffies + 30 * HZ;
char/pcmcia/cm4000_cs.c:#define	T_1SEC		(HZ)
char/pcmcia/cm4040_cs.c:#define	CCID_DRIVER_ASYNC_POWERUP_TIMEOUT 	(35*HZ)
char/pcmcia/cm4040_cs.c:#define	CCID_DRIVER_BULK_DEFAULT_TIMEOUT  	(150*HZ)
char/pcmcia/cm4040_cs.c:#define	CCID_DRIVER_MINIMUM_TIMEOUT 		(3*HZ)
char/pcmcia/synclink_cs.c:	dev->watchdog_timeo = 10 * HZ;
char/pcmcia/synclink_cs.c:    info->port.close_delay = 5*HZ/10;
char/pcmcia/synclink_cs.c:    info->port.closing_wait = 30*HZ;
char/pcmcia/synclink_cs.c:		info->timeout = (32*HZ*bits_per_char) /
char/pcmcia/synclink_cs.c:	info->timeout += HZ/50;		/* Add .02 seconds of slop */
char/ppdev.c:#define PP_INTERRUPT_TIMEOUT (10 * HZ) /* 10s */
char/ppdev.c:		par_timeout.tv_sec = to_jiffies / HZ;
char/ppdev.c:		par_timeout.tv_usec = (to_jiffies % (long)HZ) * (1000000/HZ);
char/ppdev.c:		to_jiffies += par_timeout.tv_sec * (long)HZ;
char/ppdev.c:		to_jiffies = ROUND_UP(par_timeout.tv_usec, 1000000/HZ);
char/random.c:	if ((fast_pool->count & 63) && !time_after(now, fast_pool->last + HZ))
char/random.c:				r->last_pulled + random_min_urandom_seed * HZ))
char/rtc.c:					2*HZ/100);
char/rtc.c: *	At least a jiffy of interrupts (rtc_freq/HZ) will have been lost.
char/rtc.c:			mod_timer(&rtc_irq_timer, jiffies + HZ/rtc_freq +
char/rtc.c:		mod_timer(&rtc_irq_timer, jiffies + HZ/rtc_freq + 2*HZ/100);
char/rtc.c:		mod_timer(&rtc_irq_timer, jiffies + HZ/rtc_freq + 2*HZ/100);
char/rtc.c:	rtc_freq = HZ;
char/rtc.c:	rtc_irq_data += ((rtc_freq/HZ)<<8);
char/rtc.c:	       time_before(jiffies, uip_watchdog + 2*HZ/100))
char/tlclk.c:#define FILTER_12HZ	0x00
char/tlclk.c:#define FILTER_6HZ	0x04
char/tpm/tpm.c:		chip->vendor.duration[TPM_SHORT] = HZ;
char/tpm/tpm.c:	if (chip->vendor.duration[TPM_SHORT] < (HZ / 100)) {
char/tpm/tpm.c:	mod_timer(&chip->user_read_timer, jiffies + (60 * HZ));
char/tpm/tpm.c:		return 2 * 60 * HZ;
char/tpm/tpm_nsc.c:	stop = jiffies + 10 * HZ;
char/tpm/tpm_st_i2c.c:				com, HZ/2);
clocksource/cs5535-clockevt.c:	cs5535_clockevent.mult = div_sc(MFGPT_HZ, NSEC_PER_SEC,
clocksource/cs5535-clockevt.c:#define MFGPT_HZ  (32768 / MFGPT_DIVISOR)
clocksource/cs5535-clockevt.c:#define MFGPT_PERIODIC (MFGPT_HZ / HZ)
clocksource/dw_apb_timer.c:		period = DIV_ROUND_UP(dw_ced->timer.freq, HZ);
clocksource/dw_apb_timer.c:		pr_debug("Setting clock period %lu for HZ %d\n", period, HZ);
clocksource/sh_cmt.c:		sh_cmt_set_next(p, ((p->rate + HZ/2) / HZ) - 1);
clocksource/sh_mtu2.c:	p->periodic = (p->rate + HZ/2) / HZ;
clocksource/sh_tmu.c:		p->periodic = (p->rate + HZ/2) / HZ;
clocksource/tcb_clksrc.c: *     at 32 KiHZ, and can handle delays of up to two seconds.
clocksource/tcb_clksrc.c:/* For now, we always use the 32K clock ... this optimizes for NO_HZ,
clocksource/tcb_clksrc.c:		__raw_writel((32768 + HZ/2) / HZ, tcaddr + ATMEL_TC_REG(2, RC));
cpufreq/cpufreq_abyssplug.c:		pr_err("cpufreq-abyssplug: %s: assumes CONFIG_NO_HZ\n",
cpufreq/cpufreq_abyssplugv2.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_adaptive.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_conservative.c:		* * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_conservativex.c:			 * governor, thus we are bound to jiffes/HZ
cpufreq/cpufreq_dancedance.c:			 * governor, thus we are bound to jiffes/HZ
cpufreq/cpufreq_electrodemand.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_gov_msm.c:		/* val could be -1 when NOHZ is not enabled */
cpufreq/cpufreq_HYPER.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_intellidemand.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_lazy.c:	 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_lightning.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_medusa.c:#define FTHRESH_DEFAULT_KHZ 0UL
cpufreq/cpufreq_medusa.c:static unsigned long fthresh_khz = FTHRESH_DEFAULT_KHZ;
cpufreq/cpufreq_ondemand.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_ondemand_x.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_optimax.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_preservative.c:		* * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_smartmax_eps.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_stockdemand.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_uberdemand.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_wheatley.c:	 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_yankdemand.c:		 * not depending on HZ, but fixed (very low). The deferred
cpufreq/cpufreq_zzmoove.c:			 * governor, thus we are bound to jiffes/HZ
cpufreq/Kconfig:        depends on CPU_FREQ && NO_HZ && HOTPLUG_CPU
cpufreq/longrun.c:		rdmsr(MSR_TMTA_LRTI_VOLT_MHZ, msr_lo, msr_hi);
cpufreq/longrun.c:		rdmsr(MSR_TMTA_LRTI_VOLT_MHZ, msr_lo, msr_hi);
cpufreq/s5pv210-cpufreq.c:	unsigned long freq;	/* HZ */
cpufreq/speedstep-lib.c: *                   GET PROCESSOR CORE SPEED IN KHZ                 *
cpuidle/Kconfig:	depends on CPU_IDLE && NO_HZ
crypto/hifn_795x.c:	schedule_delayed_work(&dev->work, HZ);
crypto/hifn_795x.c:	schedule_delayed_work(&dev->work, HZ);
crypto/omap-aes.c:#define DEFAULT_TIMEOUT		(5*HZ)
crypto/omap-sham.c:#define DEFAULT_TIMEOUT_INTERVAL	HZ
dma/imx-sdma.c:	ret = wait_for_completion_timeout(&sdmac->done, HZ);
dma/pl330.c:#define msecs_to_loops(t) (loops_per_jiffy / 1000 * HZ * t)
edac/edac_mc_sysfs.c:	return sprintf(data, "%ld\n", (jiffies - mci->start_time) / HZ);
edac/i5100_edac.c:#define I5100_SCRUB_REFRESH_RATE	(5 * 60 * HZ)
edac/i5100_edac.c:	et = jiffies + HZ / 10;
eisa/eisa.ids:DTK0003 "DTK PLM-3331P EISACACHE486 33/25/50 MHZ"
firewire/core-card.c:			     card->reset_jiffies + DIV_ROUND_UP(HZ, 8));
firewire/core-card.c:				delayed ? DIV_ROUND_UP(HZ, 100) : 0))
firewire/core-card.c:			DIV_ROUND_UP(DEFAULT_SPLIT_TIMEOUT * HZ, 8000);
firewire/core-card.c:			fw_schedule_bm_work(card, DIV_ROUND_UP(HZ, 8));
firewire/core-card.c:		fw_schedule_bm_work(card, DIV_ROUND_UP(HZ, 8));
firewire/core-card.c:		if (!queue_delayed_work(fw_workqueue, &card->br_work, 2 * HZ))
firewire/core-card.c:	    time_before64(get_jiffies_64(), card->reset_jiffies + 2 * HZ)) {
firewire/core-cdev.c:			  client->device->card->reset_jiffies + HZ)) {
firewire/core-cdev.c:		schedule_iso_resource(r, DIV_ROUND_UP(HZ, 3));
firewire/core-device.c:#define INITIAL_DELAY	(HZ / 2)
firewire/core-device.c:#define RETRY_DELAY	(3 * HZ)
firewire/core-device.c:#define SHUTDOWN_DELAY	(2 * HZ)
firewire/core-transaction.c:	card->split_timeout_jiffies = DIV_ROUND_UP(cycles * HZ, 8000);
firewire/core-transaction.c:	long timeout = DIV_ROUND_UP(HZ, 10);
firewire/net.c:	net->watchdog_timeo	= 2 * HZ;
firewire/sbp2.c:			sbp2_queue_work(lu, DIV_ROUND_UP(HZ, 5));
firewire/sbp2.c:		sbp2_queue_work(lu, DIV_ROUND_UP(HZ, 5));
firewire/sbp2.c:		sbp2_queue_work(lu, DIV_ROUND_UP(HZ, 5));
gpu/drm/drm_crtc_helper.c:#define DRM_OUTPUT_POLL_PERIOD (10*HZ)
gpu/drm/drm_edid_modes.h:	/* 2560x1600@75HZ */
gpu/drm/drm_edid_modes.h:	/* 2560x1600@85HZ */
gpu/drm/drm_fops.c:		unsigned long _end = jiffies + 3 * DRM_HZ;
gpu/drm/drm_irq.c:	DRM_WAIT_ON(ret, dev->vbl_queue[crtc], 3 * DRM_HZ,
gpu/drm/drm_irq.c:			  jiffies + ((drm_vblank_offdelay * DRM_HZ)/1000));
gpu/drm/drm_modes.c:		if (KHZ2PICOS(mode1->clock) != KHZ2PICOS(mode2->clock))
gpu/drm/gma500/accel_2d.c:	unsigned long _end = jiffies + DRM_HZ;
gpu/drm/gma500/accel_2d.c:	unsigned long t = jiffies + HZ;
gpu/drm/gma500/intel_gmbus.c:		bus->reg0 = i | GMBUS_RATE_100KHZ;
gpu/drm/gma500/oaktrail_hdmi_i2c.c:								10 * HZ);
gpu/drm/gma500/psb_drv.h:#define MDFLD_DSR_DELAY		(DRM_HZ / MDFLD_DSR_RR)
gpu/drm/gma500/psb_drv.h:#define PSB_LID_DELAY (DRM_HZ / 10)
gpu/drm/gma500/psb_drv.h:#define PSB_WATCHDOG_DELAY (DRM_HZ * 2)
gpu/drm/gma500/psb_intel_reg.h:#define   GMBUS_RATE_100KHZ	(0<<8)
gpu/drm/gma500/psb_intel_reg.h:#define   GMBUS_RATE_1MHZ	(3<<8) /* reserved on Pineview */
gpu/drm/gma500/psb_intel_reg.h:#define   GMBUS_RATE_400KHZ	(2<<8) /* reserved on Pineview */
gpu/drm/gma500/psb_intel_reg.h:#define   GMBUS_RATE_50KHZ	(1<<8)
gpu/drm/gma500/psb_intel_reg.h:#define I915_DISPLAY_CLOCK_190_200_MHZ	(0 << 4)
gpu/drm/gma500/psb_intel_reg.h:#define I915_DISPLAY_CLOCK_333_MHZ	(4 << 4)
gpu/drm/gma500/psb_intel_sdvo.c:	speed = GMBUS_RATE_1MHZ >> 8;
gpu/drm/gma500/psb_irq.c:	DRM_WAIT_ON(ret, dev->vbl_queue, 3 * DRM_HZ,
gpu/drm/i810/i810_dma.c:			end = jiffies + (HZ * 3);
gpu/drm/i810/i810_dma.c:	end = jiffies + (HZ * 3);
gpu/drm/i915/i915_gem.c:					   &dev_priv->mm.retire_work, HZ);
gpu/drm/i915/i915_gem.c:		queue_delayed_work(dev_priv->wq, &dev_priv->mm.retire_work, HZ);
gpu/drm/i915/i915_gem.c:		queue_delayed_work(dev_priv->wq, &dev_priv->mm.retire_work, HZ);
gpu/drm/i915/i915_irq.c:		DRM_WAIT_ON(ret, ring->irq_queue, 3 * DRM_HZ,
gpu/drm/i915/i915_reg.h:#define   DP_PLL_FREQ_160MHZ		(1 << 16)
gpu/drm/i915/i915_reg.h:#define   DP_PLL_FREQ_270MHZ		(0 << 16)
gpu/drm/i915/i915_reg.h:#define   GC_DISPLAY_CLOCK_190_200_MHZ	(0 << 4)
gpu/drm/i915/i915_reg.h:#define   GC_DISPLAY_CLOCK_333_MHZ	(4 << 4)
gpu/drm/i915/i915_reg.h:#define   GM45_GC_RENDER_CLOCK_266_MHZ	(8 << 0)
gpu/drm/i915/i915_reg.h:#define   GM45_GC_RENDER_CLOCK_320_MHZ	(9 << 0)
gpu/drm/i915/i915_reg.h:#define   GM45_GC_RENDER_CLOCK_400_MHZ	(0xb << 0)
gpu/drm/i915/i915_reg.h:#define   GM45_GC_RENDER_CLOCK_533_MHZ	(0xc << 0)
gpu/drm/i915/i915_reg.h:#define   GMBUS_RATE_100KHZ	(0<<8)
gpu/drm/i915/i915_reg.h:#define   GMBUS_RATE_1MHZ	(3<<8) /* reserved on Pineview */
gpu/drm/i915/i915_reg.h:#define   GMBUS_RATE_400KHZ	(2<<8) /* reserved on Pineview */
gpu/drm/i915/i915_reg.h:#define   GMBUS_RATE_50KHZ	(1<<8)
gpu/drm/i915/i915_reg.h:#define   I915_GC_RENDER_CLOCK_166_MHZ	(0 << 0)
gpu/drm/i915/i915_reg.h:#define   I915_GC_RENDER_CLOCK_200_MHZ	(1 << 0)
gpu/drm/i915/i915_reg.h:#define   I915_GC_RENDER_CLOCK_333_MHZ	(4 << 0)
gpu/drm/i915/i915_reg.h:#define   I945_GC_RENDER_CLOCK_166_MHZ	(0 << 0)
gpu/drm/i915/i915_reg.h:#define   I945_GC_RENDER_CLOCK_200_MHZ	(1 << 0)
gpu/drm/i915/i915_reg.h:#define   I945_GC_RENDER_CLOCK_250_MHZ	(3 << 0)
gpu/drm/i915/i915_reg.h:#define   I945_GC_RENDER_CLOCK_400_MHZ	(5 << 0)
gpu/drm/i915/i915_reg.h:#define   I965_GC_RENDER_CLOCK_267_MHZ	(2 << 0)
gpu/drm/i915/i915_reg.h:#define   I965_GC_RENDER_CLOCK_333_MHZ	(3 << 0)
gpu/drm/i915/i915_reg.h:#define   I965_GC_RENDER_CLOCK_444_MHZ	(4 << 0)
gpu/drm/i915/i915_reg.h:#define   I965_GC_RENDER_CLOCK_533_MHZ	(5 << 0)
gpu/drm/i915/intel_display.c:		case GC_DISPLAY_CLOCK_190_200_MHZ:
gpu/drm/i915/intel_display.c:		case GC_DISPLAY_CLOCK_333_MHZ:
gpu/drm/i915/intel_display.c:		dpa_ctl |= DP_PLL_FREQ_160MHZ;
gpu/drm/i915/intel_display.c:		dpa_ctl |= DP_PLL_FREQ_270MHZ;
gpu/drm/i915/intel_dp.c:				intel_dp->DP |= DP_PLL_FREQ_160MHZ;
gpu/drm/i915/intel_dp.c:			intel_dp->DP |= DP_PLL_FREQ_160MHZ;
gpu/drm/i915/intel_dp.c:				intel_dp->DP |= DP_PLL_FREQ_270MHZ;
gpu/drm/i915/intel_dp.c:			intel_dp->DP |= DP_PLL_FREQ_270MHZ;
gpu/drm/i915/intel_i2c.c:		bus->reg0 = i | GMBUS_RATE_100KHZ;
gpu/drm/i915/intel_ringbuffer.c:		end = jiffies + 3 * HZ;
gpu/drm/i915/intel_ringbuffer.c:		end = jiffies + 60 * HZ;
gpu/drm/i915/intel_sdvo.c:		intel_gmbus_set_speed(sdvo->i2c, GMBUS_RATE_1MHZ);
gpu/drm/mga/mga_irq.c:	DRM_WAIT_ON(ret, dev_priv->fence_queue, 3 * DRM_HZ,
gpu/drm/nouveau/nouveau_fence.c:	unsigned long timeout = jiffies + (3 * DRM_HZ);
gpu/drm/nouveau/nouveau_util.c:static DEFINE_RATELIMIT_STATE(nouveau_ratelimit_state, 3 * HZ, 20);
gpu/drm/radeon/atombios_encoders.c:					args.v1.sDigEncoder.ucConfig |= ATOM_ENCODER_CONFIG_DPLINKRATE_2_70GHZ;
gpu/drm/radeon/atombios_encoders.c:				args.v1.ucConfig |= ATOM_ENCODER_CONFIG_DPLINKRATE_2_70GHZ;
gpu/drm/radeon/atombios_encoders.c:				args.v1.ucConfig |= ATOM_ENCODER_CONFIG_V3_DPLINKRATE_2_70GHZ;
gpu/drm/radeon/atombios_encoders.c:					args.v1.ucConfig |= ATOM_ENCODER_CONFIG_V4_DPLINKRATE_2_70GHZ;
gpu/drm/radeon/atombios_encoders.c:					args.v1.ucConfig |= ATOM_ENCODER_CONFIG_V4_DPLINKRATE_5_40GHZ;
gpu/drm/radeon/atombios_encoders.c:					args.v3.sExtEncoder.ucConfig |= EXTERNAL_ENCODER_CONFIG_V3_DPLINKRATE_2_70GHZ;
gpu/drm/radeon/atombios_encoders.c:					args.v3.sExtEncoder.ucConfig |= EXTERNAL_ENCODER_CONFIG_V3_DPLINKRATE_5_40GHZ;
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_DPLINKRATE_1_62GHZ		0x00
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_DPLINKRATE_2_70GHZ		0x01
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_DPLINKRATE_5_40GHZ		0x02
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_V2_DPLINKRATE_1_62GHZ		  0x00
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_V2_DPLINKRATE_2_70GHZ		  0x01
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_V3_DPLINKRATE_1_62GHZ		  0x00
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_V3_DPLINKRATE_2_70GHZ		  0x01
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_V4_DPLINKRATE_1_62GHZ		  0x00
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_V4_DPLINKRATE_2_70GHZ		  0x01
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_V4_DPLINKRATE_3_24GHZ		  0x03
gpu/drm/radeon/atombios.h:#define ATOM_ENCODER_CONFIG_V4_DPLINKRATE_5_40GHZ		  0x02
gpu/drm/radeon/atombios.h:#define ATOM_PPLIB_LIMITED_REFRESHRATE_50HZ         1
gpu/drm/radeon/atombios.h:#define EXTERNAL_ENCODER_CONFIG_V3_DPLINKRATE_1_62GHZ		  0x00
gpu/drm/radeon/atombios.h:#define EXTERNAL_ENCODER_CONFIG_V3_DPLINKRATE_2_70GHZ		  0x01
gpu/drm/radeon/atombios.h:#define EXTERNAL_ENCODER_CONFIG_V3_DPLINKRATE_5_40GHZ		  0x02
gpu/drm/radeon/r300_reg.h:#	define R300_SC_HYPERZ_HZ_Z0MAX    (1 << 6)
gpu/drm/radeon/r300_reg.h:#	define R300_SC_HYPERZ_HZ_Z0MAX_NO (0 << 6)
gpu/drm/radeon/r300_reg.h:#	define R300_SC_HYPERZ_HZ_Z0MIN    (1 << 5)
gpu/drm/radeon/r300_reg.h:#	define R300_SC_HYPERZ_HZ_Z0MIN_NO (0 << 5)
gpu/drm/radeon/r600_audio.c: * current sampling rate in HZ
gpu/drm/radeon/radeon.h:#define RADEON_FENCE_JIFFIES_TIMEOUT	(HZ / 2)
gpu/drm/radeon/radeon_irq.c:	DRM_WAIT_ON(ret, dev_priv->swi_queue, 3 * DRM_HZ,
gpu/drm/sis/sis_mm.c:	end = jiffies + (DRM_HZ * 3);
gpu/drm/ttm/ttm_bo.c:			      ((HZ / 100) < 1) ? 1 : HZ / 100);
gpu/drm/ttm/ttm_bo.c:				      ((HZ / 100) < 1) ? 1 : HZ / 100);
gpu/drm/ttm/ttm_bo.c:				      ((HZ / 100) < 1) ? 1 : HZ / 100);
gpu/drm/udl/udl_connector.c:				      HZ);
gpu/drm/udl/udl_fb.c:#define DL_DEFIO_WRITE_DELAY    (HZ/20) /* fb_deferred_io.delay in jiffies */
gpu/drm/udl/udl_main.c:#define FREE_URB_TIMEOUT (HZ*2)
gpu/drm/udl/udl_main.c:#define GET_URB_TIMEOUT	HZ
gpu/drm/via/via_3d_reg.h:#define HC_HZBiasedWB_MASK      0x00400000
gpu/drm/via/via_3d_reg.h:#define HC_HZBiasH_MASK         0x000000ff
gpu/drm/via/via_3d_reg.h:#define HC_HZCYNum_MASK         0x00030000
gpu/drm/via/via_3d_reg.h:#define HC_HZCYNum_SHIFT        16
gpu/drm/via/via_3d_reg.h:#define HC_HZNF_MASK            0x000000ff
gpu/drm/via/via_3d_reg.h:#define HC_HZONEasFF_MASK       0x00200000
gpu/drm/via/via_3d_reg.h:#define HC_HZOONEasFF_MASK      0x00100000
gpu/drm/via/via_3d_reg.h:#define HC_HZWBend_MASK         0x00ffe000
gpu/drm/via/via_3d_reg.h:#define HC_HZWBend_SHIFT        10
gpu/drm/via/via_3d_reg.h:#define HC_HZWBFM_16            0x00000000
gpu/drm/via/via_3d_reg.h:#define HC_HZWBFM_24            0x00030000
gpu/drm/via/via_3d_reg.h:#define HC_HZWBFM_32            0x00020000
gpu/drm/via/via_3d_reg.h:#define HC_HZWBFM_MASK          0x00030000
gpu/drm/via/via_3d_reg.h:#define HC_HZWBLoc_Local        0x00000000
gpu/drm/via/via_3d_reg.h:#define HC_HZWBLoc_MASK         0x0000c000
gpu/drm/via/via_3d_reg.h:#define HC_HZWBLoc_SyS          0x00004000
gpu/drm/via/via_3d_reg.h:#define HC_HZWBPit_MASK         0x00003fff
gpu/drm/via/via_3d_reg.h:#define HC_HZWBType_MASK        0x00800000
gpu/drm/via/via_3d_reg.h:#define HC_HZWCDH_MASK          0x000000ff
gpu/drm/via/via_3d_reg.h:#define HC_HZWCDH_SHIFT         0
gpu/drm/via/via_3d_reg.h:#define HC_HZWCDL_MASK          0x00ffffff
gpu/drm/via/via_3d_reg.h:#define HC_HZWCQWnumLast_MASK   0x00003fff
gpu/drm/via/via_3d_reg.h:#define HC_HZWCQWnumLast_SHIFT  0
gpu/drm/via/via_3d_reg.h:#define HC_HZWCQWnum_MASK       0x00003fff
gpu/drm/via/via_3d_reg.h:#define HC_HZWCQWnum_SHIFT      0
gpu/drm/via/via_3d_reg.h:#define HC_HZWCTAGnum_MASK      0x00ff0000
gpu/drm/via/via_3d_reg.h:#define HC_HZWCTAGnum_SHIFT     16
gpu/drm/via/via_3d_reg.h:#define HC_HZWTMD_AllPass       0x00070000
gpu/drm/via/via_3d_reg.h:#define HC_HZWTMD_EQ            0x00020000
gpu/drm/via/via_3d_reg.h:#define HC_HZWTMD_GE            0x00060000
gpu/drm/via/via_3d_reg.h:#define HC_HZWTMD_GT            0x00040000
gpu/drm/via/via_3d_reg.h:#define HC_HZWTMD_LE            0x00030000
gpu/drm/via/via_3d_reg.h:#define HC_HZWTMD_LT            0x00010000
gpu/drm/via/via_3d_reg.h:#define HC_HZWTMD_MASK          0x00070000
gpu/drm/via/via_3d_reg.h:#define HC_HZWTMD_NE            0x00050000
gpu/drm/via/via_3d_reg.h:#define HC_HZWTMD_NeverPass     0x00000000
gpu/drm/via/via_3d_reg.h:#define HC_SIMA_HZBiasL         0x0018
gpu/drm/via/via_3d_reg.h:#define HC_SIMA_HZCYNum         0x001d
gpu/drm/via/via_3d_reg.h:#define HC_SIMA_HZWBBasH        0x0016
gpu/drm/via/via_3d_reg.h:#define HC_SIMA_HZWBBasL        0x0015
gpu/drm/via/via_3d_reg.h:#define HC_SIMA_HZWBend         0x0019
gpu/drm/via/via_3d_reg.h:#define HC_SIMA_HZWBType        0x0017
gpu/drm/via/via_3d_reg.h:#define HC_SIMA_HZWCDL          0x001b
gpu/drm/via/via_3d_reg.h:#define HC_SIMA_HZWCFire        0x001e
gpu/drm/via/via_3d_reg.h:#define HC_SIMA_HZWCTAGnum      0x001c
gpu/drm/via/via_3d_reg.h:#define HC_SIMA_HZWTMD          0x001a
gpu/drm/via/via_3d_reg.h:#define HC_SubA_HZBiasL         0x0013
gpu/drm/via/via_3d_reg.h:#define HC_SubA_HZCYNum         0x0018
gpu/drm/via/via_3d_reg.h:#define HC_SubA_HZWBBasH        0x0011
gpu/drm/via/via_3d_reg.h:#define HC_SubA_HZWBBasL        0x0010
gpu/drm/via/via_3d_reg.h:#define HC_SubA_HZWBend         0x0014
gpu/drm/via/via_3d_reg.h:#define HC_SubA_HZWBType        0x0012
gpu/drm/via/via_3d_reg.h:#define HC_SubA_HZWCDL          0x0016
gpu/drm/via/via_3d_reg.h:#define HC_SubA_HZWCFire        0x0019
gpu/drm/via/via_3d_reg.h:#define HC_SubA_HZWCTAGnum      0x0017
gpu/drm/via/via_3d_reg.h:#define HC_SubA_HZWTMD          0x0015
gpu/drm/via/via_3d_reg.h:/* HC_SubA_HZCYNum         0x0018
gpu/drm/via/via_3d_reg.h:/* HC_SubA_HZWBend
gpu/drm/via/via_3d_reg.h:/* HC_SubA_HZWBType
gpu/drm/via/via_3d_reg.h:/* HC_SubA_HZWCDL          0x0016
gpu/drm/via/via_3d_reg.h:/* HC_SubA_HZWCFire        0x0019
gpu/drm/via/via_3d_reg.h:/* HC_SubA_HZWCTAGnum      0x0017
gpu/drm/via/via_3d_reg.h:/* HC_SubA_HZWTMD
gpu/drm/via/via_dmablit.c:			blitq->end = jiffies + DRM_HZ;
gpu/drm/via/via_dmablit.c:		blitq->end = jiffies + DRM_HZ;
gpu/drm/via/via_dmablit.c:		DRM_WAIT_ON(ret, blitq->busy_queue, DRM_HZ, blitq->num_free > 0);
gpu/drm/via/via_dmablit.c:		DRM_WAIT_ON(ret, *queue, 3 * DRM_HZ,
gpu/drm/via/via_irq.c:		DRM_WAIT_ON(ret, cur_irq->irq_queue, 3 * DRM_HZ,
gpu/drm/via/via_irq.c:		DRM_WAIT_ON(ret, cur_irq->irq_queue, 3 * DRM_HZ,
gpu/drm/via/via_video.c:			    (fx->ms / 10) * (DRM_HZ / 100), *lock != fx->val);
gpu/drm/vmwgfx/vmwgfx_drv.c:					 10*HZ);
gpu/drm/vmwgfx/vmwgfx_execbuf.c:	(void) vmw_fallback_wait(dev_priv, false, true, 0, false, 10*HZ);
gpu/drm/vmwgfx/vmwgfx_fb.c:#define VMW_DIRTY_DELAY (HZ / 30)
gpu/drm/vmwgfx/vmwgfx_fence.c:	uint64_t wait_timeout = ((uint64_t)arg->timeout_us * HZ);
gpu/drm/vmwgfx/vmwgfx_fence.h:#define VMW_FENCE_WAIT_TIMEOUT (5*HZ)
gpu/drm/vmwgfx/vmwgfx_fifo.c:						    false, 3 * HZ);
gpu/drm/vmwgfx/vmwgfx_fifo.c:						    false, 3 * HZ);
gpu/drm/vmwgfx/vmwgfx_fifo.c:					false, 3*HZ);
gpu/drm/vmwgfx/vmwgfx_kms.c:#define VMWGFX_PRESENT_RATE ((HZ / 60 > 0) ? HZ / 60 : 1)
gpu/drm/vmwgfx/vmwgfx_marker.c:					3*HZ);
gpu/drm/vmwgfx/vmwgfx_overlay.c:					interruptible, 3*HZ);
gpu/drm/vmwgfx/vmwgfx_scrn.c:	ret = vmw_fallback_wait(dev_priv, false, true, 0, false, 3*HZ);
gpu/msm/kgsl_device.h:#define FIRST_TIMEOUT (HZ / 2)
hid/hid-hyperv.c:	t = wait_for_completion_timeout(&input_dev->wait_event, 5*HZ);
hid/hid-hyperv.c:	t = wait_for_completion_timeout(&input_dev->wait_event, 5*HZ);
hid/hid-magicmouse.c:						msc->scroll_jiffies + HZ / 2))
hid/hid-picolcd.c:	data->fb_defio.delay = HZ / data->fb_update_rate;
hid/hid-picolcd.c:	.delay = HZ / PICOLCDFB_UPDATE_RATE_DEFAULT,
hid/hid-picolcd.c:	wait_for_completion_interruptible_timeout(&work->ready, HZ*2);
hid/hid-wiimote.h:	ret = wait_for_completion_interruptible_timeout(&wdata->state.ready, HZ);
hid/uhid.c:				atomic_read(&uhid->report_done), 5 * HZ);
hid/usbhid/hid-core.c:					10*HZ)) {
hid/usbhid/hid-core.c:	} else if (time_after(jiffies, usbhid->last_ctrl + HZ * 5)) {
hid/usbhid/hid-core.c:		} else if (time_after(jiffies, usbhid->last_out + HZ * 5)) {
hid/usbhid/hid-core.c:	if (time_after(jiffies, usbhid->stop_retry + HZ/2))
hv/channel.c:	t = wait_for_completion_timeout(&open_info->waitevent, 5*HZ);
hv/connection.c:	t =  wait_for_completion_timeout(&msginfo->waitevent, 5*HZ);
hv/hv_balloon.c:		if (!time_in_range(jiffies, scan_start, scan_start + HZ))
hv/hv_balloon.c:		t = wait_for_completion_timeout(&dm_device.config_event, 1*HZ);
hv/hv_balloon.c:	t = wait_for_completion_timeout(&dm_device.host_event, 5*HZ);
hv/hv_balloon.c:	t = wait_for_completion_timeout(&dm_device.host_event, 5*HZ);
hv/hv_kvp.c:			schedule_delayed_work(&kvp_work, 5*HZ);
hv/vmbus_drv.c:	t = wait_for_completion_timeout(&probe_event, 5*HZ);
hwmon/abituguru3.c:	if (!data->valid || time_after(jiffies, data->last_updated + HZ)) {
hwmon/abituguru.c:#define ABIT_UGURU_RETRY_DELAY			(HZ/5)
hwmon/abituguru.c:	if (time_after(jiffies, data->last_updated + HZ)) {
hwmon/abituguru.c:	schedule_timeout(HZ/20);
hwmon/abituguru.c:	schedule_timeout(HZ/50);
hwmon/ad7414.c:		data->next_update = jiffies + HZ + HZ / 2;
hwmon/ad7418.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/adm1021.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/adm1025.c:	if (time_after(jiffies, data->last_updated + HZ * 2) || !data->valid) {
hwmon/adm1026.c:#define ADM1026_CONFIG_INTERVAL		(5 * 60 * HZ)
hwmon/adm1026.c:#define ADM1026_DATA_INTERVAL		(1 * HZ)
hwmon/adm1029.c:	if (time_after(jiffies, data->last_updated + HZ * 2)
hwmon/adm9240.c:	if (time_after(jiffies, data->last_updated_config + (HZ * 300))
hwmon/adm9240.c:	if (time_after(jiffies, data->last_updated_measure + (HZ * 7 / 4))
hwmon/ads7828.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/adt7411.c:		data->next_update = jiffies + HZ;
hwmon/adt7462.c:#define LIMIT_REFRESH_INTERVAL	(60 * HZ)
hwmon/adt7462.c:#define SENSOR_REFRESH_INTERVAL	(2 * HZ)
hwmon/adt7470.c:#define LIMIT_REFRESH_INTERVAL	(60 * HZ)
hwmon/adt7470.c:#define SENSOR_REFRESH_INTERVAL	(5 * HZ)
hwmon/adt7475.c:	if (time_after(jiffies, data->limits_updated + HZ * 60) ||
hwmon/adt7475.c:	if (time_after(jiffies, data->measure_updated + HZ * 2) ||
hwmon/amc6821.c:	int timeout = HZ;
hwmon/asb100.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/asc7621.c:#define INTERVAL_HIGH   (HZ + HZ / 2)
hwmon/asc7621.c:#define INTERVAL_LOW    (1 * 60 * HZ)
hwmon/asus_atk0110.c:#define CACHE_TIME		HZ
hwmon/atxp1.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/coretemp.c:	if (!tdata->valid || time_after(jiffies, tdata->last_updated + HZ)) {
hwmon/dme1737.c:	if (time_after(jiffies, data->last_update + HZ) || !data->valid) {
hwmon/dme1737.c:	if (time_after(jiffies, data->last_vbat + 600 * HZ) || !data->valid) {
hwmon/ds1621.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/ds620.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/emc1403.c:		data->hyst_valid = jiffies + HZ;
hwmon/emc1403.c:		data->hyst_valid = jiffies + HZ;
hwmon/emc2103.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/emc6w201.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/f71805f.c:	if (time_after(jiffies, data->last_updated + 60 * HZ)
hwmon/f71805f.c:	if (time_after(jiffies, data->last_updated + HZ)
hwmon/f71882fg.c:	if (time_after(jiffies, data->last_limits + 60 * HZ) ||
hwmon/f71882fg.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/f75375s.c:	if (time_after(jiffies, data->last_limits + 60 * HZ)
hwmon/f75375s.c:	if (time_after(jiffies, data->last_updated + 2 * HZ)
hwmon/fschmd.c:	if (time_after(jiffies, data->last_updated + 2 * HZ) || !data->valid) {
hwmon/g760a.c:#define G760A_UPDATE_INTERVAL (HZ)
hwmon/gl518sm.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/gl520sm.c:	if (time_after(jiffies, data->last_updated + 2 * HZ) || !data->valid) {
hwmon/ibmaem.c:#define IPMI_TIMEOUT		(30 * HZ)
hwmon/ibmaem.c:#define REFRESH_INTERVAL	(HZ)
hwmon/ibmpex.c:#define REFRESH_INTERVAL	(2 * HZ)
hwmon/ina2xx.c:		       HZ / INA2XX_CONVERSION_RATE) || !data->valid) {
hwmon/it87.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/jc42.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/jz4740-hwmon.c:	t = wait_for_completion_interruptible_timeout(completion, HZ);
hwmon/k8temp.c:	    || time_after(jiffies, data->last_updated + HZ)) {
hwmon/lineage-pem.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/lm63.c:		data->max_convrate_hz = LM63_MAX_CONVRATE_HZ;
hwmon/lm63.c:		data->max_convrate_hz = LM96163_MAX_CONVRATE_HZ;
hwmon/lm63.c:#define LM63_MAX_CONVRATE_HZ		32
hwmon/lm63.c:#define LM96163_MAX_CONVRATE_HZ		26
hwmon/lm63.c:	if (time_after(jiffies, data->lut_last_updated + 5 * HZ) ||
hwmon/lm75.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/lm77.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/lm78.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/lm80.c:	if (time_after(jiffies, data->last_updated + 2 * HZ) || !data->valid) {
hwmon/lm83.c:	if (time_after(jiffies, data->last_updated + HZ * 2) || !data->valid) {
hwmon/lm85.c:#define LM85_CONFIG_INTERVAL  (1 * 60 * HZ)
hwmon/lm85.c:#define LM85_DATA_INTERVAL  (HZ + HZ / 2)
hwmon/lm87.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/lm92.c:	if (time_after(jiffies, data->last_updated + HZ)
hwmon/lm93.c:	const unsigned long interval = HZ + (HZ / 2);
hwmon/lm93.c: * PWM FREQ: HZ
hwmon/lm95241.c:	data->interval = HZ;	/* 1 sec default */
hwmon/lm95241.c:	data->interval = val * HZ / 1000;
hwmon/lm95241.c:			/ HZ);
hwmon/ltc4151.c:	if (time_after(jiffies, data->last_updated + HZ / 6) || !data->valid) {
hwmon/ltc4215.c:	if (time_after(jiffies, data->last_updated + HZ / 10) || !data->valid) {
hwmon/ltc4245.c:	if (time_after(jiffies, data->last_updated + 5 * HZ)) {
hwmon/ltc4245.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/ltc4261.c:	if (time_after(jiffies, data->last_updated + HZ / 4) || !data->valid) {
hwmon/max16065.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/max1619.c:	if (time_after(jiffies, data->last_updated + HZ * 2) || !data->valid) {
hwmon/max1668.c:			data->last_updated + HZ + HZ / 2))
hwmon/max6639.c:	if (time_after(jiffies, data->last_updated + 2 * HZ) || !data->valid) {
hwmon/max6642.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/max6650.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/msm_adc.c:#define MSM_ADC_DALRC_CONV_TIMEOUT	(5 * HZ)  /* 5 seconds */
hwmon/pc87360.c:	if (time_after(jiffies, data->last_updated + HZ * 2) || !data->valid) {
hwmon/pc87427.c:	if (!time_after(jiffies, data->last_updated + HZ)
hwmon/pm8xxx-adc.c:#define PM8XXX_ADC_COMPLETION_TIMEOUT			(2 * HZ)
hwmon/pmbus/pmbus_core.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/sch5627.c:	if (time_after(jiffies, data->last_battery + 300 * HZ)) {
hwmon/sch5627.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/sch5636.c:	if (data->valid && !time_after(jiffies, data->last_updated + HZ))
hwmon/sht15.c:	int timeout = HZ;
hwmon/sht15.c:	int timeout = HZ;
hwmon/sht21.c:	if (time_after(jiffies, sht21->last_update + HZ / 2) || !sht21->valid) {
hwmon/sis5595.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/smm665.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/smsc47b397.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/smsc47m192.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/smsc47m1.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2) || init) {
hwmon/thmc50.c:	int timeout = HZ / 5 + (data->type == thmc50 ? HZ : 0);
hwmon/tmp102.c:	if (time_after(jiffies, tmp102->last_update + HZ / 3)) {
hwmon/tmp102.c:	tmp102->last_update = jiffies - HZ;
hwmon/tmp401.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/tmp421.c:	if (time_after(jiffies, data->last_updated + 2 * HZ) || !data->valid) {
hwmon/via686a.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/vt1211.c:	if (time_after(jiffies, data->last_updated + HZ) || !data->valid) {
hwmon/vt8231.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/w83627ehf.c:	if (time_after(jiffies, data->last_updated + HZ + HZ/2)
hwmon/w83627hf.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/w83781d.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
hwmon/w83791d.c:	if (time_after(jiffies, data->last_updated + (HZ * 3))
hwmon/w83792d.c:	    (jiffies - data->last_updated, (unsigned long) (HZ * 3))
hwmon/w83793.c:	if (!(time_after(jiffies, data->last_nonvolatile + HZ * 300)
hwmon/w83793.c:	if (!(time_after(jiffies, data->last_updated + HZ * 2)
hwmon/w83795.c:	if (!(time_after(jiffies, data->last_updated + HZ * 2)
hwmon/w83l785ts.c:	if (!data->valid || time_after(jiffies, data->last_updated + HZ * 2)) {
hwmon/w83l786ng.c:	if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
i2c/busses/i2c-acorn.c:	.timeout	= HZ,
i2c/busses/i2c-bfin-twi.c:	clkhilow = ((10 * 1000 / CONFIG_I2C_BLACKFIN_TWI_CLK_KHZ) + 1) / 2;
i2c/busses/i2c-bfin-twi.c:			((CONFIG_I2C_BLACKFIN_TWI_CLK_KHZ > 100) ? FAST : 0));
i2c/busses/i2c-bfin-twi.c:			((CONFIG_I2C_BLACKFIN_TWI_CLK_KHZ>100) ? FAST : 0));
i2c/busses/i2c-bfin-twi.c:			((CONFIG_I2C_BLACKFIN_TWI_CLK_KHZ>100) ? FAST : 0));
i2c/busses/i2c-bfin-twi.c:		((CONFIG_I2C_BLACKFIN_TWI_CLK_KHZ > 100) ? FAST : 0));
i2c/busses/i2c-bfin-twi.c:	p_adap->timeout = 5 * HZ;
i2c/busses/i2c-cpm.c:				1 * HZ);
i2c/busses/i2c-cpm.c:				1 * HZ);
i2c/busses/i2c-davinci.c:#define DAVINCI_I2C_TIMEOUT	(1*HZ)
i2c/busses/i2c-designware-core.c:	ret = wait_for_completion_interruptible_timeout(&dev->cmd_complete, HZ);
i2c/busses/i2c-diolan-u2c.c:#define U2C_I2C_SPEED_2KHZ	242	/* 2 kHz, minimum speed */
i2c/busses/i2c-diolan-u2c.c:		if (speed > U2C_I2C_SPEED_2KHZ)
i2c/busses/i2c-diolan-u2c.c:			speed = U2C_I2C_SPEED_2KHZ;
i2c/busses/i2c-elektor.c:			if (schedule_timeout(timeout*HZ)) {
i2c/busses/i2c-gpio.c:		bit_data->timeout = HZ / 10;		/* 100 ms */
i2c/busses/i2c-hydra.c:	.timeout	= HZ
i2c/busses/i2c-ibm_iic.c:	adap->timeout = HZ;
i2c/busses/i2c-ibm_iic.c:	unsigned long x = jiffies + HZ / 28 + 2;
i2c/busses/i2c-imx.c:	wait_event_timeout(i2c_imx->queue, i2c_imx->i2csr & I2SR_IIF, HZ / 10);
i2c/busses/i2c-intel-mid.c:	err = wait_for_completion_interruptible_timeout(&i2c->complete, HZ);
i2c/busses/i2c-intel-mid.c:	err = wait_for_completion_interruptible_timeout(&i2c->complete, HZ);
i2c/busses/i2c-iop3xx.c:			1 * HZ;
i2c/busses/i2c-iop3xx.c:	new_adapter->timeout = HZ;
i2c/busses/i2c-ixp2000.c:	drv_data->algo_data.timeout = HZ;
i2c/busses/i2c-mpc.c:	dev_info(i2c->dev, "timeout %u us\n", mpc_ops.timeout * 1000000 / HZ);
i2c/busses/i2c-mpc.c:		if (time_after(jiffies, orig_jiffies + HZ)) {
i2c/busses/i2c-mpc.c:		mpc_ops.timeout = *prop * HZ / 1000000;
i2c/busses/i2c-mpc.c:	.timeout = HZ,
i2c/busses/i2c-msm.c:	mod_timer(&dev->pwr_timer, (jiffies + 3*HZ));
i2c/busses/i2c-msm.c:		timeout = wait_for_completion_timeout(&complete, HZ);
i2c/busses/i2c-msm-v2.c:			"error clock frequency %dHZ is not supported\n",
i2c/busses/i2c-nuc900.c:	timeout = wait_event_timeout(i2c->wait, i2c->msg_num == 0, HZ * 5);
i2c/busses/i2c-ocores.c:			       (i2c->state == STATE_DONE), HZ))
i2c/busses/i2c-parport.c:	.timeout	= HZ,
i2c/busses/i2c-parport-light.c:	.timeout	= HZ,
i2c/busses/i2c-pca-isa.c:	.timeout	= HZ,
i2c/busses/i2c-pca-platform.c:		i2c->adap.timeout = HZ;
i2c/busses/i2c-pnx.c:#define I2C_PNX_SPEED_KHZ	100
i2c/busses/i2c-pnx.c:	tmp = ((freq / 1000) / I2C_PNX_SPEED_KHZ) / 2 - 2;
i2c/busses/i2c-pxa.c:	timeout = wait_event_timeout(i2c->wait, i2c->msg_num == 0, HZ * 5);
i2c/busses/i2c-pxa.c:	unsigned long timeout = jiffies + HZ*1;
i2c/busses/i2c-pxa.c:	unsigned long timeout = jiffies + HZ*4;
i2c/busses/i2c-qup.c:	dev->pwr_timer.expires = jiffies + 3*HZ;
i2c/busses/i2c-qup.c:									HZ);
i2c/busses/i2c-s3c2410.c:	timeout = wait_event_timeout(i2c->wait, i2c->msg_num == 0, HZ * 5);
i2c/busses/i2c-s6000.c:#define POLL_TIMEOUT	(2 * HZ)
i2c/busses/i2c-sh_mobile.c:				       5 * HZ);
i2c/busses/i2c-sibyte.c:	if (i2c_sibyte_add_bus(&sibyte_board_adapter[0], K_SMB_FREQ_100KHZ) < 0)
i2c/busses/i2c-sibyte.c:			       K_SMB_FREQ_400KHZ) < 0) {
i2c/busses/i2c-simtec.c:	pd->bit.timeout = HZ;
i2c/busses/i2c-stu300.c:	{ 10000000,  I2C_OAR2_FR_10_1667MHZ },
i2c/busses/i2c-stu300.c:	{ 16670000,  I2C_OAR2_FR_1667_2667MHZ },
i2c/busses/i2c-stu300.c:	{ 2500000,   I2C_OAR2_FR_25_10MHZ },
i2c/busses/i2c-stu300.c:	{ 26670000,  I2C_OAR2_FR_2667_40MHZ },
i2c/busses/i2c-stu300.c:	{ 40000000,  I2C_OAR2_FR_40_5333MHZ },
i2c/busses/i2c-stu300.c:	{ 53330000,  I2C_OAR2_FR_5333_66MHZ },
i2c/busses/i2c-stu300.c:	{ 66000000,  I2C_OAR2_FR_66_80MHZ },
i2c/busses/i2c-stu300.c:	{ 80000000,  I2C_OAR2_FR_80_100MHZ },
i2c/busses/i2c-stu300.c:#define I2C_OAR2_FR_10_1667MHZ			(0x20)
i2c/busses/i2c-stu300.c:#define I2C_OAR2_FR_1667_2667MHZ		(0x40)
i2c/busses/i2c-stu300.c:#define I2C_OAR2_FR_25_10MHZ			(0x00)
i2c/busses/i2c-stu300.c:#define I2C_OAR2_FR_2667_40MHZ			(0x60)
i2c/busses/i2c-stu300.c:#define I2C_OAR2_FR_40_5333MHZ			(0x80)
i2c/busses/i2c-stu300.c:#define I2C_OAR2_FR_5333_66MHZ			(0xA0)
i2c/busses/i2c-stu300.c:#define I2C_OAR2_FR_66_80MHZ			(0xC0)
i2c/busses/i2c-stu300.c:#define I2C_OAR2_FR_80_100MHZ			(0xE0)
i2c/busses/i2c-tegra.c:	unsigned long timeout = jiffies + HZ;
i2c/busses/i2c-versatile.c:	.timeout = HZ,
i2c/busses/i2c-via.c:	.timeout	= HZ
i2c/busses/i2c-xiic.c:		(i2c->state == STATE_DONE), HZ))
i2c/busses/Kconfig:config I2C_BLACKFIN_TWI_CLK_KHZ
i2c/busses/scx200_acb.c:#define POLL_TIMEOUT	(HZ/5)
i2c/busses/scx200_i2c.c:	.timeout	= HZ,
i2c/i2c-core.c:		adap->timeout = HZ;
i2c/muxes/pca9541.c:#define ARB2_TIMEOUT	(HZ / 4)	/* 250 ms until acquisition failure */
i2c/muxes/pca9541.c:#define ARB_TIMEOUT	(HZ / 8)	/* 125 ms until forcing bus ownership */
ide/hpt366.c:	ATA_CLOCK_25MHZ,
ide/hpt366.c:		[ATA_CLOCK_25MHZ] = NULL,
ide/hpt366.c:		[ATA_CLOCK_25MHZ] = twenty_five_base_hpt36x,
ide/hpt366.c:	ATA_CLOCK_33MHZ,
ide/hpt366.c:		[ATA_CLOCK_33MHZ] = thirty_three_base_hpt36x,
ide/hpt366.c:		[ATA_CLOCK_33MHZ] = thirty_three_base_hpt37x,
ide/hpt366.c:	ATA_CLOCK_40MHZ,
ide/hpt366.c:		[ATA_CLOCK_40MHZ] = forty_base_hpt36x,
ide/hpt366.c:		[ATA_CLOCK_40MHZ] = NULL,
ide/hpt366.c:	ATA_CLOCK_50MHZ,
ide/hpt366.c:		[ATA_CLOCK_50MHZ] = fifty_base_hpt37x,
ide/hpt366.c:		[ATA_CLOCK_50MHZ] = NULL,
ide/hpt366.c:	ATA_CLOCK_66MHZ,
ide/hpt366.c:		[ATA_CLOCK_66MHZ] = NULL
ide/hpt366.c:		[ATA_CLOCK_66MHZ] = sixty_six_base_hpt37x
ide/hpt366.c:			clock = ATA_CLOCK_25MHZ;
ide/hpt366.c:			clock = ATA_CLOCK_33MHZ;
ide/hpt366.c:			clock = ATA_CLOCK_40MHZ;
ide/hpt366.c:			clock = ATA_CLOCK_50MHZ;
ide/hpt366.c:			clock = ATA_CLOCK_50MHZ;
ide/hpt366.c:			clock = ATA_CLOCK_66MHZ;
ide/hpt366.c:			clock = ATA_CLOCK_66MHZ;
ide/hpt366.c:	if (chip_type == HPT371N && clock == ATA_CLOCK_66MHZ)
ide/ide-cd.h:#define ATAPI_WAIT_WRITE_BUSY	(10 * HZ)
ide/ide-eh.c:			ide_set_handler(drive, &atapi_reset_pollfunc, HZ/20);
ide/ide-eh.c:		__ide_set_handler(drive, &atapi_reset_pollfunc, HZ/20);
ide/ide-eh.c:			ide_set_handler(drive, &reset_pollfunc, HZ/20);
ide/ide-eh.c:	__ide_set_handler(drive, &reset_pollfunc, HZ/20);
ide/ide-floppy.c:#define IDEFLOPPY_PC_DELAY	(HZ/20)	/* default delay for ZIP 100 (50ms) */
ide/ide-io.c:		if (time_after(jiffies, last_msgtime + HZ)) {
ide/ide-iops.c:	"FUJITSU MHZ2160BH G2",
ide/ide-tape.c:#define IDETAPE_DSC_MA_FAST		2*HZ		/* 2 seconds */
ide/ide-tape.c:#define IDETAPE_DSC_MA_SLOW		30*HZ		/* 30 seconds */
ide/ide-tape.c:#define IDETAPE_DSC_MA_THRESHOLD	5*60*HZ		/* 5 minutes */
ide/ide-tape.c:#define IDETAPE_DSC_MA_TIMEOUT		2*60*60*HZ	/* 2 hours */
ide/ide-tape.c:#define IDETAPE_DSC_RW_MAX		40*HZ/100	/* 400 msec */
ide/ide-tape.c:#define IDETAPE_DSC_RW_MIN		5*HZ/100	/* 50 msec */
ide/ide-tape.c:#define IDETAPE_DSC_RW_TIMEOUT		2*60*HZ		/* 2 minutes */
ide/ide-tape.c:	idetape_wait_ready(drive, 60 * 5 * HZ);
ide/ide-tape.c:	idetape_wait_ready(drive, 60 * 5 * HZ);
ide/ide-tape.c:		if (time_after_eq(jiffies, tape->avg_time + HZ)) {
ide/ide-tape.c:	retval = idetape_wait_ready(drive, 60 * HZ);
ide/ide-tape.c:static int divf_tdsc(ide_drive_t *drive)	{ return   HZ; }
ide/ide-tape.c:			tape->avg_speed = tape->avg_size * HZ /
ide/ide-tape.c:		tape->best_dsc_rw_freq * 1000 / HZ,
ide/ide-tape.c:	t = (IDETAPE_FIFO_THRESHOLD * tape->buffer_size * HZ) / (speed * 1000);
ide/pmac.c:#define IDE_WAKEUP_DELAY	(1*HZ)
infiniband/hw/amso1100/c2.h:#define C2_TX_TIMEOUT	    (6*HZ)
infiniband/hw/amso1100/c2_vq.c:				60*HZ))
infiniband/hw/amso1100/c2_vq.c:				schedule_timeout(1 * HZ);	/* 1 second... */
infiniband/hw/cxgb3/iwch_cm.c:	ep->timer.expires = jiffies + ep_timeout_secs * HZ;
infiniband/hw/cxgb4/cm.c:	ep->timer.expires = jiffies + ep_timeout_secs * HZ;
infiniband/hw/cxgb4/iw_cxgb4.h:#define C4IW_WR_TO (10*HZ)
infiniband/hw/ehca/ehca_main.c:	mod_timer(&poll_eqs_timer, round_jiffies(jiffies + HZ));
infiniband/hw/ehca/ehca_main.c:		poll_eqs_timer.expires = jiffies + HZ;
infiniband/hw/ipath/ipath_driver.c:	dd->ipath_lastcancel = jiffies + HZ / 2;
infiniband/hw/ipath/ipath_driver.c:		dd->ipath_sdma_abort_intr_timeout = jiffies + HZ;
infiniband/hw/ipath/ipath_driver.c:	/* First check if we are blinking. If not, use 1HZ polling */
infiniband/hw/ipath/ipath_driver.c:	timeoff = HZ;
infiniband/hw/ipath/ipath_driver.c:		timeoff = (HZ << 4)/freq;
infiniband/hw/ipath/ipath_init_chip.c:			dd->ipath_intrchk_timer.expires = jiffies + HZ/2;
infiniband/hw/ipath/ipath_init_chip.c:		dd->ipath_stats_timer.expires = jiffies + 5 * HZ;
infiniband/hw/ipath/ipath_init_chip.c:			mod_timer(&dd->ipath_intrchk_timer, jiffies + HZ/2);
infiniband/hw/ipath/ipath_intr.c:		dd->ipath_unmasktime = jiffies + HZ * 180;
infiniband/hw/ipath/ipath_intr.c:		nextmsg_time = nc + HZ / 2;
infiniband/hw/ipath/ipath_intr.c:				nextmsg_time = nc + HZ * 3;
infiniband/hw/ipath/ipath_mad.c:	 * == 1000 (4000 ticks if HZ is 250).  link_speed_active returns 2 for
infiniband/hw/ipath/ipath_mad.c:	 * count in jiffies, we can't sample for less than 1000 ticks if HZ
infiniband/hw/ipath/ipath_mad.c:			dev->mkey_lease_period * HZ;
infiniband/hw/ipath/ipath_sdma.c:		dd->ipath_sdma_abort_jiffies = jiffies + 5 * HZ;
infiniband/hw/ipath/ipath_sdma.c:		unsigned long interval = (HZ + 19) / 20;
infiniband/hw/ipath/ipath_sdma.c:		unsigned long interval = (HZ + 19) / 20;
infiniband/hw/ipath/ipath_stats.c:	if (time_before(t0 + HZ, t1) && val == -1) {
infiniband/hw/ipath/ipath_stats.c:	mod_timer(&dd->ipath_stats_timer, jiffies + HZ * 5);
infiniband/hw/mthca/mthca_catas.c:	MTHCA_CATAS_POLL_INTERVAL	= 5 * HZ,
infiniband/hw/mthca/mthca_cmd.c:	CMD_TIME_CLASS_A = 60 * HZ,
infiniband/hw/mthca/mthca_cmd.c:	CMD_TIME_CLASS_A = (HZ + 999) / 1000 + 1,
infiniband/hw/mthca/mthca_cmd.c:	CMD_TIME_CLASS_B = 60 * HZ,
infiniband/hw/mthca/mthca_cmd.c:	CMD_TIME_CLASS_B = (HZ +  99) /  100 + 1,
infiniband/hw/mthca/mthca_cmd.c:	CMD_TIME_CLASS_C = 60 * HZ,
infiniband/hw/mthca/mthca_cmd.c:	CMD_TIME_CLASS_C = (HZ +   9) /   10 + 1,
infiniband/hw/mthca/mthca_cmd.c:	CMD_TIME_CLASS_D = 60 * HZ
infiniband/hw/mthca/mthca_cmd.c:	CMD_TIME_CLASS_D = 60 * HZ
infiniband/hw/mthca/mthca_cmd.c:	GO_BIT_TIMEOUT = HZ * 10
infiniband/hw/nes/nes_cm.c:		new_send->timetosend += (HZ / 10);
infiniband/hw/nes/nes_cm.h:#define NES_LONG_TIME       (2000*HZ/1000)
infiniband/hw/nes/nes_cm.h:#define NES_MAX_TIMEOUT     ((unsigned long) (12*HZ))
infiniband/hw/nes/nes_cm.h:#define NES_RETRY_TIMEOUT   (1000*HZ/1000)
infiniband/hw/nes/nes_cm.h:#define NES_RETRY_TIMEOUT   (3000*HZ/1000)
infiniband/hw/nes/nes.h:#define NES_TX_TIMEOUT          (6*HZ)
infiniband/hw/nes/nes_hw.c:	mod_timer(&nesqp->terminate_timer, (jiffies + HZ));
infiniband/hw/nes/nes_hw.c:	nesadapter->lc_timer.expires = jiffies + 3600 * HZ;  /* 1 hour */
infiniband/hw/nes/nes_hw.c:		nesadapter->mh_timer.expires = jiffies + (HZ/5);  /* 1 second */
infiniband/hw/nes/nes_hw.c:				nesvnic->rq_wqes_timer.expires = jiffies + (HZ/2);	/* 1/2 second */
infiniband/hw/nes/nes_hw.c:			nesvnic->rq_wqes_timer.expires = jiffies + (HZ/2);	/* 1/2 second */
infiniband/hw/nes/nes_hw.c:			nes_write_indexed(nesdev, NES_IDX_ETH_SERDES_TX_HIGHZ_LANE_MODE0, 0x11110000);
infiniband/hw/nes/nes_hw.c:			nes_write_indexed(nesdev, NES_IDX_ETH_SERDES_TX_HIGHZ_LANE_MODE1, 0x11110000);
infiniband/hw/nes/nes_hw.h:	NES_IDX_ETH_SERDES_TX_HIGHZ_LANE_MODE0 = 0x2838,
infiniband/hw/nes/nes_hw.h:	NES_IDX_ETH_SERDES_TX_HIGHZ_LANE_MODE1 = 0x2a38,
infiniband/hw/nes/nes_mgt.c:				mgtvnic->rq_wqes_timer.expires = jiffies + (HZ / 2);      /* 1/2 second */
infiniband/hw/nes/nes_mgt.c:			mgtvnic->rq_wqes_timer.expires = jiffies + (HZ / 2);      /* 1/2 second */
infiniband/hw/nes/nes_utils.c:	nesadapter->lc_timer.expires = jiffies + 3600 * HZ;  /* 1 hour */
infiniband/hw/nes/nes_utils.c:	nesdev->nesadapter->mh_timer.expires = jiffies + (HZ/5);
infiniband/hw/qib/qib_driver.c:	/* First check if we are blinking. If not, use 1HZ polling */
infiniband/hw/qib/qib_driver.c:	timeoff = HZ;
infiniband/hw/qib/qib_driver.c:		timeoff = (HZ << 4)/freq;
infiniband/hw/qib/qib_iba6120.c:	mod_timer(&dd->stats_timer, jiffies + HZ * ACTIVITY_TIMER);
infiniband/hw/qib/qib_iba7220.c:	dd->stats_timer.expires = jiffies + ACTIVITY_TIMER * HZ;
infiniband/hw/qib/qib_iba7220.c:	mod_timer(&dd->stats_timer, jiffies + HZ * ACTIVITY_TIMER);
infiniband/hw/qib/qib_iba7322.c:	mod_timer(&dd->stats_timer, jiffies + HZ * ACTIVITY_TIMER);
infiniband/hw/qib/qib_init.c:			mod_timer(&dd->intrchk_timer, jiffies + HZ/2);
infiniband/hw/qib/qib_init.c:		mod_timer(&dd->intrchk_timer, jiffies + HZ/2);
infiniband/hw/qib/qib_init.c:		mod_timer(&dd->stats_timer, jiffies + HZ * ACTIVITY_TIMER);
infiniband/hw/qib/qib_mad.c:				ibp->mkey_lease_period * HZ;
infiniband/hw/qib/qib_mad.c:	mod_timer(&ppd->cong_stats.timer, jiffies + HZ);
infiniband/hw/qib/qib_sd7220.c:			cs->relock_interval = HZ;
infiniband/hw/qib/qib_sd7220.c:		if (timeoff > HZ)
infiniband/hw/qib/qib_sd7220.c:			mod_timer(&cs->relock_timer, jiffies + HZ);
infiniband/hw/qib/qib_sd7220.c:			timeoff = HZ;
infiniband/hw/qib/qib_sd7220.c:		timeoff = HZ;
infiniband/ulp/ipoib/ipoib_cm.c:#define IPOIB_CM_RX_DELAY       (3 * 256 * HZ)
infiniband/ulp/ipoib/ipoib_cm.c:#define IPOIB_CM_RX_TIMEOUT     (2 * 256 * HZ)
infiniband/ulp/ipoib/ipoib_cm.c:#define IPOIB_CM_RX_UPDATE_TIME (256 * HZ)
infiniband/ulp/ipoib/ipoib_cm.c:			if (time_after(jiffies, begin + 5 * HZ)) {
infiniband/ulp/ipoib/ipoib_cm.c:		if (time_after(jiffies, begin + 5 * HZ)) {
infiniband/ulp/ipoib/ipoib_ib.c:				   HZ);
infiniband/ulp/ipoib/ipoib_ib.c:					   HZ);
infiniband/ulp/ipoib/ipoib_ib.c:		if (time_after(jiffies, begin + 5 * HZ)) {
infiniband/ulp/ipoib/ipoib_ib.c:		if (time_after(jiffies, begin + HZ)) {
infiniband/ulp/ipoib/ipoib_ib.c:			   round_jiffies_relative(HZ));
infiniband/ulp/ipoib/ipoib_ib.c:				   round_jiffies_relative(HZ));
infiniband/ulp/ipoib/ipoib_main.c:	dev->watchdog_timeo	 = HZ;
infiniband/ulp/ipoib/ipoib_multicast.c:				   mcast->backoff * HZ);
infiniband/ulp/ipoib/ipoib_multicast.c:					   mcast->backoff * HZ);
infiniband/ulp/ipoib/ipoib_multicast.c:						   &priv->mcast_task, HZ);
infiniband/ulp/srpt/ib_srpt.c:	res = wait_for_completion_timeout(&release_done, 60 * HZ);
input/gameport/gameport.c:#define DELTA(x,y)      ((y)-(x)+((y)<(x)?1193182/HZ:0))
input/gameport/gameport.c:#include <linux/sched.h>	/* HZ */
input/gameport/gameport.c:	return t * HZ / 1000;
input/gameport/gameport.c:		(unsigned long)HZ / (1000 / 50)) / (tx < 1 ? 1 : tx);
input/input-polldev.c:	if (delay >= HZ)
input/joystick/analog.c:#define DELTA(x,y)	(cpu_has_tsc ? ((y) - (x)) : ((x) - (y) + ((x) < (y) ? PIT_TICK_RATE / HZ : 0)))
input/joystick/db9.c:#define DB9_REFRESH_TIME	HZ/100
input/joystick/gamecon.c:#define GC_REFRESH_TIME	HZ/100
input/joystick/iforce/iforce-packets.c:			iforce->ctrl->status != -EINPROGRESS, HZ);
input/joystick/iforce/iforce-packets.c:			!iforce->expect_packet, HZ);
input/joystick/maplecontrol.c:	maple_getcond_callback(pad->mdev, dc_pad_callback, HZ/20,
input/joystick/turbografx.c:#define TGFX_REFRESH_TIME	HZ/100	/* 10 ms */
input/keyboard/gpio_keys.c:		schedule_delayed_work(&ddata->flip_cover_dwork, HZ / 2);
input/keyboard/gpio_keys.c:	schedule_delayed_work(&ddata->flip_cover_dwork, HZ / 20);
input/keyboard/hilkbd.c:	wait_event_interruptible_timeout(hil_wait, hil_dev.valid, 3 * HZ);
input/keyboard/locomokbd.c:#define SCAN_INTERVAL		(HZ/10)
input/keyboard/locomokbd.c:					!= (HZ/SCAN_INTERVAL + 1))
input/keyboard/locomokbd.c:					locomokbd->suspend_jiffies + HZ))
input/keyboard/maple_keyb.c:	maple_getcond_callback(mdev, dc_kbd_callback, HZ/50,
input/keyboard/omap-keypad.c:			delay = 2 * HZ;
input/keyboard/omap-keypad.c:                int delay = HZ / 20;
input/keyboard/qt2160.c:#define QT2160_CYCLE_INTERVAL	(2*HZ)
input/keyboard/spear-keyboard.c: * control register as 1010010(82MHZ)
input/keyboard/spear-keyboard.c: * pclk freq mask = (APB FEQ -1)= 82 MHZ.Programme bit 15-9 in mode
input/keyboard/sunkbd.c:						 sunkbd->layout >= 0, HZ / 4);
input/keyboard/sunkbd.c:	wait_event_interruptible_timeout(sunkbd->wait, sunkbd->reset >= 0, HZ);
input/keyboard/sunkbd.c:	wait_event_interruptible_timeout(sunkbd->wait, sunkbd->reset >= 0, HZ);
input/keyboard/tc360-touchkey.c:	int timeout = HZ / 20;
input/misc/adxl34x-spi.c:#define MAX_SPI_FREQ_HZ		5000000
input/misc/adxl34x-spi.c:	if (spi->max_speed_hz > MAX_SPI_FREQ_HZ) {
input/misc/bma150.c:#define BMA150_BW_100HZ		2
input/misc/bma150.c:#define BMA150_BW_1500HZ	6
input/misc/bma150.c:#define BMA150_BW_190HZ		3
input/misc/bma150.c:#define BMA150_BW_25HZ		0
input/misc/bma150.c:#define BMA150_BW_375HZ		4
input/misc/bma150.c:#define BMA150_BW_50HZ		1
input/misc/bma150.c:#define BMA150_BW_750HZ		5
input/misc/bmp18x-core.c:		pdata ? (pdata->temp_measurement_period/1000)*HZ : 1*HZ;
input/misc/mpu3050.c:#define MPU3050_DLPF_CFG_10HZ		0x05
input/misc/mpu3050.c:#define MPU3050_DLPF_CFG_188HZ		0x01
input/misc/mpu3050.c:#define MPU3050_DLPF_CFG_20HZ		0x04
input/misc/mpu3050.c:#define MPU3050_DLPF_CFG_2100HZ_NOLPF	0x07
input/misc/mpu3050.c:#define MPU3050_DLPF_CFG_256HZ_NOLPF2	0x00
input/misc/mpu3050.c:#define MPU3050_DLPF_CFG_42HZ		0x03
input/misc/mpu3050.c:#define MPU3050_DLPF_CFG_5HZ		0x06
input/misc/mpu3050.c:#define MPU3050_DLPF_CFG_98HZ		0x02
input/misc/mpu3050.c:	reg = MPU3050_DLPF_CFG_42HZ;
input/misc/mpu6050/mpu6050_input.c:			reg |= (BITS_LPA_WAKE_20HZ); /* the freq of wakeup */
input/misc/mpu6050/mpu6050_input.c:	reg = MPU_FILTER_42HZ;
input/misc/mpu6050/mpu6050_input.c:	regs[0] = MPU_FILTER_42HZ | 0x18;
input/misc/mpu6050/mpu6050_selftest.c:		MPU_FILTER_188HZ);
input/misc/mpu6500/mpu6500_input.c:			reg |= (BITS_LPA_WAKE_20HZ); /* the freq of wakeup */
input/misc/mpu6500/mpu6500_input.c:	reg = MPU_FILTER_41HZ;
input/misc/mpu6500/mpu6500_input.c:	regs[0] = MPU_FILTER_41HZ | 0x18;
input/misc/mpu6500/mpu6500_selftest.c:	result = mpu6500_i2c_write_single_reg(client, MPUREG_CONFIG, MPU_FILTER_184HZ);
input/misc/pcspkr.c:		/* select desired HZ */
input/misc/pwm-beeper.c:#define HZ_TO_NANOSECONDS(x) (1000000000UL/(x))
input/misc/pwm-beeper.c:		period = HZ_TO_NANOSECONDS(value);
input/misc/sparcspkr.c:		/* select desired HZ */
input/misc/wistron_btns.c:	if (time_before(jiffies, jiffies_last_press + 2 * HZ))
input/mouse/inport.c:#define INPORT_MODE_BASE	INPORT_SPEED_100HZ
input/mouse/inport.c:#define INPORT_SPEED_100HZ	0x03
input/mouse/inport.c:#define INPORT_SPEED_200HZ	0x04
input/mouse/inport.c:#define INPORT_SPEED_30HZ	0x01
input/mouse/inport.c:#define INPORT_SPEED_50HZ	0x02
input/mouse/maplemouse.c:	maple_getcond_callback(mse->mdev, dc_mouse_callback, HZ/50,
input/mouse/psmouse-base.c:	    psmouse->pktcnt && time_after(jiffies, psmouse->last + HZ/2)) {
input/mouse/psmouse-base.c:	    time_after(jiffies, psmouse->last + psmouse->resync_time * HZ)) {
input/mouse/sermouse.c:	if (time_after(jiffies, sermouse->last + HZ/10))
input/serio/hil_mlc.c:		mod_timer(&hil_mlcs_kicker, jiffies + HZ);
input/serio/hil_mlc.c:	mod_timer(&hil_mlcs_kicker, jiffies + HZ);
input/serio/hil_mlc.c:		tv.tv_usec = (mlc->intimeout - tv.tv_usec) * HZ / USEC_PER_SEC;
input/serio/hp_sdc.c: * capable of is more than can be done at HZ=100.
input/serio/hp_sdc.c:	hp_sdc.kicker.expires = jiffies + HZ;
input/serio/hp_sdc.c:	mod_timer(&hp_sdc.kicker, jiffies + HZ);
input/serio/i8042.c:					if (time_before(jiffies, last_transmit + HZ/10)) {
input/serio/parkbd.c:		if (parkbd_counter && ((parkbd_counter == 11) || time_after(jiffies, parkbd_last + HZ/100))) {
input/serio/parkbd.c:		if ((parkbd_counter == parkbd_mode + 10) || time_after(jiffies, parkbd_last + HZ/100)) {
input/tablet/aiptek.c:		    ((aiptek->curSetting.jitterDelay * HZ) / 1000);
input/touchscreen/ad7877.c:#define MAX_SPI_FREQ_HZ			20000000
input/touchscreen/ad7877.c:	if (spi->max_speed_hz > MAX_SPI_FREQ_HZ) {
input/touchscreen/ad7879-spi.c:#define MAX_SPI_FREQ_HZ      5000000
input/touchscreen/ad7879-spi.c:	if (spi->max_speed_hz > MAX_SPI_FREQ_HZ) {
input/touchscreen/atmel-wm97xx.c:#define WM_READS(sp) ((sp / HZ) + 1)
input/touchscreen/elo.c:	wait_for_completion_timeout(&elo->cmd_done, HZ);
input/touchscreen/hp680_ts_input.c:	schedule_delayed_work(&work, HZ / 20);
input/touchscreen/mainstone-wm97xx.c:#define WM_READS(sp) ((sp / HZ) + 1)
input/touchscreen/mc13783_ts.c:	 * delay is HZ / 50 which is acceptable.
input/touchscreen/mc13783_ts.c:			queue_delayed_work(priv->workq, &priv->work, HZ / 50);
input/touchscreen/mxts.c:		schedule_delayed_work(&data->noti_dwork, HZ / 5);
input/touchscreen/mxts.c:	schedule_delayed_work(&data->noti_dwork, HZ / 5);
input/touchscreen/mxts_msm8930.c:		schedule_delayed_work(&data->noti_dwork, HZ / 5);
input/touchscreen/mxts_msm8930.c:	schedule_delayed_work(&data->noti_dwork, HZ / 5);
input/touchscreen/stmpe-ts.c:	schedule_delayed_work(&ts->work, HZ / 50);
input/touchscreen/tnetv107x-ts.c:#define TSC_PENUP_POLL		(HZ / 5)
input/touchscreen/tsc2005.c:#define TSC2005_CFR0_CLOCK_1MHZ		0x1000
input/touchscreen/tsc2005.c:#define TSC2005_SPI_MAX_SPEED_HZ	10000000
input/touchscreen/tsc2005.c:		spi->max_speed_hz = TSC2005_SPI_MAX_SPEED_HZ;
input/touchscreen/tsc2005.c:					 TSC2005_CFR0_CLOCK_1MHZ      | \
input/touchscreen/ucb1400_ts.c:	timeout = jiffies + HZ/2;
input/touchscreen/wacom_w8001.c:		wait_for_completion_timeout(&w8001->cmd_done, HZ);
input/touchscreen/wm97xx-core.c:			if (wm->ts_reader_interval < HZ / 10)
input/touchscreen/wm97xx-core.c:	wm->ts_reader_min_interval = HZ >= 100 ? HZ / 100 : 1;
input/touchscreen/zinitix_bt_532.c:#define SCAN_RATE_HZ				100
input/touchscreen/zinitix_bt_532.c:	info->esd_timeout_tmr.expires = jiffies + (HZ * sec);
input/touchscreen/zinitix_bt_532.c:			SCAN_RATE_HZ * ESD_TIMER_INTERVAL) != I2C_SUCCESS)
input/touchscreen/zinitix_bt_532.c:			SCAN_RATE_HZ * ESD_TIMER_INTERVAL) != I2C_SUCCESS)
input/touchscreen/zylonite-wm97xx.c:#define WM_READS(sp) ((sp / HZ) + 1)
isdn/capi/capidrv.c:	mod_timer(&card->listentimer, jiffies + 60 * HZ);
isdn/capi/capidrv.c:	mod_timer(&card->listentimer, jiffies + 60 * HZ);
isdn/divert/isdn_divert.c:					cs->timer.expires = jiffies + (HZ * AUTODEL_TIME);
isdn/divert/isdn_divert.c:			cs->timer.expires = jiffies + (HZ * AUTODEL_TIME);
isdn/divert/isdn_divert.c:			cs->timer.expires = jiffies + (HZ * AUTODEL_TIME);
isdn/divert/isdn_divert.c:			cs->timer.expires = jiffies + (HZ * AUTODEL_TIME);
isdn/divert/isdn_divert.c:			cs->timer.expires = jiffies + (HZ * AUTODEL_TIME);
isdn/divert/isdn_divert.c:		cs->timer.expires = jiffies + (HZ * AUTODEL_TIME);
isdn/divert/isdn_divert.c:				cs->timer.expires = jiffies + (HZ * dv->rule.waittime);
isdn/divert/isdn_divert.c:					cs->timer.expires = jiffies + (HZ * extern_wait_max);
isdn/gigaset/bas-gigaset.c:				   BAS_TIMEOUT * HZ / 10);
isdn/gigaset/bas-gigaset.c:				BAS_TIMEOUT * HZ / 10);
isdn/gigaset/bas-gigaset.c:		mod_timer(&ucs->timer_atrdy, jiffies + ATRDY_TIMEOUT * HZ / 10);
isdn/gigaset/bas-gigaset.c:		mod_timer(&ucs->timer_cmd_in, jiffies + timeout * HZ / 10);
isdn/gigaset/bas-gigaset.c:		mod_timer(&ucs->timer_ctrl, jiffies + timeout * HZ / 10);
isdn/gigaset/bas-gigaset.c:		mod_timer(&ucs->timer_int_in, jiffies + HZ / 10);
isdn/gigaset/capi.c:	static DEFINE_RATELIMIT_STATE(msg_dump_ratelimit, 20 * HZ, 20);
isdn/gigaset/common.c:		schedule_timeout(delay * HZ / 1000);
isdn/gigaset/gigaset.h:	int	timeout;	/* >0 => *HZ; <=0 => TOUT_XXXX*/
isdn/hardware/avm/avmcard.h:	unsigned long stop = jiffies + 1 * HZ;	/* maximum wait time 1 sec */
isdn/hardware/avm/avmcard.h:	unsigned long stop = jiffies + 2 * HZ;
isdn/hardware/avm/b1.c:	for (stop = jiffies + tout * HZ; time_before(jiffies, stop);) {
isdn/hardware/avm/b1.c:	for (stop = jiffies + tout * HZ; time_before(jiffies, stop);) {
isdn/hardware/avm/b1dma.c:	for (stop = jiffies + tout * HZ; time_before(jiffies, stop);) {
isdn/hardware/avm/b1dma.c:	for (stop = jiffies + tout * HZ; time_before(jiffies, stop);) {
isdn/hardware/avm/b1dma.c:	unsigned long stop = jiffies + 1 * HZ;	/* maximum wait time 1 sec */
isdn/hardware/avm/b1dma.c:	unsigned long stop = jiffies + 1 * HZ;	/* maximum wait time 1 sec */
isdn/hardware/avm/c4.c:#define	PEEK_POKE_TIMEOUT	(HZ / 10)	/* 0.1 sec */
isdn/hardware/avm/c4.c:#define	RESET_TIMEOUT		(15 * HZ)	/* 15 sec */
isdn/hardware/avm/c4.c:	if (wait_for_doorbell(card, HZ / 10) < 0)
isdn/hardware/avm/c4.c:	if (wait_for_doorbell(card, HZ / 10) < 0)
isdn/hardware/avm/c4.c:	if (wait_for_doorbell(card, HZ / 10) < 0)
isdn/hardware/avm/c4.c:	if (wait_for_doorbell(card, HZ / 10) < 0)
isdn/hardware/avm/c4.c:	stop = jiffies + HZ * 10;
isdn/hardware/avm/c4.c:	stop = jiffies + HZ * 10;
isdn/hardware/eicon/capi20.h:#define EC_BYPASS_DUE_TO_CONTINUOUS_2100HZ   1
isdn/hardware/eicon/capi20.h:#define EC_BYPASS_DUE_TO_REVERSED_2100HZ     2
isdn/hardware/eicon/capi20.h:#define EC_BYPASS_ON_ANY_2100HZ_SUPPORTED    0x0002
isdn/hardware/eicon/capi20.h:#define EC_BYPASS_ON_REV_2100HZ_SUPPORTED    0x0004
isdn/hardware/eicon/divacapi.h:#define DTMF_DIGIT_TONE_HIGH_GROUP_1209_HZ      0x00
isdn/hardware/eicon/divacapi.h:#define DTMF_DIGIT_TONE_HIGH_GROUP_1336_HZ      0x04
isdn/hardware/eicon/divacapi.h:#define DTMF_DIGIT_TONE_HIGH_GROUP_1477_HZ      0x08
isdn/hardware/eicon/divacapi.h:#define DTMF_DIGIT_TONE_HIGH_GROUP_1633_HZ      0x0c
isdn/hardware/eicon/divacapi.h:#define DTMF_DIGIT_TONE_LOW_GROUP_697_HZ        0x00
isdn/hardware/eicon/divacapi.h:#define DTMF_DIGIT_TONE_LOW_GROUP_770_HZ        0x01
isdn/hardware/eicon/divacapi.h:#define DTMF_DIGIT_TONE_LOW_GROUP_852_HZ        0x02
isdn/hardware/eicon/divacapi.h:#define DTMF_DIGIT_TONE_LOW_GROUP_941_HZ        0x03
isdn/hardware/eicon/divacapi.h:#define EC_BYPASS_DUE_TO_CONTINUOUS_2100HZ   1
isdn/hardware/eicon/divacapi.h:#define EC_BYPASS_DUE_TO_REVERSED_2100HZ     2
isdn/hardware/eicon/divacapi.h:#define LEC_DISABLE_TYPE_CONTIGNUOUS_2100HZ  0x00
isdn/hardware/eicon/divacapi.h:#define LEC_DISABLE_TYPE_REVERSED_2100HZ     0x01
isdn/hardware/eicon/divacapi.h:#define LEC_ENABLE_2100HZ_DETECTOR           0x0002
isdn/hardware/eicon/divacapi.h:#define LEC_REQUIRE_2100HZ_REVERSALS         0x0004
isdn/hardware/eicon/divasi.c:		mod_timer(&p_os->diva_timer_id, jiffies + 10 * HZ);
isdn/hardware/eicon/mdm_msg.h:#define DSP_CAI_MODEM_GUARD_TONE_1800HZ    0x80
isdn/hardware/eicon/mdm_msg.h:#define DSP_CAI_MODEM_GUARD_TONE_550HZ     0x40
isdn/hardware/eicon/message.c:				cai[8] |= DSP_CAI_MODEM_GUARD_TONE_1800HZ;
isdn/hardware/eicon/message.c:				cai[8] |= DSP_CAI_MODEM_GUARD_TONE_550HZ;
isdn/hardware/eicon/message.c:			case LEC_DISABLE_TYPE_CONTIGNUOUS_2100HZ:
isdn/hardware/eicon/message.c:			case LEC_DISABLE_TYPE_CONTIGNUOUS_2100HZ:
isdn/hardware/eicon/message.c:			case LEC_DISABLE_TYPE_REVERSED_2100HZ:
isdn/hardware/eicon/message.c:			case LEC_DISABLE_TYPE_REVERSED_2100HZ:
isdn/hardware/eicon/message.c:								  LEC_ENABLE_2100HZ_DETECTOR | LEC_REQUIRE_2100HZ_REVERSALS);
isdn/hardware/eicon/message.c:									  LEC_ENABLE_2100HZ_DETECTOR | LEC_REQUIRE_2100HZ_REVERSALS);
isdn/hardware/eicon/message.c:							plci->ec_idi_options |= LEC_ENABLE_2100HZ_DETECTOR;
isdn/hardware/eicon/message.c:							plci->ec_idi_options |= LEC_ENABLE_2100HZ_DETECTOR;
isdn/hardware/eicon/message.c:							plci->ec_idi_options |= LEC_REQUIRE_2100HZ_REVERSALS;
isdn/hardware/eicon/message.c:							plci->ec_idi_options |= LEC_REQUIRE_2100HZ_REVERSALS;
isdn/hardware/eicon/message.c:				PUT_WORD(&result[1], EC_BYPASS_DUE_TO_CONTINUOUS_2100HZ);
isdn/hardware/eicon/message.c:				PUT_WORD(&result[1], EC_BYPASS_DUE_TO_REVERSED_2100HZ);
isdn/hardware/eicon/message.c:				PUT_WORD(&result[4], EC_BYPASS_DUE_TO_CONTINUOUS_2100HZ);
isdn/hardware/eicon/message.c:				PUT_WORD(&result[4], EC_BYPASS_DUE_TO_REVERSED_2100HZ);
isdn/hardware/eicon/pc_init.h:#define PCINIT_MODEM_GUARD_TONE_1800HZ          0x02
isdn/hardware/eicon/pc_init.h:#define PCINIT_MODEM_GUARD_TONE_550HZ           0x01
isdn/hardware/mISDN/hfcmulti.c:		       "card %d: defined at MEMBASE %#lx (%#lx) IRQ %d HZ %d "
isdn/hardware/mISDN/hfcmulti.c:		       "%d HZ %d leds-type %d\n", hc->id, (u_long)hc->pci_membase,
isdn/hardware/mISDN/hfcmulti.c:		       hc->pci_dev->irq, HZ, hc->leds);
isdn/hardware/mISDN/hfcmulti.c:		       hc->pci_dev->irq, HZ, hc->leds);
isdn/hardware/mISDN/hfcmulti.c:		       hc->pci_origmembase, hc->pci_dev->irq, HZ, hc->leds);
isdn/hardware/mISDN/hfcmulti.c:	schedule_timeout((100 * HZ) / 1000); /* Timeout 100ms */
isdn/hardware/mISDN/hfcmulti.c:			schedule_timeout((HZ / 100) ?: 1); /* Timeout min. 10ms */
isdn/hardware/mISDN/hfcmulti.c:	schedule_timeout((HZ / 100) ? : 1); /* Timeout minimum 10ms */
isdn/hardware/mISDN/hfcmulti.c:		       "%s %s: defined at IOBASE %#x IRQ %d HZ %d leds-type %d\n",
isdn/hardware/mISDN/hfc_multi.h:#define V_96KHZ			0x20
isdn/hardware/mISDN/hfc_multi.h:#define V_PWM0_16KHZ		0x10
isdn/hardware/mISDN/hfc_multi.h:#define V_PWM1_16KHZ		0x20
isdn/hardware/mISDN/hfcpci.c:	       "HFC-PCI: defined at mem %#lx fifo %#lx(%#lx) IRQ %d HZ %d\n",
isdn/hardware/mISDN/hfcpci.c:		poll = (tics * 8000) / HZ;
isdn/hardware/mISDN/hfcpci.c:		schedule_timeout((80 * HZ) / 1000);
isdn/hardware/mISDN/hfcpci.c:		tics = (poll * HZ) / 8000;
isdn/hardware/mISDN/hfcpci.c:	       (u_long) hc->hw.dmahandle, hc->irq, HZ);
isdn/hardware/mISDN/hfcsusb.c:			schedule_timeout_interruptible((HZ / 1000) * 16);
isdn/hardware/mISDN/hfcsusb.c:		schedule_timeout_interruptible((HZ / 1000) * 3);
isdn/hardware/mISDN/mISDNipac.c:	isac->dch.timer.expires = jiffies + ((DBUSY_TIMER_VALUE * HZ)/1000);
isdn/hardware/mISDN/mISDNisar.c:					jiffies + ((delay * HZ) / 1000);
isdn/hardware/mISDN/w6692.c:	dch->timer.expires = jiffies + ((DBUSY_TIMER_VALUE * HZ) / 1000);
isdn/hisax/amd7930_fn.c:	cs->dbusytimer.expires = jiffies + ((DBUSY_TIMER_VALUE * HZ) / 1000);
isdn/hisax/arcofi.c:	cs->dc.isac.arcofitimer.expires = jiffies + ((ARCOFI_TIMER_VALUE * HZ) / 1000);
isdn/hisax/avm_a1.c:	HZDELAY(HZ / 5 + 1);
isdn/hisax/avm_a1.c:	HZDELAY(HZ / 5 + 1);
isdn/hisax/avm_a1.c:	HZDELAY(HZ / 5 + 1);
isdn/hisax/avm_a1.c:	HZDELAY(HZ / 5 + 1);
isdn/hisax/avm_a1.c:	HZDELAY(HZ / 5 + 1);
isdn/hisax/avm_a1p.c:		HZDELAY(HZ / 5 + 1);
isdn/hisax/avm_a1p.c:		HZDELAY(HZ / 5 + 1);
isdn/hisax/avm_a1p.c:	HZDELAY(HZ / 5 + 1);
isdn/hisax/avm_a1p.c:	HZDELAY(HZ / 5 + 1);
isdn/hisax/diva.c:		cs->hw.diva.tl.expires = jiffies + ((blink * HZ) / 1000);
isdn/hisax/elsa.c:		cs->hw.elsa.tl.expires = jiffies + ((blink * HZ) / 1000);
isdn/hisax/elsa.c:		HZDELAY((HZ / 100) + 1);	/* wait >=10 ms */
isdn/hisax/fsm.c:	ft->tl.expires = jiffies + (millisec * HZ) / 1000;
isdn/hisax/fsm.c:	ft->tl.expires = jiffies + (millisec * HZ) / 1000;
isdn/hisax/gazel.c:		HZDELAY(10);
isdn/hisax/gazel.c:		HZDELAY(10);
isdn/hisax/gazel.c:		HZDELAY(10);
isdn/hisax/gazel.c:		HZDELAY(2);
isdn/hisax/gazel.c:		HZDELAY(4);
isdn/hisax/gazel.c:		HZDELAY(4);
isdn/hisax/gazel.c:		HZDELAY(4);
isdn/hisax/hfc4s8s_l1.c:#define L1_TIMER_T1 ((120 * HZ) / 1000)	/* NT mode deactivation timeout */
isdn/hisax/hfc4s8s_l1.c:#define L1_TIMER_T3 (7 * HZ)	/* activation timeout */
isdn/hisax/hfc_pci.c:	       cs->irq, HZ);
isdn/hisax/hfc_pci.c:	       "HFC-PCI: defined at mem %p fifo %p(%lx) IRQ %d HZ %d\n",
isdn/hisax/hfcscard.c:	       cs->irq, HZ);
isdn/hisax/hfcscard.c:		delay = (75 * HZ) / 100 + 1;
isdn/hisax/hfcscard.c:		delay = (80 * HZ) / 1000 + 1;
isdn/hisax/hfcscard.c:	       "HFCS: defined at 0x%x IRQ %d HZ %d\n",
isdn/hisax/hfc_sx.c:		printk(KERN_INFO "HFC-S%c chip detected at base 0x%x IRQ %d HZ %d\n",
isdn/hisax/hfc_sx.c:		       tmp[0], (u_int) cs->hw.hfcsx.base, cs->irq, HZ);
isdn/hisax/hfc_usb.c:							 HZ) / 1000;
isdn/hisax/hfc_usb.c:					jiffies + (HFC_TIMER_T4 * HZ) / 1000;
isdn/hisax/hfc_usb.c:	schedule_timeout(HZ / 100);
isdn/hisax/hisax.h:#define HZDELAY(jiffs) do {				\
isdn/hisax/hisax.h:			int loops = USEC_PER_SEC / HZ;	\
isdn/hisax/icc.c:	cs->dbusytimer.expires = jiffies + ((DBUSY_TIMER_VALUE * HZ)/1000);
isdn/hisax/ipacx.c:	cs->dbusytimer.expires = jiffies + ((DBUSY_TIMER_VALUE * HZ)/1000);
isdn/hisax/isac.c:	cs->dbusytimer.expires = jiffies + ((DBUSY_TIMER_VALUE * HZ)/1000);
isdn/hisax/isar.c:					jiffies + ((1000 * HZ) / 1000);
isdn/hisax/isar.c:							jiffies + ((ic->parm.aux.para[0] * 10 * HZ) / 1000);
isdn/hisax/isdnl3.c:	t->tl.expires = jiffies + (millisec * HZ) / 1000;
isdn/hisax/ix1_micro.c:	cnt = 3 * (HZ / 10) + 1;
isdn/hisax/ix1_micro.c:		HZDELAY(1);	/* wait >=10 ms */
isdn/hisax/saphir.c:	cs->hw.saphir.timer.expires = jiffies + 4 * HZ;
isdn/hisax/saphir.c:		mod_timer(&cs->hw.saphir.timer, jiffies + 1 * HZ);
isdn/hisax/saphir.c:	mod_timer(&cs->hw.saphir.timer, jiffies + 1 * HZ);
isdn/hisax/teleint.c:		delay = HZ / 100;
isdn/hisax/teleint.c:	stat = HZ / 100;
isdn/hisax/teles0.c:		HZDELAY(HZ / 10 + 1);
isdn/hisax/teles0.c:		HZDELAY(HZ / 10 + 1);
isdn/hisax/teles0.c:	HZDELAY(HZ / 5 + 1);
isdn/hisax/teles0.c:	HZDELAY(HZ / 5 + 1);
isdn/hisax/teles3.c:			HZDELAY(2);
isdn/hisax/teles3.c:			HZDELAY(2);
isdn/hisax/teles3.c:			HZDELAY(2);
isdn/hisax/teles3.c:			HZDELAY(2);
isdn/hisax/teles3.c:			HZDELAY(HZ / 10 + 1);
isdn/hisax/teles3.c:			HZDELAY(HZ / 10 + 1);
isdn/hisax/w6692.c:	cs->dbusytimer.expires = jiffies + ((DBUSY_TIMER_VALUE * HZ) / 1000);
isdn/i4l/isdn_net.c:		cfg->dialtimeout = lp->dialtimeout >= 0 ? lp->dialtimeout / HZ : -1;
isdn/i4l/isdn_net.c:		cfg->dialwait = lp->dialwait / HZ;
isdn/i4l/isdn_net.c:		cfg->slavedelay = lp->slavedelay / HZ;
isdn/i4l/isdn_net.c:#define ISDN_NET_TX_TIMEOUT (20 * HZ)
isdn/i4l/isdn_net.c:				+ HZ / 2 - 1) / HZ);
isdn/i4l/isdn_net.c:		if (lp->sqfull && time_after(jiffies, lp->sqfull_stamp + lp->slavedelay + (10 * HZ))) {
isdn/i4l/isdn_net.c:					if (time_after(jiffies, l->chargetime + l->chargeint - 2 * HZ))
isdn/i4l/isdn_net.c:			l->cps = (l->transcount * HZ) / (jiffies - last_jiffies);
isdn/i4l/isdn_net.c:			lp->chargeint = cfg->chargeint * HZ;
isdn/i4l/isdn_net.c:			(lp->chargeint / HZ) : 0;
isdn/i4l/isdn_net.c:				lp->chargeint = jiffies - lp->chargetime - (2 * HZ);
isdn/i4l/isdn_net.c:						  lp->cisco_keepalive_period * HZ);
isdn/i4l/isdn_net.c:	lp->cisco_timer.expires = jiffies + lp->cisco_keepalive_period * HZ;
isdn/i4l/isdn_net.c:	lp->cisco_timer.expires = jiffies + lp->cisco_keepalive_period * HZ;
isdn/i4l/isdn_net.c:		lp->dialtimeout = cfg->dialtimeout >= 0 ? cfg->dialtimeout * HZ : -1;
isdn/i4l/isdn_net.c:	lp->dialwait = 5 * HZ; /* Wait 5 sec. after failed dial */
isdn/i4l/isdn_net.c:		lp->dialwait = cfg->dialwait * HZ;
isdn/i4l/isdn_net.c:	lp->slavedelay = 10 * HZ;
isdn/i4l/isdn_net.c:		lp->slavedelay = cfg->slavedelay * HZ;
isdn/i4l/isdn_net.c:static unsigned long last_jiffies = -HZ;
isdn/i4l/isdn_ppp.c:				rs->timer.expires = jiffies + 5 * HZ;
isdn/i4l/isdn_ppp.c:			rs->timer.expires = jiffies + 5 * HZ;
isdn/i4l/isdn_ppp.c:		rs->timer.expires = jiffies + HZ * 5;
isdn/i4l/isdn_tty.c:#define PLUSWAIT1 (HZ / 2)      /* 0.5 sec. */
isdn/i4l/isdn_tty.c:#define PLUSWAIT2 (HZ * 3 / 2)  /* 1.5 sec */
isdn/i4l/isdn_tty.c:		info->nc_timer.expires = jiffies + HZ;
isdn/i4l/isdn_tty.c:		timeout = jiffies + HZ;
isdn/icn/icn.h:#define ICN_TIMER_BCREAD (HZ / 100)	/* B-Channel poll-cycle                    */
isdn/icn/icn.h:#define ICN_TIMER_DCREAD (HZ / 2) /* D-Channel poll-cycle                    */
isdn/isdnloop/isdnloop.h:#define ISDNLOOP_TIMER_ALERTWAIT (10 * HZ)	/* Alert timeout                 */
isdn/isdnloop/isdnloop.h:#define ISDNLOOP_TIMER_DCREAD (HZ/2)	/* D-Channel poll-cycle          */
isdn/mISDN/dsp_core.c:			       "%d HZ.\n", poll, HZ);
isdn/mISDN/dsp_core.c:		dsp_tics = poll * HZ / 8000;
isdn/mISDN/dsp_core.c:		if (dsp_tics * 8000 != poll * HZ) {
isdn/mISDN/dsp_core.c:			if (tics * 8000 == poll * HZ) {
isdn/mISDN/dsp_core.c:			tics = (poll * HZ) / 8000;
isdn/mISDN/dsp_tones.c:	tone->tl.expires = jiffies + (pat->seq[index] * HZ) / 8000;
isdn/mISDN/dsp_tones.c:		tonet->tl.expires = jiffies + (pat->seq[0] * HZ) / 8000;
isdn/mISDN/fsm.c:	ft->tl.expires = jiffies + (millisec * HZ) / 1000;
isdn/mISDN/fsm.c:	ft->tl.expires = jiffies + (millisec * HZ) / 1000;
isdn/mISDN/l1oip_core.c:	hc->keep_tl.expires = jiffies + 2 * HZ; /* two seconds first time */
isdn/mISDN/l1oip_core.c:		hc->keep_tl.expires = jiffies + L1OIP_KEEPALIVE * HZ;
isdn/mISDN/l1oip_core.c:		hc->keep_tl.expires = jiffies + L1OIP_KEEPALIVE * HZ;
isdn/mISDN/l1oip_core.c:		hc->timeout_tl.expires = jiffies + L1OIP_TIMEOUT * HZ;
isdn/mISDN/l1oip_core.c:		hc->timeout_tl.expires = jiffies + L1OIP_TIMEOUT * HZ;
isdn/mISDN/l1oip_core.c:	if ((int)(hc->keep_tl.expires-jiffies) < 5 * HZ) {
isdn/mISDN/l1oip_core.c:	if ((int)(hc->timeout_tl.expires-jiffies) < 5 * HZ || !hc->timeout_on) {
isdn/mISDN/l1oip_core.c:		schedule_timeout(HZ / 10);
isdn/mISDN/timerdev.c:		timer->tl.expires = jiffies + ((HZ * (u_long)timeout) / 1000);
isdn/pcbit/drv.c:			chan->block_timer.expires = jiffies + 1 * HZ;
isdn/pcbit/edss1.c:		chan->fsm_timer.expires = jiffies + tentry->timeout * HZ;
isdn/pcbit/layer2.h:#define SET_RUN_TIMEOUT 2 * HZ /* 2 seconds */
isdn/pcbit/pcbit.h:#define ERRTIME     (HZ / 10)
isdn/pcbit/pcbit.h:#define STATS_TIMER (10 * HZ)
isdn/sc/hardware.h:#include <asm/param.h>			/* For HZ */
isdn/sc/message.h:#define CALLTYPE_31KHZ		3
leds/leds-clevo-mail.c:#define CLEVO_MAIL_LED_BLINK_0_5HZ	0x0083
leds/leds-clevo-mail.c:#define CLEVO_MAIL_LED_BLINK_1HZ	0x008A
leds/leds-clevo-mail.c:		i8042_command(NULL, CLEVO_MAIL_LED_BLINK_0_5HZ);
leds/leds-clevo-mail.c:		i8042_command(NULL, CLEVO_MAIL_LED_BLINK_0_5HZ);
leds/leds-clevo-mail.c:		i8042_command(NULL, CLEVO_MAIL_LED_BLINK_0_5HZ);
leds/leds-clevo-mail.c:		i8042_command(NULL, CLEVO_MAIL_LED_BLINK_1HZ);
leds/leds-clevo-mail.c:		i8042_command(NULL, CLEVO_MAIL_LED_BLINK_1HZ);
macintosh/ams/ams-i2c.c:		schedule_timeout_uninterruptible(HZ / 20);
macintosh/therm_pm72.c:		if (elapsed < HZ)
macintosh/therm_pm72.c:			schedule_timeout_interruptible(HZ - elapsed);
macintosh/windfarm_core.c:		if (delay <= HZ)
macintosh/windfarm_core.c:			next += HZ;
md/bcache/stats.c:static const unsigned accounting_delay		= (HZ * 300) / 22;
md/bcache/super.c:			long timeout = start + 2 * HZ - jiffies;
md/bcache/sysfs.c:				      dc->writeback_rate_update_seconds * HZ);
md/bcache/util.c:		? div_u64(d->next - now, NSEC_PER_SEC / HZ)
md/bcache/writeback.c:			closure_delay(&dc->writeback, dc->writeback_delay * HZ);
md/bcache/writeback.c:			closure_delay(&dc->writeback, dc->writeback_delay * HZ);
md/bcache/writeback.c:			      dc->writeback_rate_update_seconds * HZ);
md/bcache/writeback.c:			      dc->writeback_rate_update_seconds * HZ);
md/bcache/writeback.c:				      dc->writeback_rate_update_seconds * HZ);
md/bitmap.c:		daemon_sleep = 5 * HZ;
md/bitmap.c:		daemon_sleep = 5 * HZ;
md/bitmap.c:	daemon_sleep = le32_to_cpu(sb->daemon_sleep) * HZ;
md/bitmap.c:	if (timeout >= LONG_MAX / HZ)
md/bitmap.c:	sb->daemon_sleep = cpu_to_le32(bitmap->mddev->bitmap_info.daemon_sleep/HZ);
md/bitmap.c:	timeout = timeout * HZ / 10000;
md/bitmap.c:	unsigned long jifs = mddev->bitmap_info.daemon_sleep % HZ;
md/bitmap.c:	unsigned long secs = mddev->bitmap_info.daemon_sleep / HZ;
md/dm-bufio.c:			   DM_BUFIO_WORK_TIMER_SECS * HZ);
md/dm-bufio.c:			   DM_BUFIO_WORK_TIMER_SECS * HZ);
md/dm-bufio.c:			if (__cleanup_old_buffer(b, 0, max_age * HZ))
md/dm-bufio.c:	if (max_age > ULONG_MAX / HZ)
md/dm-bufio.c:		max_age = ULONG_MAX / HZ;
md/dm.c:	blk_delay_queue(q, HZ / 10);
md/dm-crypt.c:			congestion_wait(BLK_RW_ASYNC, HZ/100);
md/dm-delay.c:	delayed->expires = expires = jiffies + (delay * HZ / 1000);
md/dm-flakey.c:	elapsed = (jiffies - fc->start_time) / HZ;
md/dm-log-userspace-base.c:	limit = jiffies + (HZ / 4);
md/dm-log-userspace-base.c:		schedule_timeout(2*HZ);
md/dm-log-userspace-transfer.c:#define DM_ULOG_RETRY_TIMEOUT (15 * HZ)
md/dm-raid1.c:	ms->timer.expires = jiffies + HZ / 5;
md/dm-thin.c:#define COMMIT_PERIOD HZ
md/md.c:#define	SYNC_MARK_STEP	(3*HZ)
md/md.c:	dt = ((jiffies - mddev->resync_mark) / HZ);
md/md.c:	dt = (jiffies - mddev->resync_mark) / HZ;
md/md.c:	int msec = (mddev->safemode_delay*1000)/HZ;
md/md.c:			/((jiffies-mddev->resync_mark)/HZ +1) +1;
md/md.c:	mddev->safemode_delay = (200 * HZ)/1000 +1; /* 200 msec delay */
md/md.c:		mddev->safemode_delay = (msec*HZ)/1000;
md/raid5.c:	    time_after(jiffies, conf->reshape_checkpoint + 10*HZ)) {
media/common/saa7146_i2c.c:		timeout = HZ/100 + 1; /* 10ms */
media/common/saa7146_i2c.c:		timeout = jiffies + HZ/100 + 1; /* 10ms */
media/common/saa7146_i2c.c:		timeout = jiffies + HZ/100 + 1; /* 10ms */
media/common/tuners/mt2063.c:#define MT2063_SPUR_STEP_HZ        (250000UL)	/* Step size (in Hz) to move IF1 when avoiding spurs */
media/common/tuners/mt2063.c: *                        f_ref * num / denom to within 1 HZ with fixed math.
media/common/tuners/mxl5005s.c:	MXL5005S_BANDWIDTH_6MHZ = 6000000,
media/common/tuners/mxl5005s.c:	MXL5005S_BANDWIDTH_7MHZ = 7000000,
media/common/tuners/mxl5005s.c:	MXL5005S_BANDWIDTH_8MHZ = 8000000,
media/common/tuners/mxl5005s.c:			req_bw = MXL5005S_BANDWIDTH_6MHZ;
media/common/tuners/mxl5005s.c:		req_bw  = MXL5005S_BANDWIDTH_6MHZ;
media/common/tuners/mxl5005s.c:		req_bw  = MXL5005S_BANDWIDTH_6MHZ;
media/common/tuners/mxl5005s.c:			req_bw = MXL5005S_BANDWIDTH_7MHZ;
media/common/tuners/mxl5005s.c:			req_bw = MXL5005S_BANDWIDTH_8MHZ;
media/common/tuners/mxl5005s.c:	return mxl5005s_reconfigure(fe, MXL_QAM, MXL5005S_BANDWIDTH_6MHZ);
media/common/tuners/mxl5005s.h:#define CRYSTAL_FREQ_16000000HZ  16000000
media/common/tuners/mxl5005s.h:#define CRYSTAL_FREQ_25000000HZ  25000000
media/common/tuners/mxl5005s.h:#define CRYSTAL_FREQ_28800000HZ  28800000
media/common/tuners/mxl5005s.h:#define CRYSTAL_FREQ_4000000HZ    4000000
media/common/tuners/mxl5005s.h:#define IF_FREQ_36000000HZ  36000000
media/common/tuners/mxl5005s.h:#define IF_FREQ_36125000HZ  36125000
media/common/tuners/mxl5005s.h:#define IF_FREQ_36166667HZ  36166667
media/common/tuners/mxl5005s.h:#define IF_FREQ_44000000HZ  44000000
media/common/tuners/mxl5005s.h:#define IF_FREQ_4570000HZ    4570000
media/common/tuners/mxl5005s.h:#define IF_FREQ_4571429HZ    4571429
media/common/tuners/mxl5005s.h:#define IF_FREQ_5380000HZ    5380000
media/common/tuners/mxl5007t.c:	case MxL_IF_35_25_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_35_25_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_36_15_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_36_15_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_44_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_44_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_4_57_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_4_57_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_4_5_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_4_5_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_4_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_4_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_5_38_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_5_38_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_5_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_5_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_6_28_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_6_28_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_6_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_6_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_9_1915_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_IF_9_1915_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_16_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_20_25_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_20_48_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_20_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_24_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_25_14_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_25_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_27_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_28_8_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_32_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_40_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_44_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_48_MHZ:
media/common/tuners/mxl5007t.c:	case MxL_XTAL_49_3811_MHZ:
media/common/tuners/mxl5007t.h:	MxL_IF_35_25_MHZ,  /* 35250000 */
media/common/tuners/mxl5007t.h:	MxL_IF_36_15_MHZ,  /* 36150000 */
media/common/tuners/mxl5007t.h:	MxL_IF_44_MHZ,     /* 44000000 */
media/common/tuners/mxl5007t.h:	MxL_IF_4_57_MHZ,   /*  4570000 */
media/common/tuners/mxl5007t.h:	MxL_IF_4_5_MHZ,    /*  4500000 */
media/common/tuners/mxl5007t.h:	MxL_IF_4_MHZ,      /*  4000000 */
media/common/tuners/mxl5007t.h:	MxL_IF_5_38_MHZ,   /*  5380000 */
media/common/tuners/mxl5007t.h:	MxL_IF_5_MHZ,      /*  5000000 */
media/common/tuners/mxl5007t.h:	MxL_IF_6_28_MHZ,   /*  6280000 */
media/common/tuners/mxl5007t.h:	MxL_IF_6_MHZ,      /*  6000000 */
media/common/tuners/mxl5007t.h:	MxL_IF_9_1915_MHZ, /*  9191500 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_16_MHZ,      /* 16000000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_20_25_MHZ,   /* 20250000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_20_48_MHZ,   /* 20480000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_20_MHZ,      /* 20000000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_24_MHZ,      /* 24000000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_25_14_MHZ,   /* 25140000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_25_MHZ,      /* 25000000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_27_MHZ,      /* 27000000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_28_8_MHZ,    /* 28800000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_32_MHZ,      /* 32000000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_40_MHZ,      /* 40000000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_44_MHZ,      /* 44000000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_48_MHZ,      /* 48000000 */
media/common/tuners/mxl5007t.h:	MxL_XTAL_49_3811_MHZ, /* 49381100 */
media/common/tuners/tuner-xc2028.c:	 if (type & F6MHZ)
media/common/tuners/tuner-xc2028.c:	 if (type & F8MHZ)
media/common/tuners/tuner-xc2028.c:		printk("F6MHZ ");
media/common/tuners/tuner-xc2028.c:		printk("F8MHZ ");
media/common/tuners/tuner-xc2028.c:		rc = load_firmware(fe, (BASE | INIT1 | new_fw.type) & ~F8MHZ,
media/common/tuners/tuner-xc2028.c:		rc = load_firmware(fe, new_fw.type & ~F8MHZ, &new_fw.id);
media/common/tuners/tuner-xc2028.c:static int generic_set_freq(struct dvb_frontend *fe, u32 freq /* in HZ */,
media/common/tuners/tuner-xc2028.c:		type |= F8MHZ;
media/common/tuners/tuner-xc2028.c:		type |= F8MHZ;
media/common/tuners/tuner-xc2028.c:		type |= F8MHZ;
media/common/tuners/tuner-xc2028-types.h:#define BASE_TYPES	(BASE|F8MHZ|MTS|FM|INPUT1|INPUT2|INIT1)
media/common/tuners/tuner-xc2028-types.h:#define F6MHZ          (1 << 27)
media/common/tuners/tuner-xc2028-types.h:#define F8MHZ		(1<<1)
media/common/tuners/tuner-xc2028-types.h:/* F8MHZ marks BASE firmwares for 8 MHz Bandwidth */
media/common/tuners/xc4000.c:	 if (type & F6MHZ)
media/common/tuners/xc4000.c:	 if (type & F8MHZ)
media/common/tuners/xc4000.c:		printk(KERN_CONT "F6MHZ ");
media/common/tuners/xc4000.c:		printk(KERN_CONT "F8MHZ ");
media/dvb/b2c2/flexcop-usb.c:			B2C2_WAIT_FOR_OPERATION_RDW * HZ);
media/dvb/b2c2/flexcop-usb.c:			nWaitTime * HZ);
media/dvb/b2c2/flexcop-usb.c:			nWaitTime * HZ);
media/dvb/b2c2/flexcop-usb.c:			nWaitTime * HZ);
media/dvb/b2c2/flexcop-usb.h:#define B2C2_WAIT_FOR_OPERATION_RDW (3*HZ)
media/dvb/b2c2/flexcop-usb.h:#define B2C2_WAIT_FOR_OPERATION_RW (1*HZ)
media/dvb/b2c2/flexcop-usb.h:#define B2C2_WAIT_FOR_OPERATION_V8FLASH (3*HZ)
media/dvb/b2c2/flexcop-usb.h:#define B2C2_WAIT_FOR_OPERATION_V8READ (3*HZ)
media/dvb/b2c2/flexcop-usb.h:#define B2C2_WAIT_FOR_OPERATION_V8WRITE (3*HZ)
media/dvb/b2c2/flexcop-usb.h:#define B2C2_WAIT_FOR_OPERATION_WDW (1*HZ)
media/dvb/bt8xx/dst.c:	*delay = HZ/10;
media/dvb/bt8xx/dst.c:	if (time_after_eq(jiffies, state->cur_jiff + (HZ / 5))) {
media/dvb/ddbridge/ddbridge-core.c:	stat = wait_event_timeout(i2c->wq, i2c->done == 1, HZ);
media/dvb/dvb-core/dmxdev.c:		    jiffies + 1 + (HZ / 2 + HZ * para->timeout) / 1000;
media/dvb/dvb-core/dvb_ca_en50221.c:				ca->slot_info[slot].timeout = jiffies + (INIT_TIMEOUT_SECS * HZ);
media/dvb/dvb-core/dvb_ca_en50221.c:				ca->slot_info[slot].timeout = jiffies + (INIT_TIMEOUT_SECS * HZ);
media/dvb/dvb-core/dvb_ca_en50221.c:					delay = HZ / 10;  /* 100ms */
media/dvb/dvb-core/dvb_ca_en50221.c:				delay = HZ / 10;  /* 100ms */
media/dvb/dvb-core/dvb_ca_en50221.c:				delay = HZ / 10;  /* 100ms */
media/dvb/dvb-core/dvb_ca_en50221.c:			delay = HZ / 10;  /* 100ms */
media/dvb/dvb-core/dvb_ca_en50221.c:				delay = HZ * 5;  /* 5s */
media/dvb/dvb-core/dvb_ca_en50221.c:			delay = HZ * 60;  /* 60s */
media/dvb/dvb-core/dvb_ca_en50221.c:			delay = HZ * 60;  /* 60s */
media/dvb/dvb-core/dvb_ca_en50221.c:			delay = HZ * 60;  /* 60s */
media/dvb/dvb-core/dvb_ca_en50221.c:	if ((ret = dvb_ca_en50221_wait_if_status(ca, slot, STATUSREG_DA, HZ / 10)) != 0)
media/dvb/dvb-core/dvb_ca_en50221.c:	if ((ret = dvb_ca_en50221_wait_if_status(ca, slot, STATUSREG_FR, HZ / 10)) != 0)
media/dvb/dvb-core/dvb_ca_en50221.c:		timeout = jiffies + HZ / 2;
media/dvb/dvb-core/dvb_frontend.c:		case BANDWIDTH_10_MHZ:
media/dvb/dvb-core/dvb_frontend.c:		case BANDWIDTH_1_712_MHZ:
media/dvb/dvb-core/dvb_frontend.c:		case BANDWIDTH_5_MHZ:
media/dvb/dvb-core/dvb_frontend.c:		case BANDWIDTH_6_MHZ:
media/dvb/dvb-core/dvb_frontend.c:		case BANDWIDTH_7_MHZ:
media/dvb/dvb-core/dvb_frontend.c:		case BANDWIDTH_8_MHZ:
media/dvb/dvb-core/dvb_frontend.c:	case DTV_BANDWIDTH_HZ:
media/dvb/dvb-core/dvb_frontend.c:	case DTV_BANDWIDTH_HZ:
media/dvb/dvb-core/dvb_frontend.c:	_DTV_CMD(DTV_BANDWIDTH_HZ, 1, 0),
media/dvb/dvb-core/dvb_frontend.c:				  dvb_shutdown_timeout * HZ))
media/dvb/dvb-core/dvb_frontend.c:		fepriv->delay = 3*HZ;
media/dvb/dvb-core/dvb_frontend.c:		fepriv->delay = 3*HZ;
media/dvb/dvb-core/dvb_frontend.c:	fepriv->delay = 3*HZ;
media/dvb/dvb-core/dvb_frontend.c:						fepriv->delay = 60 * HZ;
media/dvb/dvb-core/dvb_frontend.c:	fepriv->delay = fepriv->min_delay + q2 * HZ / (128*128);
media/dvb/dvb-core/dvb_frontend.c:						fepriv->delay = HZ / 10;
media/dvb/dvb-core/dvb_frontend.c:					fepriv->delay = HZ / 2;
media/dvb/dvb-core/dvb_frontend.c:		fepriv->min_delay = (dvb_override_tune_delay * HZ) / 1000;
media/dvb/dvb-core/dvb_frontend.c:		fepriv->min_delay = (fetunesettings.min_delay_ms * HZ) / 1000;
media/dvb/dvb-core/dvb_frontend.c:			fepriv->min_delay = HZ / 20;
media/dvb/dvb-core/dvb_frontend.c:			fepriv->min_delay = HZ / 20;
media/dvb/dvb-core/dvb_frontend.c:			fepriv->min_delay = HZ / 20;
media/dvb/dvb-core/dvb_frontend.c:			p->u.ofdm.bandwidth = BANDWIDTH_10_MHZ;
media/dvb/dvb-core/dvb_frontend.c:			p->u.ofdm.bandwidth = BANDWIDTH_1_712_MHZ;
media/dvb/dvb-core/dvb_frontend.c:			p->u.ofdm.bandwidth = BANDWIDTH_5_MHZ;
media/dvb/dvb-core/dvb_frontend.c:			p->u.ofdm.bandwidth = BANDWIDTH_6_MHZ;
media/dvb/dvb-core/dvb_frontend.c:			p->u.ofdm.bandwidth = BANDWIDTH_7_MHZ;
media/dvb/dvb-core/dvb_frontend.c:			p->u.ofdm.bandwidth = BANDWIDTH_8_MHZ;
media/dvb/dvb-core/dvb_frontend.c:	 * via DTV_BANDWIDTH_HZ, which may be useful for test programs.
media/dvb/dvb-usb/af9005-fe.c:		state->next_status_check = jiffies + 250 * HZ / 1000;
media/dvb/dvb-usb/af9015.c:	.if_freq_hz = MxL_IF_4_57_MHZ,
media/dvb/dvb-usb/af9015.c:	.if_freq         = IF_FREQ_4570000HZ,
media/dvb/dvb-usb/af9015.c:	.if_freq         = IF_FREQ_4570000HZ,
media/dvb/dvb-usb/af9015.c:	.xtal_freq       = CRYSTAL_FREQ_16000000HZ,
media/dvb/dvb-usb/af9015.c:	.xtal_freq       = CRYSTAL_FREQ_16000000HZ,
media/dvb/dvb-usb/af9015.c:	.xtal_freq_hz = MxL_XTAL_24_MHZ,
media/dvb/dvb-usb/ce6230.c:	.if_freq         = IF_FREQ_4570000HZ,
media/dvb/dvb-usb/ce6230.c:	.xtal_freq       = CRYSTAL_FREQ_16000000HZ,
media/dvb/dvb-usb/cxusb.c:	.xtal_freq       = CRYSTAL_FREQ_16000000HZ,
media/dvb/dvb-usb/cxusb.c:	.xtal_freq       = CRYSTAL_FREQ_16000000HZ,
media/dvb/dvb-usb/dib0700_devices.c:	.if_freq_hz = MxL_IF_6_MHZ,
media/dvb/dvb-usb/dib0700_devices.c:	.xtal_freq_hz = MxL_XTAL_25_MHZ,
media/dvb/dvb-usb/ec168.c:	.if_freq         = IF_FREQ_4570000HZ,
media/dvb/dvb-usb/ec168.c:	.xtal_freq       = CRYSTAL_FREQ_16000000HZ,
media/dvb/dvb-usb/friio-fe.c:	/* add 399[1/7 MHZ] = 57MHz for the IF  */
media/dvb/dvb-usb/gp8psk-fe.c:	if (gp8psk_usb_out_op(state->d,SET_22KHZ_TONE,
media/dvb/dvb-usb/gp8psk-fe.c:		st->next_status_check = jiffies + (st->status_check_interval*HZ)/1000;
media/dvb/dvb-usb/gp8psk.h:#define SET_22KHZ_TONE                  0x8C
media/dvb/dvb-usb/lmedm04.c:	char *fe_name[] = {"", " LG TDQY-P001F", " SHARP:BS2F7HZ7395",
media/dvb/dvb-usb/lmedm04.c: * DM04/QQBOX DVB-S USB BOX	LME2510C + SHARP:BS2F7HZ7395
media/dvb/dvb-usb/lmedm04.c: *				LME2510 + BS2F7HZ0194
media/dvb/dvb-usb/lmedm04.c: *				LME2510C + BS2F7HZ0194
media/dvb/dvb-usb/lmedm04.c: *	LME2510: SHARP:BS2F7HZ0194(MV0194) cannot cold reset and share system
media/dvb/dvb-usb/lmedm04.c: * MV0194 (LME2510+SHARP:BS2F7HZ0194)
media/dvb/dvb-usb/lmedm04.c: * MVB7395 (LME2510C+SHARP:BS2F7HZ7395)
media/dvb/dvb-usb/lmedm04.c:				" SHARP:BS2F7HZ0194", " RS2000"};
media/dvb/dvb-usb/lmedm04.c: * SHARP:BS2F7HZ0194 = (STV0299+IX2410)
media/dvb/dvb-usb/lmedm04.c: * SHARP:BS2F7HZ7395 = (STV0288+Sharp IX2505V)
media/dvb/dvb-usb/lmedm04.h: * DM04/QQBOX DVB-S USB BOX	LME2510C + SHARP:BS2F7HZ7395
media/dvb/dvb-usb/lmedm04.h: * MVB7395 (LME2510C+SHARP:BS2F7HZ7395)
media/dvb/dvb-usb/lmedm04.h: * SHARP:BS2F7HZ7395 = (STV0288+Sharp IX2505V)
media/dvb/dvb-usb/rtl28xxu.c:	.if_freq         = IF_FREQ_4570000HZ,
media/dvb/dvb-usb/rtl28xxu.c:	.xtal_freq       = CRYSTAL_FREQ_16000000HZ,
media/dvb/dvb-usb/technisat-usb2.c:	b[0] = I2C_SPEED_100KHZ_BIT;
media/dvb/dvb-usb/technisat-usb2.c:#define I2C_SPEED_100KHZ_BIT 0x40
media/dvb/dvb-usb/vp702x-fe.c:		st->next_status_check = jiffies + (st->status_check_interval*HZ)/1000;
media/dvb/frontends/au8522_dig.c:	case AU8522_IF_3_25MHZ:
media/dvb/frontends/au8522_dig.c:	case AU8522_IF_4MHZ:
media/dvb/frontends/au8522_dig.c:	case AU8522_IF_6MHZ:
media/dvb/frontends/au8522.h:	AU8522_IF_3_25MHZ,
media/dvb/frontends/au8522.h:	AU8522_IF_4MHZ,
media/dvb/frontends/au8522.h:	AU8522_IF_6MHZ = 0,
media/dvb/frontends/bcm3510.c:		st->next_status_check = jiffies + (st->status_check_interval*HZ)/1000;
media/dvb/frontends/bcm3510.c:	t = jiffies + 1*HZ;
media/dvb/frontends/bcm3510.c:    t = jiffies + 3*HZ;
media/dvb/frontends/bcm3510.c:    t = jiffies + 3*HZ;
media/dvb/frontends/cx24116.c:	cmd.args[0x08] = CX24116_SEARCH_RANGE_KHZ >> 8;
media/dvb/frontends/cx24116.c:	cmd.args[0x09] = CX24116_SEARCH_RANGE_KHZ & 0xff;
media/dvb/frontends/cx24116.c:#define CX24116_SEARCH_RANGE_KHZ 5000
media/dvb/frontends/cx24116.c:	*delay = HZ / 5;
media/dvb/frontends/cx24123.c:	*delay = HZ/10;
media/dvb/frontends/dib3000mc.c:				     BANDWIDTH_TO_KHZ(ch->bandwidth_hz), 1);
media/dvb/frontends/dib3000mc.c:	dib3000mc_set_bandwidth(state, BANDWIDTH_TO_KHZ(fep->bandwidth_hz));
media/dvb/frontends/dib3000mc.c:	u32 bw = BANDWIDTH_TO_KHZ(ch->bandwidth_hz);
media/dvb/frontends/dib7000m.c:	dib7000m_set_bandwidth(state, BANDWIDTH_TO_KHZ(ch->bandwidth_hz));
media/dvb/frontends/dib7000m.c:	dib7000m_set_bandwidth(state, BANDWIDTH_TO_KHZ(ch->bandwidth_hz));
media/dvb/frontends/dib7000m.c:	dib7000m_set_bandwidth(state, BANDWIDTH_TO_KHZ(fep->bandwidth_hz));
media/dvb/frontends/dib7000m.c:	factor = BANDWIDTH_TO_KHZ(schan.bandwidth_hz);
media/dvb/frontends/dib7000m.c:	fep->bandwidth_hz = BANDWIDTH_TO_HZ(state->current_bandwidth);
media/dvb/frontends/dib7000p.c:	dib7000p_set_bandwidth(state, BANDWIDTH_TO_KHZ(ch->bandwidth_hz));
media/dvb/frontends/dib7000p.c:	dib7000p_set_bandwidth(state, BANDWIDTH_TO_KHZ(ch->bandwidth_hz));
media/dvb/frontends/dib7000p.c:		dib7000p_spur_protect(state, ch->frequency / 1000, BANDWIDTH_TO_KHZ(ch->bandwidth_hz));
media/dvb/frontends/dib7000p.c:	factor = BANDWIDTH_TO_KHZ(ch->bandwidth_hz);
media/dvb/frontends/dib7000p.c:	fep->bandwidth_hz = BANDWIDTH_TO_HZ(state->current_bandwidth);
media/dvb/frontends/dibx000_common.h:#define BANDWIDTH_TO_HZ(v)	((v) * 1000)
media/dvb/frontends/dibx000_common.h:#define BANDWIDTH_TO_KHZ(v)	((v) / 1000)
media/dvb/frontends/drxd_firm.c:u8 DRXD_DiversityDelay6MHZ[] =	/* also used ok for 7 MHz */
media/dvb/frontends/drxd_firm.c:u8 DRXD_DiversityDelay8MHZ[] = {
media/dvb/frontends/drxd_firm.h:#define DRXD_BANDWIDTH_6MHZ_IN_HZ  (0x68A1B6L)
media/dvb/frontends/drxd_firm.h:#define DRXD_BANDWIDTH_7MHZ_IN_HZ  (0x7A1200L)
media/dvb/frontends/drxd_firm.h:#define DRXD_BANDWIDTH_8MHZ_IN_HZ  (0x8B8249L)
media/dvb/frontends/drxd_firm.h:extern u8 DRXD_DiversityDelay6MHZ[];
media/dvb/frontends/drxd_firm.h:extern u8 DRXD_DiversityDelay8MHZ[];
media/dvb/frontends/drxd_hard.c:			bandwidth = DRXD_BANDWIDTH_6MHZ_IN_HZ;
media/dvb/frontends/drxd_hard.c:			bandwidth = DRXD_BANDWIDTH_6MHZ_IN_HZ;
media/dvb/frontends/drxd_hard.c:			bandwidth = DRXD_BANDWIDTH_7MHZ_IN_HZ;
media/dvb/frontends/drxd_hard.c:			bandwidth = DRXD_BANDWIDTH_7MHZ_IN_HZ;
media/dvb/frontends/drxd_hard.c:			bandwidth = DRXD_BANDWIDTH_8MHZ_IN_HZ;
media/dvb/frontends/drxd_hard.c:			bandwidth = DRXD_BANDWIDTH_8MHZ_IN_HZ;
media/dvb/frontends/drxd_hard.c:		state->m_DiversityDelay6MHZ = DRXD_DiversityDelay6MHZ;
media/dvb/frontends/drxd_hard.c:		state->m_DiversityDelay6MHZ = NULL;
media/dvb/frontends/drxd_hard.c:		state->m_DiversityDelay8MHZ = DRXD_DiversityDelay8MHZ;
media/dvb/frontends/drxd_hard.c:		state->m_DiversityDelay8MHZ = NULL;
media/dvb/frontends/drxd_hard.c:				status = WriteTable(state, state->m_DiversityDelay6MHZ);
media/dvb/frontends/drxd_hard.c:				status = WriteTable(state, state->m_DiversityDelay8MHZ);
media/dvb/frontends/drxd_hard.c:	u8 *m_DiversityDelay6MHZ;
media/dvb/frontends/drxd_hard.c:	u8 *m_DiversityDelay8MHZ;
media/dvb/frontends/drxk_hard.c:		bandwidth = DRXK_BANDWIDTH_6MHZ_IN_HZ;
media/dvb/frontends/drxk_hard.c:		bandwidth = DRXK_BANDWIDTH_7MHZ_IN_HZ;
media/dvb/frontends/drxk_hard.c:		bandwidth = DRXK_BANDWIDTH_8MHZ_IN_HZ;
media/dvb/frontends/drxk_hard.c:#define DRXK_BANDWIDTH_6MHZ_IN_HZ  (0x68A1B6L)
media/dvb/frontends/drxk_hard.c:#define DRXK_BANDWIDTH_7MHZ_IN_HZ  (0x7A1200L)
media/dvb/frontends/drxk_hard.c:#define DRXK_BANDWIDTH_8MHZ_IN_HZ  (0x8B8249L)
media/dvb/frontends/drxk_hard.c:#ifndef DRXK_BANDWIDTH_6MHZ_IN_HZ
media/dvb/frontends/drxk_hard.c:#ifndef DRXK_BANDWIDTH_7MHZ_IN_HZ
media/dvb/frontends/drxk_hard.c:#ifndef DRXK_BANDWIDTH_8MHZ_IN_HZ
media/dvb/frontends/ds3000.c:	*delay = HZ / 5;
media/dvb/frontends/m88rs2000.c:		(FE_CRYSTAL_KHZ / 1000)  + 1) / 2;
media/dvb/frontends/m88rs2000.c:	gdiv28 = (FE_CRYSTAL_KHZ / 1000 * 1694 + 500) / 1000;
media/dvb/frontends/m88rs2000.c:		lpf_mxdiv = (nlpf * (FE_CRYSTAL_KHZ / 1000)
media/dvb/frontends/m88rs2000.c:	lpf_mxdiv = (nlpf * (FE_CRYSTAL_KHZ / 1000)
media/dvb/frontends/m88rs2000.c:		ndiv = (frequency * 14 * 2) / FE_CRYSTAL_KHZ;
media/dvb/frontends/m88rs2000.c:		ndiv = (frequency * 14 * 4) / FE_CRYSTAL_KHZ;
media/dvb/frontends/m88rs2000.c:	offset_khz = (ndiv - ndiv % 2 + 1024) * FE_CRYSTAL_KHZ
media/dvb/frontends/m88rs2000.h:#define FE_CRYSTAL_KHZ 27000
media/dvb/frontends/s5h1420.c:	timeout = jiffies + ((100*HZ) / 1000);
media/dvb/frontends/s5h1420.c:	timeout = jiffies + ((100*HZ) / 1000);
media/dvb/frontends/s5h1420.c:	timeout = jiffies + ((reply->timeout*HZ) / 1000);
media/dvb/frontends/s5h1432.c:	case EUROPE_HI_IF_FREQ_36_MHZ:
media/dvb/frontends/s5h1432.c:	case IF_FREQ_3point3_MHZ:
media/dvb/frontends/s5h1432.c:	case IF_FREQ_3point5_MHZ:
media/dvb/frontends/s5h1432.c:	case IF_FREQ_4_MHZ:
media/dvb/frontends/s5h1432.c:	case IF_FREQ_6_MHZ:
media/dvb/frontends/s5h1432.c:	case TAIWAN_HI_IF_FREQ_44_MHZ:
media/dvb/frontends/s5h1432.c:			s5h1432_set_IF(fe, IF_FREQ_4_MHZ);
media/dvb/frontends/s5h1432.c:			s5h1432_set_IF(fe, IF_FREQ_4_MHZ);
media/dvb/frontends/s5h1432.c:			s5h1432_set_IF(fe, IF_FREQ_4_MHZ);
media/dvb/frontends/s5h1432.c:			s5h1432_set_IF(fe, IF_FREQ_4_MHZ);
media/dvb/frontends/s5h1432.c:			s5h1432_set_IF(fe, IF_FREQ_4_MHZ);
media/dvb/frontends/s5h1432.c:			s5h1432_set_IF(fe, IF_FREQ_4_MHZ);
media/dvb/frontends/s5h1432.h:#define EUROPE_HI_IF_FREQ_36_MHZ 36000000
media/dvb/frontends/s5h1432.h:#define IF_FREQ_3point3_MHZ       3300000
media/dvb/frontends/s5h1432.h:#define IF_FREQ_3point5_MHZ       3500000
media/dvb/frontends/s5h1432.h:#define IF_FREQ_4_MHZ             4000000
media/dvb/frontends/s5h1432.h:#define IF_FREQ_6_MHZ             6000000
media/dvb/frontends/s5h1432.h:#define TAIWAN_HI_IF_FREQ_44_MHZ 44000000
media/dvb/frontends/stv0297.c:#define STV0297_CLOCK_KHZ   28900
media/dvb/frontends/stv0297.c:		freq -= STV0297_CLOCK_KHZ;
media/dvb/frontends/stv0297.c:	tmp *= STV0297_CLOCK_KHZ;
media/dvb/frontends/stv0297.c:	tmp = (STV0297_CLOCK_KHZ * 1000) / (1 << 16);
media/dvb/frontends/stv0297.c:	tmp = tmp / (STV0297_CLOCK_KHZ / 4);	/* 1/4 = 2^-2 */
media/dvb/frontends/stv0900_priv.h:	STV0900_22KHZ_Continues = 0,
media/dvb/frontends/stv0900_reg.h:#define F0900_OUTPARRS3_HZ 0xf11c0008
media/dvb/frontends/stv0900_reg.h:#define F0900_OUTSERRS1_HZ 0xf11c0040
media/dvb/frontends/stv0900_reg.h:#define F0900_OUTSERRS2_HZ 0xf11c0020
media/dvb/frontends/stv0900_reg.h:#define F0900_OUTSERRS3_HZ 0xf11c0010
media/dvb/frontends/stv0900_reg.h:#define F0900_P1_SHORT_22KHZ 0xf1a40020
media/dvb/frontends/stv0900_reg.h:#define F0900_P2_SHORT_22KHZ 0xf1940020
media/dvb/frontends/stv090x_reg.h:#define STV090x_OFFST_OUTPARRS3_HZ_FIELD	3
media/dvb/frontends/stv090x_reg.h:#define STV090x_OFFST_OUTSERRS1_HZ_FIELD	6
media/dvb/frontends/stv090x_reg.h:#define STV090x_OFFST_OUTSERRS2_HZ_FIELD	5
media/dvb/frontends/stv090x_reg.h:#define STV090x_OFFST_OUTSERRS3_HZ_FIELD	4
media/dvb/frontends/stv090x_reg.h:#define STV090x_OFFST_Px_SHORT_22KHZ_FIELD	5
media/dvb/frontends/stv090x_reg.h:#define STV090x_WIDTH_OUTPARRS3_HZ_FIELD	1
media/dvb/frontends/stv090x_reg.h:#define STV090x_WIDTH_OUTSERRS1_HZ_FIELD	1
media/dvb/frontends/stv090x_reg.h:#define STV090x_WIDTH_OUTSERRS2_HZ_FIELD	1
media/dvb/frontends/stv090x_reg.h:#define STV090x_WIDTH_OUTSERRS3_HZ_FIELD	1
media/dvb/frontends/stv090x_reg.h:#define STV090x_WIDTH_Px_SHORT_22KHZ_FIELD	1
media/dvb/frontends/tda1004x.c:		timeout = jiffies + 2 * HZ;
media/dvb/frontends/tda1004x.h:	TDA10046_FREQ_045,		/* low IF, 4.0, 4.5, or 5.0 MHZ */
media/dvb/frontends/tda1004x.h:	TDA10046_FREQ_052,		/* low IF, 5.1667 MHZ for tda9889 */
media/dvb/frontends/tda1004x.h:	TDA10046_FREQ_3613,		/* 36,13 MHZ */
media/dvb/frontends/tda1004x.h:	TDA10046_FREQ_3617,		/* original config, 36,166 MHZ */
media/dvb/frontends/tda18271c2dd.c:			Standard = HF_DVBC_6MHZ;
media/dvb/frontends/tda18271c2dd.c:			Standard = HF_DVBC_7MHZ;
media/dvb/frontends/tda18271c2dd.c:			Standard = HF_DVBC_8MHZ;
media/dvb/frontends/tda18271c2dd.c:			Standard = HF_DVBT_6MHZ;
media/dvb/frontends/tda18271c2dd.c:			Standard = HF_DVBT_7MHZ;
media/dvb/frontends/tda18271c2dd.c:			Standard = HF_DVBT_8MHZ;
media/dvb/frontends/tda18271c2dd_maps.h:	{ 3300000,  6000000, 0x1C, 0x58 },    /* HF_DVBT_6MHZ */
media/dvb/frontends/tda18271c2dd_maps.h:	{ 3500000,  7000000, 0x1C, 0x37 },    /* HF_DVBT_7MHZ */
media/dvb/frontends/tda18271c2dd_maps.h:	{ 4000000,  6000000, 0x1D, 0x58 },    /* HF_DVBC_6MHZ (Chicago) */
media/dvb/frontends/tda18271c2dd_maps.h:	{ 4000000,  8000000, 0x1D, 0x37 },    /* HF_DVBT_8MHZ */
media/dvb/frontends/tda18271c2dd_maps.h:	{ 4500000,  7000000, 0x1E, 0x37 },    /* HF_DVBC_7MHZ (not documented by NXP) */
media/dvb/frontends/tda18271c2dd_maps.h:	{ 5000000,  8000000, 0x1F, 0x37 },    /* HF_DVBC_8MHZ */
media/dvb/frontends/tda18271c2dd_maps.h:	HF_AnalogMax, HF_DVBT_6MHZ, HF_DVBT_7MHZ, HF_DVBT_8MHZ,
media/dvb/frontends/tda18271c2dd_maps.h:	HF_DVBC_8MHZ, HF_DVBC
media/dvb/frontends/tda18271c2dd_maps.h:	HF_DVBT, HF_ATSC,  HF_DVBC_6MHZ,  HF_DVBC_7MHZ,
media/dvb/mpq/demux/mpq_dmx_plugin_common.c:				 /* convert from 105.47 KHZ to 27MHz */
media/dvb/mpq/demux/mpq_dmx_plugin_common.c:		stc *= 256; /* convert from 105.47 KHZ to 27MHz */
media/dvb/ngene/ngene-core.c:	ret = wait_event_timeout(dev->cmd_wq, dev->cmd_done == 1, 2 * HZ);
media/dvb/pt1/pt1.c:			.frequency = VA1J5JF8007S_20MHZ,
media/dvb/pt1/pt1.c:			.frequency = VA1J5JF8007S_20MHZ,
media/dvb/pt1/pt1.c:			.frequency = VA1J5JF8007S_25MHZ,
media/dvb/pt1/pt1.c:			.frequency = VA1J5JF8007S_25MHZ,
media/dvb/pt1/pt1.c:			.frequency = VA1J5JF8007T_20MHZ,
media/dvb/pt1/pt1.c:			.frequency = VA1J5JF8007T_20MHZ,
media/dvb/pt1/pt1.c:			.frequency = VA1J5JF8007T_25MHZ,
media/dvb/pt1/pt1.c:			.frequency = VA1J5JF8007T_25MHZ,
media/dvb/pt1/pt1.c:			schedule_timeout_interruptible((HZ + 999) / 1000);
media/dvb/pt1/pt1.c:		schedule_timeout_interruptible((HZ + 999) / 1000);
media/dvb/pt1/pt1.c:	schedule_timeout_uninterruptible((HZ + 49) / 50);
media/dvb/pt1/pt1.c:		schedule_timeout_uninterruptible((HZ + 999) / 1000);
media/dvb/pt1/pt1.c:		schedule_timeout_uninterruptible((HZ + 999) / 1000);
media/dvb/pt1/pt1.c:		schedule_timeout_uninterruptible((HZ + 999) / 1000);
media/dvb/pt1/pt1.c:		schedule_timeout_uninterruptible((HZ + 999) / 1000);
media/dvb/pt1/pt1.c:	schedule_timeout_uninterruptible((HZ + 999) / 1000);
media/dvb/pt1/pt1.c:	schedule_timeout_uninterruptible((HZ + 999) / 1000);
media/dvb/pt1/pt1.c:	schedule_timeout_uninterruptible((HZ + 999) / 1000);
media/dvb/pt1/va1j5jf8007s.c:	case VA1J5JF8007S_20MHZ:
media/dvb/pt1/va1j5jf8007s.c:	case VA1J5JF8007S_25MHZ:
media/dvb/pt1/va1j5jf8007s.c:		*delay = 3 * HZ;
media/dvb/pt1/va1j5jf8007s.c:		*delay = 3 * HZ;
media/dvb/pt1/va1j5jf8007s.c:			*delay = (HZ + 49) / 50;
media/dvb/pt1/va1j5jf8007s.c:			*delay = (HZ + 99) / 100;
media/dvb/pt1/va1j5jf8007s.c:		*delay = (HZ + 99) / 100;
media/dvb/pt1/va1j5jf8007s.c:			*delay = (HZ + 999) / 1000;
media/dvb/pt1/va1j5jf8007s.h:	VA1J5JF8007S_20MHZ,
media/dvb/pt1/va1j5jf8007s.h:	VA1J5JF8007S_25MHZ,
media/dvb/pt1/va1j5jf8007t.c:	case VA1J5JF8007T_20MHZ:
media/dvb/pt1/va1j5jf8007t.c:	case VA1J5JF8007T_25MHZ:
media/dvb/pt1/va1j5jf8007t.c:				*delay = 3 * HZ;
media/dvb/pt1/va1j5jf8007t.c:		*delay = 3 * HZ;
media/dvb/pt1/va1j5jf8007t.c:		*delay = 3 * HZ;
media/dvb/pt1/va1j5jf8007t.c:		*delay = 3 * HZ;
media/dvb/pt1/va1j5jf8007t.c:			*delay = (HZ + 999) / 1000;
media/dvb/pt1/va1j5jf8007t.c:			*delay = (HZ + 999) / 1000;
media/dvb/pt1/va1j5jf8007t.h:	VA1J5JF8007T_20MHZ,
media/dvb/pt1/va1j5jf8007t.h:	VA1J5JF8007T_25MHZ,
media/dvb/siano/smscoreapi.h:#define BW_5_MHZ							3
media/dvb/siano/smscoreapi.h:#define BW_6_MHZ							2
media/dvb/siano/smscoreapi.h:#define BW_7_MHZ							1
media/dvb/siano/smscoreapi.h:#define BW_8_MHZ							0
media/dvb/siano/smsdvb.c:		default: /* Assumes 6 MHZ bw */
media/dvb/siano/smsdvb.c:		Msg.Data[1] = BW_6_MHZ;
media/dvb/siano/smsdvb.c:		Msg.Data[1] = BW_7_MHZ;
media/dvb/siano/smsdvb.c:		Msg.Data[1] = BW_8_MHZ;
media/dvb/ttpci/av7110.c:			kthread_should_stop(), 5 * HZ);
media/dvb/ttpci/av7110_hw.c:				av7110->bmp_state != BMP_LOADING, 10*HZ);
media/dvb/ttpci/av7110_hw.h:#define ARM_WAIT_FREE  (HZ)
media/dvb/ttpci/av7110_hw.h:#define ARM_WAIT_OSD (HZ)
media/dvb/ttpci/av7110_hw.h:#define ARM_WAIT_SHAKE (HZ/5)
media/dvb/ttpci/av7110_ir.c:#define UP_TIMEOUT	(HZ*7/25)
media/dvb/ttpci/av7110_v4l.c:	t->rangelow = 772;	/* 48.25 MHZ / 62.5 kHz = 772, see fi1216mk2-specs, page 2 */
media/dvb/ttpci/budget-core.c:#define BUFFER_WARNING_WAIT	(30*HZ)
media/dvb/ttusb-budget/dvb-ttusb-budget.c:			if (time_after_eq(jiffies, lastj + HZ)) {
media/dvb/ttusb-budget/dvb-ttusb-budget.c:					numpkt * HZ / (jiffies - lastj),
media/isdbtmm/tuner_drv.c:	schedule_delayed_work(&tmm_chg_ctrl_polling_work, TMM_CHG_CTRL_POLLING_TIME * HZ);
media/isdbtmm/tuner_drv.c:	schedule_delayed_work(&tmm_chg_ctrl_polling_work, TMM_CHG_CTRL_START_DELAY * HZ);
media/isdbtmm/tuner_drv.c:	tmm_chg_log(KERN_ALERT"%s: schedule_delayed_work(tmm_chg_ctrl_polling_work, TMM_CHG_CTRL_POLLING_TIME(%d) * HZ(0x%x))!\n", __func__, TMM_CHG_CTRL_POLLING_TIME, HZ);
media/isdbtmm/tuner_drv.c:	tmm_chg_log(KERN_ALERT"%s: schedule_delayed_work(tmm_chg_ctrl_polling_work, TMM_CHG_CTRL_START_DELAY(%d) * HZ(0x%x))!\n", __func__, TMM_CHG_CTRL_START_DELAY, HZ);
media/isdbtmm/tuner_drv.c:	wake_lock_timeout(&tdmb_ant_wlock, TDMB_ANT_WLOCK_TIMEOUT * HZ);
media/radio/radio-gemtek.c:#define GEMTEK_STDF_3_125_KHZ	0x01	/* Standard frequency 3.125 kHz	*/
media/radio/radio-gemtek.c:	gemtek_bu2614_set(gt, BU2614_STDF, GEMTEK_STDF_3_125_KHZ);
media/radio/radio-iris.c:		rel_freq = (rel_freq * 20) / KHZ_TO_MHZ;
media/radio/radio-iris.c:		&& time_after(jiffies, hdev->cmd_last_tx + HZ)) {
media/radio/radio-sf16fmi.c:	msleep(143); 		/* was schedule_timeout(HZ/7) */
media/radio/radio-sf16fmi.c:	msleep(143);		/* was schedule_timeout(HZ/7) */
media/radio/radio-tavarua.c:		case FIFTEEN_KHZ_LR_EQUA_l8DBFS:
media/radio/radio-tavarua.c:		case ONE_KHZ_LEFTONLY_EQUA_0DBFS:
media/radio/radio-tavarua.c:		case ONE_KHZ_LR_EQUA_0DBFS:
media/radio/radio-tavarua.c:		case ONE_KHZ_LR_EQUA_l8DBFS:
media/radio/radio-tavarua.c:		case ONE_KHZ_RIGHTONLY_EQUA_0DBFS:
media/radio/radio-tavarua.c:			Configuring all 100KHZ spaced regions as 50KHz due to
media/radio/radio-tavarua.c:				Configuring all 200KHZ spaced regions as
media/radio/radio-tavarua.c:			Configuring all 200KHZ spaced regions as 100KHz due to
media/radio/radio-tavarua.c:			freq = (ctrl->value - ADJ_CHANNEL_KHZ);
media/radio/radio-tavarua.c:			freq = (ctrl->value + ADJ_CHANNEL_KHZ);
media/radio/radio-tavarua.c:						SRCH200KHZ_OFFSET, SRCH_MASK);
media/radio/radio-tavarua.c:						SRCH200KHZ_OFFSET, SRCH_MASK);
media/radio/radio-tavarua.c:					SRCH200KHZ_OFFSET, SRCH_MASK);
media/radio/radio-tavarua.c:					SRCH200KHZ_OFFSET, SRCH_MASK);
media/radio/radio-tavarua.c:				value = FM_CH_SPACE_100KHZ;
media/radio/radio-tavarua.c:			value = FM_CH_SPACE_100KHZ;
media/radio/radio-tavarua.c:			value = FM_CH_SPACE_100KHZ;
media/radio/radio-tavarua.c:			value = FM_CH_SPACE_100KHZ;
media/radio/radio-tavarua.c:				value = FM_CH_SPACE_200KHZ;
media/radio/radio-tavarua.c:			value = FM_CH_SPACE_200KHZ;
media/radio/radio-tavarua.c:			value = FM_CH_SPACE_200KHZ;
media/radio/radio-tavarua.c:			value = FM_CH_SPACE_50KHZ;
media/radio/radio-tavarua.c:		value = FM_CH_SPACE_50KHZ;
media/radio/saa7706h.c:#define SAA7706H_CTRL_PLL3_62975MHZ	0x003e
media/radio/saa7706h.c:		SAA7706H_CTRL_PLL3_62975MHZ, &err);
media/radio/saa7706h.c:		SAA7706H_CTRL_PLL3_62975MHZ | SAA7706H_CTRL_PC_RESET_DSP1 |
media/radio/saa7706h.c:		SAA7706H_CTRL_PLL3_62975MHZ | SAA7706H_CTRL_PC_RESET_DSP1 |
media/radio/wl128x/fmdrv_common.c:	 .chanl_space = FM_CHANNEL_SPACING_200KHZ * FM_FREQ_MUL,
media/radio/wl128x/fmdrv_common.c:	 .chanl_space = FM_CHANNEL_SPACING_200KHZ * FM_FREQ_MUL,
media/radio/wl128x/fmdrv_common.h:#define FM_CHANNEL_SPACING_100KHZ 2
media/radio/wl128x/fmdrv_common.h:#define FM_CHANNEL_SPACING_200KHZ 4
media/radio/wl128x/fmdrv_common.h:#define FM_CHANNEL_SPACING_50KHZ 1
media/radio/wl128x/fmdrv.h:#define FM_DRV_RX_SEEK_TIMEOUT (20*HZ)	/* 20 seconds */
media/radio/wl128x/fmdrv.h:#define FM_DRV_TX_TIMEOUT      (5*HZ)	/* 5 seconds */
media/radio/wl128x/fmdrv_rx.c:		spacing = FM_CHANNEL_SPACING_100KHZ;
media/radio/wl128x/fmdrv_rx.c:		spacing = FM_CHANNEL_SPACING_200KHZ;
media/radio/wl128x/fmdrv_rx.c:		spacing = FM_CHANNEL_SPACING_50KHZ;
media/rc/ati_remote.c:		HZ);
media/rc/ene_ir.c:	if (wait_for_completion_timeout(&dev->tx_complete, 2 * HZ) == 0) {
media/rc/ene_ir.c:		mod_timer(&dev->tx_sim_timer, jiffies + HZ / 500);
media/rc/imon.c:#define TOUCH_TIMEOUT	(HZ/30)
media/rc/lirc_dev.c:		if (2 > d->sample_rate || HZ < d->sample_rate) {
media/rc/lirc_dev.c:		ir->jiffies_to_wait = HZ / d->sample_rate;
media/rc/lirc_dev.c:				"sample_rate must be between 2 and %d!\n", HZ);
media/rc/mceusb.c:			      0x0000, 0x0100, NULL, 0, HZ * 3);
media/rc/mceusb.c:			      0x0808, 0x0000, NULL, 0, HZ * 3);
media/rc/mceusb.c:			      0xc04e, 0x0000, NULL, 0, HZ * 3);
media/rc/mceusb.c:			      data, USB_CTRL_MSG_SZ, HZ * 3);
media/rc/mceusb.c:				mce_dbg(ir->dev, "%s: requesting %u HZ "
media/rc/redrat3.c:			      0, 0, buffer, 2, HZ * 10);
media/rc/redrat3.c:			     0, 0, buffer, RR3_FW_VERSION_LEN, HZ * 5);
media/rc/redrat3.c:			      0x0000, 0x0000, data, sizeof(u8), HZ * 10);
media/rc/redrat3.c:			     RR3_CPUCS_REG_ADDR, 0, val, len, HZ * 25);
media/rc/redrat3.c:			     RR3_IR_IO_LENGTH_FUZZ, 0, val, len, HZ * 25);
media/rc/redrat3.c:			     RR3_IR_IO_MAX_LENGTHS, 0, val, len, HZ * 25);
media/rc/redrat3.c:			      RR3_IR_IO_SIG_TIMEOUT, 0, tmp, len, HZ * 5);
media/rc/redrat3.c:			    sendbuf_len, &ret_len, 10 * HZ);
media/tdmb/tcc3170/inc/tcbd_api_common.h:	CLOCK_19200KHZ,
media/tdmb/tcc3170/inc/tcbd_api_common.h:	CLOCK_24576KHZ,
media/tdmb/tcc3170/inc/tcbd_api_common.h:	CLOCK_38400KHZ,
media/tdmb/tcc3170/src/tcbd_drv_ip.c:	case CLOCK_19200KHZ:
media/tdmb/tcc3170/src/tcbd_drv_ip.c:	case CLOCK_19200KHZ:
media/tdmb/tcc3170/src/tcbd_drv_ip.c:	case CLOCK_24576KHZ:
media/tdmb/tcc3170/src/tcbd_drv_ip.c:	case CLOCK_24576KHZ:
media/tdmb/tcc3170/src/tcbd_drv_ip.c:	case CLOCK_38400KHZ:
media/tdmb/tcc3170/src/tcbd_drv_ip.c:	case CLOCK_38400KHZ:
media/tdmb/tcc3170/src/tcpal_linux/tcpal_io_cspi.c:#define SPI_SPEED_HZ	  10000000
media/tdmb/tcc3170/src/tcpal_linux/tcpal_io_cspi.c:		spi_data->spi_dev->max_speed_hz = SPI_SPEED_HZ;
media/tdmb/tcc3170/src/tcpal_linux/tcpal_io_cspi.c:/*	xfer.speed_hz = SPI_SPEED_HZ; */
media/tdmb/tdmb.c:	wake_lock_timeout(&tdmb_ant_wlock, TDMB_ANT_WLOCK_TIMEOUT * HZ);
media/tdmb/tdmb_port_tcc3170.c: #define TCBD_CLOCK CLOCK_24576KHZ
media/video/adv7343.c: * FSC(reg) =  FSC (HZ) * --------
media/video/atmel-isi.c:	timeout = jiffies + FRAME_INTERVAL_MILLI_SEC * HZ;
media/video/au0828/au0828-cards.c:		.i2c_clk_divider = AU0828_I2C_CLK_250KHZ,
media/video/au0828/au0828-cards.c:		.i2c_clk_divider = AU0828_I2C_CLK_250KHZ,
media/video/au0828/au0828-cards.c:		.i2c_clk_divider = AU0828_I2C_CLK_250KHZ,
media/video/au0828/au0828-cards.c:		.i2c_clk_divider = AU0828_I2C_CLK_30KHZ,
media/video/au0828/au0828-cards.c:		.i2c_clk_divider = AU0828_I2C_CLK_30KHZ,
media/video/au0828/au0828-dvb.c:	.if_freq_hz = MxL_IF_6_MHZ,
media/video/au0828/au0828-dvb.c:	.qam_if        = AU8522_IF_4MHZ,
media/video/au0828/au0828-dvb.c:	.qam_if        = AU8522_IF_6MHZ,
media/video/au0828/au0828-dvb.c:	.qam_if        = AU8522_IF_6MHZ,
media/video/au0828/au0828-dvb.c:	.vsb_if        = AU8522_IF_3_25MHZ,
media/video/au0828/au0828-dvb.c:	.vsb_if        = AU8522_IF_6MHZ,
media/video/au0828/au0828-dvb.c:	.vsb_if        = AU8522_IF_6MHZ,
media/video/au0828/au0828-dvb.c:	.xtal_freq_hz = MxL_XTAL_24_MHZ,
media/video/au0828/au0828-reg.h:#define AU0828_I2C_CLK_100KHZ 0x14
media/video/au0828/au0828-reg.h:#define AU0828_I2C_CLK_250KHZ 0x07
media/video/au0828/au0828-reg.h:#define AU0828_I2C_CLK_30KHZ  0x40
media/video/au0828/au0828-video.c:						  jiffies + (HZ / 10));
media/video/au0828/au0828-video.c:						  jiffies + (HZ / 10));
media/video/au0828/au0828-video.c:			mod_timer(&dev->vbi_timeout, jiffies + (HZ / 10));
media/video/au0828/au0828-video.c:		mod_timer(&dev->vbi_timeout, jiffies + (HZ / 10));
media/video/au0828/au0828-video.c:		mod_timer(&dev->vbi_timeout, jiffies + (HZ / 10));
media/video/au0828/au0828-video.c:		mod_timer(&dev->vid_timeout, jiffies + (HZ / 10));
media/video/au0828/au0828-video.c:		mod_timer(&dev->vid_timeout, jiffies + (HZ / 10));
media/video/cpia2/cpia2_core.c:		cam_reg |= CPIA2_VP_FLICKER_MODES_50HZ;
media/video/cpia2/cpia2_core.c:		cam_reg &= ~CPIA2_VP_FLICKER_MODES_50HZ;
media/video/cpia2/cpia2_core.c:		cam_reg &= ~CPIA2_VP_FLICKER_MODES_50HZ;
media/video/cpia2/cpia2_registers.h:#define CPIA2_VP_FLICKER_MODES_50HZ               0x80
media/video/cpia2/cpia2_usb.c:			       HZ);
media/video/cpia2/cpia2_usb.c:			       HZ);
media/video/cpia2/cpia2_usb.c:	schedule_timeout(2 * HZ);
media/video/cpia2/cpia2_v4l.c:		       CPIA2_VP_FLICKER_MODES_50HZ) {
media/video/cpia2/cpia2_v4l.c:	schedule_timeout(2 * HZ);
media/video/cx18/cx18-dvb.c:	.if_freq         = IF_FREQ_5380000HZ,
media/video/cx18/cx18-dvb.c:	.xtal_freq       = CRYSTAL_FREQ_16000000HZ,
media/video/cx18/cx18-i2c.c:	.timeout	= CX18_ALGO_BIT_TIMEOUT*HZ /* jiffies */
media/video/cx231xx/cx231xx-core.c:				0x0004, HZ);
media/video/cx231xx/cx231xx-core.c:			0x0004, HZ);
media/video/cx231xx/cx231xx-core.c:			unsend_size, HZ);
media/video/cx231xx/cx231xx-core.c:			      val, reg, buf, len, HZ);
media/video/cx231xx/cx231xx-core.c:			      val, reg, buf, len, HZ);
media/video/cx231xx/cx231xx-core.c:				ven_req->pBuff, ven_req->wLength, HZ);
media/video/cx231xx/cx231xx-reg.h:#define      PHASE_INC_28MHZ          0x010000
media/video/cx231xx/cx231xx-reg.h:#define      PHASE_INC_49MHZ          0x0df22
media/video/cx231xx/cx231xx-reg.h:#define      PHASE_INC_56MHZ          0x0fa5b
media/video/cx23885/cx23885.h:#define BUFFER_TIMEOUT     (HZ)  /* 0.5 seconds */
media/video/cx25821/cx25821.h:#define BUFFER_TIMEOUT     (HZ)	/* 0.5 seconds */
media/video/davinci/isif.c:	u32 val, count, retries = loops_per_jiffy / (4000/HZ);
media/video/davinci/vpbe_osd.c:		osd_modify(sd, OSD_OSDWIN0MD_OHZ0 | OSD_OSDWIN0MD_OVZ0, winmd,
media/video/davinci/vpbe_osd.c:		osd_modify(sd, OSD_OSDWIN1MD_OHZ1 | OSD_OSDWIN1MD_OVZ1, winmd,
media/video/davinci/vpbe_osd.c:		osd_modify(sd, OSD_VIDWINMD_VHZ0 | OSD_VIDWINMD_VVZ0, winmd,
media/video/davinci/vpbe_osd.c:		osd_modify(sd, OSD_VIDWINMD_VHZ1 | OSD_VIDWINMD_VVZ1, winmd,
media/video/davinci/vpbe_osd.c:		winmd |= (h_zoom << OSD_OSDWIN0MD_OHZ0_SHIFT);
media/video/davinci/vpbe_osd.c:		winmd |= (h_zoom << OSD_OSDWIN1MD_OHZ1_SHIFT);
media/video/davinci/vpbe_osd.c:		winmd |= (h_zoom << OSD_VIDWINMD_VHZ0_SHIFT);
media/video/davinci/vpbe_osd.c:		winmd |= (h_zoom << OSD_VIDWINMD_VHZ1_SHIFT);
media/video/davinci/vpbe_osd_regs.h:#define OSD_OSDATRMD_OHZA			(3 << 10)
media/video/davinci/vpbe_osd_regs.h:#define OSD_OSDATRMD_OHZA_SHIFT			10
media/video/davinci/vpbe_osd_regs.h:#define OSD_OSDWIN0MD_OHZ0			(3 << 10)
media/video/davinci/vpbe_osd_regs.h:#define OSD_OSDWIN0MD_OHZ0_SHIFT		10
media/video/davinci/vpbe_osd_regs.h:#define OSD_OSDWIN1MD_OHZ1			(3 << 10)
media/video/davinci/vpbe_osd_regs.h:#define OSD_OSDWIN1MD_OHZ1_SHIFT		10
media/video/davinci/vpbe_osd_regs.h:#define OSD_VIDWINMD_VHZ0			(3 << 4)
media/video/davinci/vpbe_osd_regs.h:#define OSD_VIDWINMD_VHZ0_SHIFT			4
media/video/davinci/vpbe_osd_regs.h:#define OSD_VIDWINMD_VHZ1			(3 << 12)
media/video/davinci/vpbe_osd_regs.h:#define OSD_VIDWINMD_VHZ1_SHIFT			12
media/video/em28xx/em28xx-cards.c:		dev->board.xclk = EM28XX_XCLK_FREQUENCY_4_3MHZ;
media/video/em28xx/em28xx-cards.c:		dev->board.xclk = EM28XX_XCLK_FREQUENCY_48MHZ;
media/video/em28xx/em28xx-cards.c:			EM28XX_I2C_CLK_WAIT_ENABLE | EM28XX_I2C_FREQ_100_KHZ,
media/video/em28xx/em28xx-cards.c:			EM28XX_I2C_CLK_WAIT_ENABLE | EM28XX_I2C_FREQ_400_KHZ,
media/video/em28xx/em28xx-cards.c:				  EM28XX_I2C_FREQ_100_KHZ,
media/video/em28xx/em28xx-cards.c:				       EM28XX_I2C_FREQ_100_KHZ;
media/video/em28xx/em28xx-cards.c:				EM28XX_I2C_FREQ_400_KHZ,
media/video/em28xx/em28xx-cards.c:				EM28XX_I2C_FREQ_400_KHZ,
media/video/em28xx/em28xx-cards.c:				EM28XX_I2C_FREQ_400_KHZ,
media/video/em28xx/em28xx-cards.c:				EM28XX_I2C_FREQ_400_KHZ,
media/video/em28xx/em28xx-cards.c:				EM28XX_I2C_FREQ_400_KHZ,
media/video/em28xx/em28xx-cards.c:				EM28XX_I2C_FREQ_400_KHZ,
media/video/em28xx/em28xx-cards.c:				EM28XX_XCLK_FREQUENCY_10MHZ,
media/video/em28xx/em28xx-cards.c:				EM28XX_XCLK_FREQUENCY_12MHZ,
media/video/em28xx/em28xx-cards.c:				  EM28XX_XCLK_FREQUENCY_12MHZ;
media/video/em28xx/em28xx-cards.c:		.xclk		= EM28XX_XCLK_FREQUENCY_10MHZ,
media/video/em28xx/em28xx-cards.c:		.xclk         = EM28XX_XCLK_FREQUENCY_12MHZ,
media/video/em28xx/em28xx-cards.c:		.xclk         = EM28XX_XCLK_FREQUENCY_12MHZ,
media/video/em28xx/em28xx-cards.c:		.xclk            = EM28XX_XCLK_FREQUENCY_12MHZ,
media/video/em28xx/em28xx-cards.c:		.xclk            = EM28XX_XCLK_FREQUENCY_12MHZ,
media/video/em28xx/em28xx-cards.c:		.xclk             = EM28XX_XCLK_FREQUENCY_12MHZ,
media/video/em28xx/em28xx-cards.c:		.xclk		= EM28XX_XCLK_FREQUENCY_12MHZ,
media/video/em28xx/em28xx-cards.c:		.xclk           = EM28XX_XCLK_FREQUENCY_12MHZ, /* NEC IR */
media/video/em28xx/em28xx-cards.c:		.xclk         = EM28XX_XCLK_FREQUENCY_12MHZ, /* NEC IR */
media/video/em28xx/em28xx-cards.c:		.xclk         = EM28XX_XCLK_FREQUENCY_12MHZ, /* NEC IR */
media/video/em28xx/em28xx-cards.c:		.xclk          = EM28XX_XCLK_FREQUENCY_20MHZ,
media/video/em28xx/em28xx-cards.c:		.xclk          = EM28XX_XCLK_FREQUENCY_48MHZ,
media/video/em28xx/em28xx-core.c:			      0x0000, reg, dev->urb_buf, len, HZ);
media/video/em28xx/em28xx-core.c:			      0x0000, reg, dev->urb_buf, len, HZ);
media/video/em28xx/em28xx-reg.h:#define EM28XX_I2C_FREQ_100_KHZ		0x00
media/video/em28xx/em28xx-reg.h:#define EM28XX_I2C_FREQ_1_5_MHZ		0x03 /* bus frequency (bits [1-0]) */
media/video/em28xx/em28xx-reg.h:#define EM28XX_I2C_FREQ_25_KHZ		0x02
media/video/em28xx/em28xx-reg.h:#define EM28XX_I2C_FREQ_400_KHZ		0x01
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_10MHZ	0x02
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_12MHZ	0x07
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_15MHZ	0x01
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_20MHZ	0x08
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_20MHZ_2	0x09
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_24MHZ	0x0b
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_30MHZ	0x00 /* Freq. select (bits [3-0]) */
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_4_3MHZ	0x06
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_48MHZ	0x0a
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_5MHZ	0x05
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_6MHZ	0x04
media/video/em28xx/em28xx-reg.h:#define EM28XX_XCLK_FREQUENCY_7_5MHZ	0x03
media/video/gspca/cpia1.c:		case 1:		/* V4L2_CID_POWER_LINE_FREQUENCY_50HZ */
media/video/gspca/cpia1.c:	case 1:		/* V4L2_CID_POWER_LINE_FREQUENCY_50HZ */
media/video/gspca/cpia1.c:		case 2:		/* V4L2_CID_POWER_LINE_FREQUENCY_60HZ */
media/video/gspca/cpia1.c:	case 2:		/* V4L2_CID_POWER_LINE_FREQUENCY_60HZ */
media/video/gspca/jeilinj.c:		case 1:	/* V4L2_CID_POWER_LINE_FREQUENCY_50HZ */
media/video/gspca/jeilinj.c:		case 2:	/* V4L2_CID_POWER_LINE_FREQUENCY_60HZ */
media/video/gspca/jeilinj.c:		.default_value = V4L2_CID_POWER_LINE_FREQUENCY_60HZ,
media/video/gspca/jeilinj.c:		.maximum = V4L2_CID_POWER_LINE_FREQUENCY_60HZ, /* 2 */
media/video/gspca/ov519.c:		case 1:		/* V4L2_CID_POWER_LINE_FREQUENCY_50HZ */
media/video/gspca/ov519.c:		case 2:		/* V4L2_CID_POWER_LINE_FREQUENCY_60HZ */
media/video/gspca/ov519.c:#define   OV7670_COM11_HZAUTO	 0x10	/* Auto detect 50/60 Hz */
media/video/gspca/ov519.c:			i2c_w_mask(sd, OV7670_R3B_COM11, OV7670_COM11_HZAUTO,
media/video/gspca/ov519.c:	{ OV7670_R3B_COM11, OV7670_COM11_EXP|OV7670_COM11_HZAUTO },
media/video/gspca/ov534_9.c:		case 1:		/* V4L2_CID_POWER_LINE_FREQUENCY_50HZ */
media/video/gspca/ov534_9.c:		case 2:		/* V4L2_CID_POWER_LINE_FREQUENCY_60HZ */
media/video/gspca/ov534.c:		case 1:         /* V4L2_CID_POWER_LINE_FREQUENCY_50HZ */
media/video/gspca/se401.c:		case V4L2_CID_POWER_LINE_FREQUENCY_50HZ:
media/video/gspca/se401.c:		case V4L2_CID_POWER_LINE_FREQUENCY_60HZ:
media/video/gspca/se401.c:	if (sd->ctrls[FREQ].val == V4L2_CID_POWER_LINE_FREQUENCY_50HZ)
media/video/gspca/se401.c:	if (sd->ctrls[FREQ].val == V4L2_CID_POWER_LINE_FREQUENCY_60HZ)
media/video/gspca/sonixb.c:		case 1:		/* V4L2_CID_POWER_LINE_FREQUENCY_50HZ */
media/video/gspca/sonixb.c:		case 2:		/* V4L2_CID_POWER_LINE_FREQUENCY_60HZ */
media/video/gspca/sonixj.c:		case 1:		/* V4L2_CID_POWER_LINE_FREQUENCY_50HZ */
media/video/gspca/sonixj.c:		case 2:		/* V4L2_CID_POWER_LINE_FREQUENCY_60HZ */
media/video/gspca/sq930x.c:				0xf031, 0	/* SQ930_CLKFREQ_60MHZ */
media/video/gspca/stv06xx/stv06xx_hdcs.c:	cycles = val * HDCS_CLK_FREQ_MHZ * 257;
media/video/gspca/stv06xx/stv06xx_hdcs.h:#define HDCS_CLK_FREQ_MHZ	25
media/video/gspca/vc032x.c:		{ov7660_NoFliker, ov7660_50HZ, ov7660_60HZ};
media/video/gspca/vc032x.c:static const u8 ov7660_50HZ[][4] = {
media/video/gspca/vc032x.c:static const u8 ov7660_60HZ[][4] = {
media/video/gspca/zc3xx.c:		 adcm2700_50HZ, adcm2700_50HZ,
media/video/gspca/zc3xx.c:		 adcm2700_60HZ, adcm2700_60HZ},
media/video/gspca/zc3xx.c:		case 1:		/* V4L2_CID_POWER_LINE_FREQUENCY_50HZ */
media/video/gspca/zc3xx.c:		case 2:		/* V4L2_CID_POWER_LINE_FREQUENCY_60HZ */
media/video/gspca/zc3xx.c:		 cs2102_50HZ, cs2102_50HZScale,
media/video/gspca/zc3xx.c:		 cs2102_60HZ, cs2102_60HZScale},
media/video/gspca/zc3xx.c:		 gc0303_50HZ, gc0303_50HZScale,
media/video/gspca/zc3xx.c:		 gc0303_60HZ, gc0303_60HZScale},
media/video/gspca/zc3xx.c:		 gc0305_50HZ, gc0305_50HZ,
media/video/gspca/zc3xx.c:		 gc0305_60HZ, gc0305_60HZ},
media/video/gspca/zc3xx.c:		 hdcs2020_50HZ, hdcs2020_50HZ,
media/video/gspca/zc3xx.c:		 hdcs2020_60HZ, hdcs2020_60HZ},
media/video/gspca/zc3xx.c:		 hv7131b_50HZ, hv7131b_50HZScale,
media/video/gspca/zc3xx.c:		 hv7131b_60HZ, hv7131b_60HZScale},
media/video/gspca/zc3xx.c:		 hv7131r_50HZ, hv7131r_50HZScale,
media/video/gspca/zc3xx.c:		 hv7131r_60HZ, hv7131r_60HZScale},
media/video/gspca/zc3xx.c:		 icm105a_50HZ, icm105a_50HZScale,
media/video/gspca/zc3xx.c:		 icm105a_60HZ, icm105a_60HZScale},
media/video/gspca/zc3xx.c:		 mc501cb_50HZ, mc501cb_50HZScale,
media/video/gspca/zc3xx.c:		 mc501cb_60HZ, mc501cb_60HZScale},
media/video/gspca/zc3xx.c:		 mt9v111_1_AE50HZ, mt9v111_1_AE50HZScale,
media/video/gspca/zc3xx.c:		 mt9v111_1_AE60HZ, mt9v111_1_AE60HZScale},
media/video/gspca/zc3xx.c:		 mt9v111_3_AE50HZ, mt9v111_3_AE50HZScale,
media/video/gspca/zc3xx.c:		 mt9v111_3_AE60HZ, mt9v111_3_AE60HZScale},
media/video/gspca/zc3xx.c:		 ov7620_50HZ, ov7620_50HZ,
media/video/gspca/zc3xx.c:		 ov7620_60HZ, ov7620_60HZ},
media/video/gspca/zc3xx.c:		 pas106b_50HZ, pas106b_50HZ,
media/video/gspca/zc3xx.c:		 pas106b_60HZ, pas106b_60HZ},
media/video/gspca/zc3xx.c:		 pas202b_50HZ, pas202b_50HZScale,
media/video/gspca/zc3xx.c:		 pas202b_60HZ, pas202b_60HZScale},
media/video/gspca/zc3xx.c:		 pb0330_50HZ, pb0330_50HZScale,
media/video/gspca/zc3xx.c:		 pb0330_60HZ, pb0330_60HZScale},
media/video/gspca/zc3xx.c:		 po2030_50HZ, po2030_50HZ,
media/video/gspca/zc3xx.c:		 po2030_60HZ, po2030_60HZ},
media/video/gspca/zc3xx.c:static const struct usb_action adcm2700_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action adcm2700_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action cs2102_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action cs2102_50HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action cs2102_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action cs2102_60HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action gc0303_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action gc0303_50HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action gc0303_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action gc0303_60HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action gc0305_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action gc0305_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action hdcs2020_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action hdcs2020_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action hv7131b_50HZ[] = {	/* 640x480*/
media/video/gspca/zc3xx.c:static const struct usb_action hv7131b_50HZScale[] = {	/* 320x240 */
media/video/gspca/zc3xx.c:static const struct usb_action hv7131b_60HZ[] = {	/* 640x480*/
media/video/gspca/zc3xx.c:static const struct usb_action hv7131b_60HZScale[] = {	/* 320x240 */
media/video/gspca/zc3xx.c:static const struct usb_action hv7131r_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action hv7131r_50HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action hv7131r_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action hv7131r_60HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action icm105a_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action icm105a_50HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action icm105a_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action icm105a_60HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mc501cb_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mc501cb_50HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mc501cb_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mc501cb_60HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mt9v111_1_AE50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mt9v111_1_AE50HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mt9v111_1_AE60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mt9v111_1_AE60HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mt9v111_3_AE50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mt9v111_3_AE50HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mt9v111_3_AE60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action mt9v111_3_AE60HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action ov7620_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action ov7620_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action pas106b_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action pas106b_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action pas202b_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action pas202b_50HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action pas202b_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action pas202b_60HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action pb0330_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action pb0330_50HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action pb0330_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action pb0330_60HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action po2030_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action po2030_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action tas5130c_50HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action tas5130c_50HZScale[] = {
media/video/gspca/zc3xx.c:static const struct usb_action tas5130c_60HZ[] = {
media/video/gspca/zc3xx.c:static const struct usb_action tas5130c_60HZScale[] = {
media/video/gspca/zc3xx.c:		 tas5130c_50HZ, tas5130c_50HZScale,
media/video/gspca/zc3xx.c:		 tas5130c_60HZ, tas5130c_60HZScale},
media/video/hdpvr/hdpvr-core.c:	.video_std	= HDPVR_60HZ,
media/video/hdpvr/hdpvr.h:	HDPVR_50HZ,
media/video/hdpvr/hdpvr.h:	HDPVR_60HZ = 0,
media/video/ivtv/ivtv-driver.c:			SAA7115_FREQ_24_576_MHZ, SAA7115_FREQ_FL_UCGC);
media/video/ivtv/ivtv-fileops.c:					SAA7115_FREQ_32_11_MHZ, 0);
media/video/ivtv/ivtv-fileops.c:				SAA7115_FREQ_32_11_MHZ, SAA7115_FREQ_FL_APLL);
media/video/ivtv/ivtv-i2c.c:	.timeout	= IVTV_ALGO_BIT_TIMEOUT * HZ,         /* jiffies */
media/video/ivtv/ivtv-streams.c:			 * and divide by HZ.  To avoid runtime division, we
media/video/ivtv/ivtv-streams.c:			 * convert this to multiplication by 1000/HZ.
media/video/ivtv/ivtv-streams.c:			duration = ((1000 + HZ / 2) / HZ) * (jiffies - then);
media/video/ivtv/ivtv-streams.c:			 * Think of the case where HZ is 1024.
media/video/ks0127.c:		schedule_timeout_interruptible(HZ/10+1);
media/video/marvell-ccic/cafe-driver.c:#define CAFE_SMBUS_TIMEOUT (HZ)  /* generous */
media/video/msm-bayer/gemini/msm_gemini_hw.h:#define MSM_GEMINI_PIPELINE_CLK_128MHZ 128 /* 8MP  128MHz */
media/video/msm-bayer/gemini/msm_gemini_hw.h:#define MSM_GEMINI_PIPELINE_CLK_140MHZ 140 /* 9MP  140MHz */
media/video/msm-bayer/gemini/msm_gemini_hw.h:#define MSM_GEMINI_PIPELINE_CLK_200MHZ 153 /* 12MP 153MHz */
media/video/msm-bayer/ov5640.c:	case CAMERA_ANTIBANDING_50HZ:
media/video/msm-bayer/ov5640.c:	case CAMERA_ANTIBANDING_60HZ:
media/video/msm-bayer/ov5640.c:		CDBG("--CAMERA--CAMERA_ANTIBANDING_50HZ\n");
media/video/msm-bayer/ov5640.c:		CDBG("--CAMERA--CAMERA_ANTIBANDING_60HZ\n");
media/video/msm-bayer/ov7692_qrd.c:	case CAMERA_ANTIBANDING_50HZ:
media/video/msm-bayer/ov7692_qrd.c:	case CAMERA_ANTIBANDING_60HZ:
media/video/msm-bayer/ov7692_qrd.c:		CDBG("--CAMERA--CAMERA_ANTIBANDING_50HZ\n");
media/video/msm-bayer/ov7692_qrd.c:		CDBG("--CAMERA--CAMERA_ANTIBANDING_60HZ\n");
media/video/msm-bayer/sensors/imx074_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/imx091.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/imx091.h:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/imx111.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ, // ADD
media/video/msm-bayer/sensors/imx175.c:	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
media/video/msm-bayer/sensors/imx175.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/imx175_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/jc_v4l2.c:	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
media/video/msm-bayer/sensors/jc_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/msm_sensor_bayer.c:	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
media/video/msm-bayer/sensors/msm_sensor.c:	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
media/video/msm-bayer/sensors/msm_sensor_common.h:#define MSM_SENSOR_MCLK_16HZ 16000000
media/video/msm-bayer/sensors/msm_sensor_common.h:#define MSM_SENSOR_MCLK_24HZ 24000000
media/video/msm-bayer/sensors/msm_sensor_common.h:#define MSM_SENSOR_MCLK_8HZ 8000000
media/video/msm-bayer/sensors/mt9e013_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/ov2720.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/ov5647_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/ov7692_v4l2.c:		{0x14, 0x16, 0x00, 0x00, 0xE8},},   /*ANTIBANDING 60HZ*/
media/video/msm-bayer/sensors/ov7692_v4l2.c:		{0x14, 0x17, 0x00, 0x00, 0xE8},},   /*ANTIBANDING 50HZ*/
media/video/msm-bayer/sensors/ov7692_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/ov7692_v4l2.c:		.min = MSM_V4L2_POWER_LINE_60HZ,
media/video/msm-bayer/sensors/ov7692_v4l2.c:	MSM_V4L2_POWER_LINE_50HZ,
media/video/msm-bayer/sensors/ov7692_v4l2.c:	MSM_V4L2_POWER_LINE_60HZ,
media/video/msm-bayer/sensors/ov9726_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/s5k3h5xa.c:	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
media/video/msm-bayer/sensors/s5k3h5xa.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/s5k3h5xa.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/s5k3l1yx.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/s5k4e1_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/s5k6b2yx.c:	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
media/video/msm-bayer/sensors/s5k6b2yx.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm-bayer/sensors/vx6953.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/gemini/msm_gemini_hw.h:#define MSM_GEMINI_PIPELINE_CLK_128MHZ 128 /* 8MP  128MHz */
media/video/msm/gemini/msm_gemini_hw.h:#define MSM_GEMINI_PIPELINE_CLK_140MHZ 140 /* 9MP  140MHz */
media/video/msm/gemini/msm_gemini_hw.h:#define MSM_GEMINI_PIPELINE_CLK_200MHZ 153 /* 12MP 153MHz */
media/video/msm/ov5640.c:	case CAMERA_ANTIBANDING_50HZ:
media/video/msm/ov5640.c:	case CAMERA_ANTIBANDING_60HZ:
media/video/msm/ov5640.c:		CDBG("--CAMERA--CAMERA_ANTIBANDING_50HZ\n");
media/video/msm/ov5640.c:		CDBG("--CAMERA--CAMERA_ANTIBANDING_60HZ\n");
media/video/msm/ov7692_qrd.c:	case CAMERA_ANTIBANDING_50HZ:
media/video/msm/ov7692_qrd.c:	case CAMERA_ANTIBANDING_60HZ:
media/video/msm/ov7692_qrd.c:		CDBG("--CAMERA--CAMERA_ANTIBANDING_50HZ\n");
media/video/msm/ov7692_qrd.c:		CDBG("--CAMERA--CAMERA_ANTIBANDING_60HZ\n");
media/video/msm/sensors/imx074_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/imx091.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/imx091.h:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/imx111.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ, // ADD
media/video/msm/sensors/imx135_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/jc_v4l2.c:	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
media/video/msm/sensors/jc_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/msm_sensor_bayer.c:	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
media/video/msm/sensors/msm_sensor.c:	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
media/video/msm/sensors/msm_sensor_common.h:#define MSM_SENSOR_MCLK_16HZ 16000000
media/video/msm/sensors/msm_sensor_common.h:#define MSM_SENSOR_MCLK_24HZ 24000000
media/video/msm/sensors/msm_sensor_common.h:#define MSM_SENSOR_MCLK_8HZ 8000000
media/video/msm/sensors/mt9e013_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/ov2720.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/ov5647_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/ov7692_v4l2.c:		{0x14, 0x16, 0x00, 0x00, 0xE8},},   /*ANTIBANDING 60HZ*/
media/video/msm/sensors/ov7692_v4l2.c:		{0x14, 0x17, 0x00, 0x00, 0xE8},},   /*ANTIBANDING 50HZ*/
media/video/msm/sensors/ov7692_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/ov7692_v4l2.c:		.min = MSM_V4L2_POWER_LINE_60HZ,
media/video/msm/sensors/ov7692_v4l2.c:	MSM_V4L2_POWER_LINE_50HZ,
media/video/msm/sensors/ov7692_v4l2.c:	MSM_V4L2_POWER_LINE_60HZ,
media/video/msm/sensors/ov9726_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/s5k3l1yx.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/s5k4e1_v4l2.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/s5k6b2yx.c:	{"cam_clk", MSM_SENSOR_MCLK_24HZ},
media/video/msm/sensors/s5k6b2yx.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/msm/sensors/vx6953.c:	.clk_rate = MSM_SENSOR_MCLK_24HZ,
media/video/omap24xxcam-dma.c:				expires = jiffies + HZ;
media/video/omap3isp/isp.c:				   " actual   : %ld\n", CM_CAM_MCLK_HZ, rate);
media/video/omap3isp/isp.c:			 CM_CAM_MCLK_HZ/divisor);
media/video/omap3isp/isp.c:	if (rate != CM_CAM_MCLK_HZ)
media/video/omap3isp/isph3a_af.c:	af_recover_cfg->paxel.h_start = OMAP3ISP_AF_PAXEL_HZSTART_MIN;
media/video/omap3isp/isph3a_af.c:			     OMAP3ISP_AF_PAXEL_HZSTART_MAX))
media/video/omap3isp/isph3a_af.c:			     OMAP3ISP_AF_PAXEL_HZSTART_MIN,
media/video/omap3isp/isph3a_af.c:	paxstart = conf->paxel.h_start << AF_HZ_START_SHIFT;
media/video/omap3isp/isph3a.h:#define AF_HZ_START_SHIFT		16
media/video/omap3isp/ispreg.h:#define CM_CAM_MCLK_HZ			172800000	/* Hz */
media/video/ov7670.c:	{ 0x34, 0x11 },		{ REG_COM11, COM11_EXP|COM11_HZAUTO },
media/video/ov7670.c:#define	  COM11_50HZ	  0x08	  /* Manual 50Hz select */
media/video/ov7670.c:#define   COM11_HZAUTO	  0x10	  /* Auto detect 50/60 Hz */
media/video/pvrusb2/pvrusb2-hdw.c:				       0, fw_ptr, 0x800, HZ);
media/video/pvrusb2/pvrusb2-hdw.c:						      0x800,HZ);
media/video/pvrusb2/pvrusb2-hdw.c:				    &actual_length, HZ);
media/video/pvrusb2/pvrusb2-hdw.c:				(HZ * TIME_MSEC_DECODER_STABILIZATION_WAIT /
media/video/pvrusb2/pvrusb2-hdw.c:						(HZ * TIME_MSEC_DECODER_WAIT
media/video/pvrusb2/pvrusb2-hdw.c:						(HZ * TIME_MSEC_ENCODER_WAIT
media/video/pvrusb2/pvrusb2-hdw.c:				jiffies + (HZ * TIME_MSEC_ENCODER_OK / 1000);
media/video/pvrusb2/pvrusb2-hdw.c:		result = pvr2_send_request_ex(hdw,HZ*1,!0,
media/video/pvrusb2/pvrusb2-hdw.c:	return pvr2_send_request_ex(hdw,HZ*4,0,
media/video/pvrusb2/pvrusb2-hdw.c:	ret = usb_control_msg(hdw->usb_dev,pipe,0xa0,0x40,0xe600,0,da,1,HZ);
media/video/pwc/pwc-v4l.c:				pdev->last_color_bal_update + HZ / 4))) {
media/video/pwc/pwc-v4l.c:				pdev->last_exposure_update + HZ / 4)) {
media/video/pwc/pwc-v4l.c:				pdev->last_gain_update + HZ / 4)) {
media/video/s2255drv.c:	mod_timer(&dev->timer, jiffies + HZ);
media/video/s2255drv.c:				    TransferBufferLength, HZ * 5);
media/video/s2255drv.c:				    TransferBufferLength, HZ * 5);
media/video/s5k6aa.c:#define  MAX_MCLK_FREQ_KHZ		27000U
media/video/s5k6aa.c:#define  MIN_MCLK_FREQ_KHZ		6000U
media/video/s5k6aa.c:#define REG_I_MAX_OUTRATE_4KHZ(n)	((n) * 6 + 0x01d0)
media/video/s5k6aa.c:#define REG_I_MIN_OUTRATE_4KHZ(n)	((n) * 6 + 0x01ce)
media/video/s5k6aa.c:#define REG_I_OPCLK_4KHZ(n)		((n) * 6 + 0x01cc)
media/video/s5k6aa.c:	if (WARN(fmclk < MIN_MCLK_FREQ_KHZ || fmclk > MAX_MCLK_FREQ_KHZ,
media/video/s5k6aa.c:		ret = s5k6aa_write(c, REG_I_MAX_OUTRATE_4KHZ(0),
media/video/s5k6aa.c:		ret = s5k6aa_write(c, REG_I_MIN_OUTRATE_4KHZ(0),
media/video/s5k6aa.c:		ret = s5k6aa_write(c, REG_I_OPCLK_4KHZ(0), s5k6aa->clk_fop);
media/video/s5p-fimc/fimc-capture.c:			   (2*HZ/10)); /* 200 ms */
media/video/s5p-fimc/fimc-core.h:#define FIMC_SHUTDOWN_TIMEOUT	((100*HZ)/1000)
media/video/saa7115.c:#define VRES_60HZ	(480+16)
media/video/saa7115.c:	if (freq != SAA7115_FREQ_32_11_MHZ && freq != SAA7115_FREQ_24_576_MHZ)
media/video/saa7115.c:	R_CA_B_VERT_INPUT_WINDOW_LENGTH, VRES_60HZ>>1,
media/video/saa7115.c:	R_CB_B_VERT_INPUT_WINDOW_LENGTH_MSB, VRES_60HZ>>9,
media/video/saa7115.c:		res += (VRES_60HZ - 480) >> 1;
media/video/saa7115.c:	state->crystal_freq = SAA7115_FREQ_24_576_MHZ;
media/video/saa7115.c:		state->crystal_freq = SAA7115_FREQ_32_11_MHZ;
media/video/saa7127.c:#define SAA7127_50HZ_PAL_DAC_CONTROL 0x02
media/video/saa7127.c:#define SAA7127_50HZ_SECAM_DAC_CONTROL 0x08
media/video/saa7127.c:#define SAA7127_60HZ_DAC_CONTROL 0x15
media/video/saa7127.c:		state->reg_61 = SAA7127_50HZ_PAL_DAC_CONTROL;
media/video/saa7127.c:		state->reg_61 = SAA7127_50HZ_SECAM_DAC_CONTROL;
media/video/saa7127.c:		state->reg_61 = SAA7127_60HZ_DAC_CONTROL;
media/video/saa7134/saa6752hs.c:	timeout = jiffies + HZ * 3;
media/video/saa7134/saa7134-input.c:		ir->timer.expires = jiffies + HZ;
media/video/saa7164/saa7164-cmd.c:				(HZ * waitsecs));
media/video/saa7164/saa7164-cmd.c:			r = time_before(jiffies, stamp + (HZ * waitsecs));
media/video/saa717x.c:	decoder->audio = 1; /* DECODER_AUDIO_48_KHZ */
media/video/saa717x.c:	schedule_timeout(2*HZ);
media/video/sh_mobile_ceu_camera.c:	unsigned long timeout = jiffies + 10 * HZ;
media/video/sn9c102/sn9c102_core.c:		if (sensor->frequency & SN9C102_I2C_400KHZ)
media/video/sn9c102/sn9c102_core.c:		  ((sensor->frequency & SN9C102_I2C_400KHZ) ? 0x01 : 0)
media/video/sn9c102/sn9c102_core.c:		  ((sensor->frequency & SN9C102_I2C_400KHZ) ? 0x01 : 0) |
media/video/sn9c102/sn9c102_core.c:		  ((sensor->frequency & SN9C102_I2C_400KHZ) ? 0x01 : 0) | 0x10;
media/video/sn9c102/sn9c102_hv7131d.c:	.frequency = SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_hv7131r.c:	.frequency = SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_mi0343.c:	.frequency = SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_mi0360.c:	.frequency = SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_mt9v111.c:	.frequency = SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_ov7630.c:	.frequency = SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_ov7660.c:	.frequency = SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_pas106b.c:	.frequency = SN9C102_I2C_400KHZ | SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_pas202bcb.c:	.frequency = SN9C102_I2C_400KHZ | SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_sensor.h:	SN9C102_I2C_100KHZ = 0x01,
media/video/sn9c102/sn9c102_sensor.h:	SN9C102_I2C_400KHZ = 0x02,
media/video/sn9c102/sn9c102_tas5110c1b.c:	.frequency = SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_tas5110d.c:	.frequency = SN9C102_I2C_100KHZ,
media/video/sn9c102/sn9c102_tas5130d1b.c:	.frequency = SN9C102_I2C_100KHZ,
media/video/stk-sensor.c:#define	  COM11_50HZ	  0x08	  /* Manual 50Hz select */
media/video/stk-sensor.c:#define   COM11_HZAUTO	  0x10	  /* Auto detect 50/60 Hz */
media/video/tcm825x.h:#define TCM825X_DATAHZ		0x0340
media/video/tlg2300/pd-dvb.c:		schedule_timeout(HZ);
media/video/tlg2300/pd-dvb.c:	schedule_timeout(HZ/4);
media/video/tlg2300/pd-main.c:				HZ * 10);
media/video/tlg2300/pd-radio.c:	freq =  (frequency * 125) * 500 / 1000;/* kHZ */
media/video/tlg2300/pd-radio.c:		schedule_timeout(HZ);
media/video/tlg2300/pd-radio.c:	schedule_timeout(HZ/2);
media/video/tlg2300/pd-radio.c:	schedule_timeout(HZ/4);
media/video/tlg2300/pd-video.c:		schedule_timeout(HZ);
media/video/tlg2300/pd-video.c:	schedule_timeout(HZ/2);
media/video/tlg2300/pd-video.c:	schedule_timeout(HZ/4);
media/video/tm6000/tm6000-core.c:#define USB_TIMEOUT	(5 * HZ) /* ms */
media/video/usbvision/usbvision-core.c:				0, (__u16) reg, buffer, 1, HZ);
media/video/usbvision/usbvision-core.c:				 0, (__u16) USBVISION_LXSIZE_O, value, 4, HZ);
media/video/usbvision/usbvision-core.c:				     3, HZ);
media/video/usbvision/usbvision-core.c:			     (__u16) USBVISION_DRM_PRM1, value, 8, HZ);
media/video/usbvision/usbvision-core.c:			     (__u16) USBVISION_FILT_CONT, value, 2, HZ);
media/video/usbvision/usbvision-core.c:			     (__u16) USBVISION_INTRA_CYC, value, 5, HZ);
media/video/usbvision/usbvision-core.c:			     (__u16) USBVISION_LXSIZE_I, value, 8, HZ);
media/video/usbvision/usbvision-core.c:			     (__u16) USBVISION_PCM_THR1, value, 6, HZ);
media/video/usbvision/usbvision-core.c:				USB_RECIP_ENDPOINT, 0, (__u16) reg, &value, 1, HZ);
media/video/usbvision/usbvision.h:#define USBVISION_POWEROFF_TIME		(3 * HZ)		/* 3 seconds */
media/video/usbvision/usbvision.h:	interruptible_sleep_on_timeout(&wq, HZ * 3); \
media/video/usbvision/usbvision-i2c.c:				     len + 2, HZ);
media/video/zoran/zoran_card.c:		dprintk(1, ": time spent: %d\n", 1 * HZ - timeout);
media/video/zoran/zoran_card.c:	timeout = schedule_timeout(HZ);
media/video/zoran/zoran_driver.c:			10*HZ)) {
media/video/zoran/zoran_driver.c:		(zr->v4l_buffers.buffer[frame].state != BUZ_STATE_PEND), 10*HZ))
memstick/host/jmb38x_ms.c:			clock_ctl |= CLOCK_CONTROL_40MHZ;
memstick/host/jmb38x_ms.c:			clock_ctl |= CLOCK_CONTROL_40MHZ;
memstick/host/jmb38x_ms.c:			clock_ctl |= CLOCK_CONTROL_50MHZ;
memstick/host/jmb38x_ms.c:#define CLOCK_CONTROL_40MHZ   0x00000001
memstick/host/jmb38x_ms.c:#define CLOCK_CONTROL_50MHZ   0x00000002
memstick/host/jmb38x_ms.c:#define CLOCK_CONTROL_60MHZ   0x00000010
memstick/host/jmb38x_ms.c:#define CLOCK_CONTROL_62_5MHZ 0x00000004
message/fusion/mptbase.c:	cntdn = ((sleepFlag == CAN_SLEEP) ? HZ : 1000) * 15;	/* 15 seconds */
message/fusion/mptbase.c:	cntdn = ((sleepFlag == CAN_SLEEP) ? HZ : 1000) * 2;	/* 2 seconds */
message/fusion/mptbase.c:	cntdn = ((sleepFlag == CAN_SLEEP) ? HZ : 1000) * 5;	/* 5 seconds */
message/fusion/mptbase.c:	cntdn = ((sleepFlag == CAN_SLEEP) ? HZ : 1000) * 60;	/* 60 seconds */
message/fusion/mptbase.c:	for (count=0; count<HZ*20; count++) {
message/fusion/mptbase.c:					ioc->name, (int)((count+5)/HZ));
message/fusion/mptbase.c:				ioc->name, ioc_state, (int)((ii+5)/HZ));
message/fusion/mptbase.c:			    ioc->name, state, (int)((count+5)/HZ));
message/fusion/mptbase.c:	timeleft = wait_for_completion_timeout(&ioc->mptbase_cmds.done, 10*HZ);
message/fusion/mptbase.c:	timeout = (pCfg->timeout < 15) ? HZ*15 : HZ*pCfg->timeout;
message/fusion/mptctl.c:			HZ*MPT_IOCTL_DEFAULT_TIMEOUT);
message/fusion/mptctl.c:				HZ*timeout);
message/fusion/mptctl.c:	ii = wait_for_completion_timeout(&ioc->taskmgmt_cmds.done, timeout*HZ);
message/fusion/mptctl.c:	timeleft = wait_for_completion_timeout(&iocp->ioctl_cmds.done, HZ*60);
message/fusion/mptlan.c:	timeout = jiffies + 2 * HZ;
message/fusion/mptlan.h:#define MPT_LAN_TX_TIMEOUT	(1*HZ)
message/fusion/mptsas.c:			10 * HZ);
message/fusion/mptsas.c:			delay = HZ * ioc->device_missing_delay;
message/fusion/mptsas.c:	timeleft = wait_for_completion_timeout(&ioc->sas_mgmt.done, 10 * HZ);
message/fusion/mptsas.c:	timeleft = wait_for_completion_timeout(&ioc->sas_mgmt.done, 10 * HZ);
message/fusion/mptsas.c:	    timeout*HZ);
message/fusion/mptscsih.c:	if (time - hd->last_queue_full > 10 * HZ) {
message/fusion/mptscsih.c:	    timeout*HZ);
message/fusion/mptscsih.c:		timeout*HZ);
message/fusion/mptspi.c:	timeleft = wait_for_completion_timeout(&ioc->internal_cmds.done, 10*HZ);
message/i2o/exec-osm.c:#include <asm/param.h>		/* HZ */
message/i2o/exec-osm.c:	wait_event_interruptible_timeout(wq, wait->complete, timeout * HZ);
message/i2o/i2o_block.h:#define I2O_BLOCK_RETRY_TIME HZ/4
message/i2o/iop.c:	timeout = jiffies + I2O_TIMEOUT_INIT_OUTBOUND_QUEUE * HZ;
message/i2o/iop.c:	timeout = jiffies + I2O_TIMEOUT_RESET * HZ;
message/i2o/iop.c:	timeout = jiffies + I2O_TIMEOUT_STATUS_GET * HZ;
message/i2o/iop.c:	unsigned long timeout = jiffies + wait * HZ;
mfd/ab8500-gpadc.c:	if (!wait_for_completion_timeout(&gpadc->ab8500_gpadc_complete, 2*HZ)) {
mfd/db5500-prcmu.c:/* TVCLK_MGT PLLSW=001 (PLLSOC0) PLLDIV=0x13, = 19.05 MHZ */
mfd/mc13xxx-core.c:#define MC13XXX_IRQMASK1_1HZM		MC13XXX_IRQSTAT1_1HZI
mfd/mc13xxx-core.c:#define MC13XXX_IRQSTAT1_1HZI		(1 << 0)
mfd/mc13xxx-core.c:	ret = wait_for_completion_interruptible_timeout(&adcdone_data.done, HZ);
mfd/pm8xxx-pwm.c:#define NSEC_1024HZ	(NSEC_PER_SEC / 1024)
mfd/pm8xxx-pwm.c:#define NSEC_19P2MHZ	(NSEC_PER_SEC / 19200000)
mfd/pm8xxx-pwm.c:#define NSEC_32768HZ	(NSEC_PER_SEC / 32768)
mfd/pm8xxx-pwm.c:#define PM8XXX_PWM_1KHZ_COUNT_MASK	0xF0
mfd/pm8xxx-pwm.c:#define PM8XXX_PWM_1KHZ_COUNT_MAX	15
mfd/pm8xxx-pwm.c:#define PM8XXX_PWM_1KHZ_COUNT_SHIFT	4
mfd/pm8xxx-pwm.c:#define PM8XXX_PWM_CLK_SEL_19P2MHZ	3
mfd/pm8xxx-pwm.c:#define PM8XXX_PWM_CLK_SEL_1KHZ		1
mfd/pm8xxx-pwm.c:#define PM8XXX_PWM_CLK_SEL_32KHZ	2
mfd/pm8xxx-pwm.c:	for (i = 0; i < PM8XXX_PWM_1KHZ_COUNT_MAX; i++) {
mfd/pm8xxx-pwm.c:	mask = PM8XXX_PWM_1KHZ_COUNT_MASK;
mfd/pm8xxx-pwm.c:				>> PM8XXX_PWM_1KHZ_COUNT_SHIFT;
mfd/pm8xxx-pwm.c:	{	PRE_DIVIDE_2 * NSEC_1024HZ,
mfd/pm8xxx-pwm.c:		PRE_DIVIDE_2 * NSEC_19P2MHZ,
mfd/pm8xxx-pwm.c:		PRE_DIVIDE_2 * NSEC_32768HZ,
mfd/pm8xxx-pwm.c:	{	PRE_DIVIDE_3 * NSEC_1024HZ,
mfd/pm8xxx-pwm.c:		PRE_DIVIDE_3 * NSEC_19P2MHZ,
mfd/pm8xxx-pwm.c:		PRE_DIVIDE_3 * NSEC_32768HZ,
mfd/pm8xxx-pwm.c:	{	PRE_DIVIDE_5 * NSEC_1024HZ,
mfd/pm8xxx-pwm.c:		PRE_DIVIDE_5 * NSEC_19P2MHZ,
mfd/pm8xxx-pwm.c:		PRE_DIVIDE_5 * NSEC_32768HZ,
mfd/pm8xxx-pwm.c:	{	PRE_DIVIDE_6 * NSEC_1024HZ,
mfd/pm8xxx-pwm.c:		PRE_DIVIDE_6 * NSEC_19P2MHZ,
mfd/pm8xxx-pwm.c:		PRE_DIVIDE_6 * NSEC_32768HZ,
mfd/pm8xxx-pwm.c:static const u16 duty_msec[PM8XXX_PWM_1KHZ_COUNT_MAX + 1] = {
mfd/pm8xxx-pwm.c:	time_cnt = (pwm->pwm_lpg_ctl[0] & PM8XXX_PWM_1KHZ_COUNT_MASK)
mfd/pm8xxx-pwm.c:	val = i << PM8XXX_PWM_1KHZ_COUNT_SHIFT;
mfd/sm501.c:#define fmt_freq(x) ((x) / MHZ), ((x) % MHZ), (x)
mfd/sm501.c:#define MHZ (1000 * 1000)
mfd/sm501.c:	 * for 33MHZ PCI with proper bus-mastering operation */
mfd/sm501.c:	.m1xclk		= 144 * MHZ,
mfd/sm501.c:	.mclk		= 72 * MHZ,
mfd/sm501.c:		pll2 = 192 * MHZ;
mfd/sm501.c:		pll2 = 240 * MHZ;
mfd/sm501.c:		pll2 = 288 * MHZ;
mfd/sm501.c:		pll2 = 288 * MHZ;
mfd/sm501.c:		pll2 = 336 * MHZ;
mfd/sm501.c:	sdclk0 = (misct & (1<<12)) ? pll2 : 288 * MHZ;
mfd/sm501.c:	sdclk1 = (misct & (1<<20)) ? pll2 : 288 * MHZ;
mfd/twl4030-audio.c:		val |= TWL4030_APLL_INFREQ_19200KHZ;
mfd/twl4030-audio.c:		val |= TWL4030_APLL_INFREQ_26000KHZ;
mfd/twl4030-audio.c:		val |= TWL4030_APLL_INFREQ_38400KHZ;
mfd/twl6040-core.c:				hppllctl |= TWL6040_MCLK_12000KHZ |
mfd/twl6040-core.c:				hppllctl |= TWL6040_MCLK_19200KHZ;
mfd/twl6040-core.c:				hppllctl |= TWL6040_MCLK_26000KHZ |
mfd/twl6040-core.c:				hppllctl |= TWL6040_MCLK_38400KHZ |
mfd/twl-core.c:		ctrl = HFCLK_FREQ_19p2_MHZ;
mfd/twl-core.c:		ctrl = HFCLK_FREQ_26_MHZ;
mfd/twl-core.c:		ctrl = HFCLK_FREQ_38p4_MHZ;
mfd/twl-core.c:#define HFCLK_FREQ_19p2_MHZ		(1 << 0)
mfd/twl-core.c:#define HFCLK_FREQ_26_MHZ		(2 << 0)
mfd/twl-core.c:#define HFCLK_FREQ_38p4_MHZ		(3 << 0)
mfd/twl-core.c:	u8 ctrl = HFCLK_FREQ_26_MHZ;
mfd/ucb1x00-ts.c:			timeout = HZ / 100;
mfd/wcd9xxx-core.c:					 HZ))) {
mfd/wcd9xxx-slimslave.c:	prop.baser = SLIM_RATE_4000HZ;
mfd/wcd9xxx-slimslave.c:	prop.baser = SLIM_RATE_4000HZ;
misc/bcm2079x-i2c.c:	wake_lock_timeout(&bcm2079x_dev->bcm_wake_lock, 2 * HZ);
misc/bmp085.c:			time_is_before_jiffies(data->last_temp_measurement + 1*HZ)) {
misc/carma/carma-fpga-program.c:	ret = wait_for_completion_timeout(&priv->completion, 2 * HZ);
misc/carma/carma-fpga-program.c:	ret = wait_for_completion_timeout(&priv->completion, 2 * HZ);
misc/carma/carma-fpga-program.c:		timeout = jiffies + HZ / 4;
misc/carma/carma-fpga-program.c:	while (time_before(jiffies, start + HZ)) {
misc/carma/carma-fpga-program.c:	while (time_before(jiffies, start + HZ)) {
misc/eeprom/at24.c:		/* REVISIT: at HZ=100, this is sloooow */
misc/eeprom/at24.c:		/* REVISIT: at HZ=100, this is sloooow */
misc/eeprom/at25.c:				/* at HZ=100, this is sloooow */
misc/eeprom/eeprom.c:	    time_after(jiffies, data->last_updated[slice] + 300 * HZ)) {
misc/ibmasm/command.c:				timeout * HZ);
misc/ibmasm/r_heartbeat.c:			REVERSE_HEARTBEAT_TIMEOUT * HZ);
misc/ics932s401.c:#define LIMIT_REFRESH_INTERVAL	(60 * HZ)
misc/ics932s401.c:#define SENSOR_REFRESH_INTERVAL	(2 * HZ)
misc/inv_mpu/accel/mpu6050.c:		lpa_freq = BITS_LPA_WAKE_10HZ;
misc/inv_mpu/accel/mpu6050.c:		lpa_freq = BITS_LPA_WAKE_1HZ;
misc/inv_mpu/accel/mpu6050.c:		lpa_freq = BITS_LPA_WAKE_2HZ;
misc/inv_mpu/accel/mpu6050.c:		lpa_freq = BITS_LPA_WAKE_40HZ;
misc/inv_mpu/mldl_cfg.c:		data |= (BITS_LPA_WAKE_10HZ);
misc/inv_mpu/mldl_cfg.c:	mldl_cfg->mpu_gyro_cfg->lpf = MPU_FILTER_42HZ;
misc/inv_mpu/mpu6050b1.h:#define	BITS_LPA_WAKE_10HZ			0x80
misc/inv_mpu/mpu6050b1.h:#define	BITS_LPA_WAKE_1HZ			0x00
misc/inv_mpu/mpu6050b1.h:#define	BITS_LPA_WAKE_2HZ			0x40
misc/inv_mpu/mpu6050b1.h:#define	BITS_LPA_WAKE_40HZ			0xC0
misc/inv_mpu/mpu6050b1.h:	MPU_FILTER_10HZ,
misc/inv_mpu/mpu6050b1.h:	MPU_FILTER_188HZ,
misc/inv_mpu/mpu6050b1.h:	MPU_FILTER_20HZ,
misc/inv_mpu/mpu6050b1.h:	MPU_FILTER_2100HZ_NOLPF,
misc/inv_mpu/mpu6050b1.h:	MPU_FILTER_256HZ_NOLPF2 = 0,
misc/inv_mpu/mpu6050b1.h:	MPU_FILTER_42HZ,
misc/inv_mpu/mpu6050b1.h:	MPU_FILTER_5HZ,
misc/inv_mpu/mpu6050b1.h:	MPU_FILTER_98HZ,
misc/inv_mpu/mpu6050_selftest.c:		MPU_FILTER_188HZ);
misc/inv_mpu/mpu-dev.c:		mpu->timeout.expires = jiffies + mpu->response_timeout * HZ;
misc/ioc4.c:	(1000*IOC4_EXTINT_COUNT_DIVISOR/IOC4_CALIBRATE_DEFAULT_MHZ)
misc/ioc4.c:	(1000*IOC4_EXTINT_COUNT_DIVISOR/IOC4_CALIBRATE_HIGH_MHZ)
misc/ioc4.c:	(1000*IOC4_EXTINT_COUNT_DIVISOR/IOC4_CALIBRATE_LOW_MHZ)
misc/ioc4.c:#define IOC4_CALIBRATE_DEFAULT_MHZ 66	/* Assumed if sanity check fails */
misc/ioc4.c:#define IOC4_CALIBRATE_HIGH_MHZ 75	/* Upper bound on bus speed sanity */
misc/ioc4.c:#define IOC4_CALIBRATE_LOW_MHZ 25	/* Lower bound on bus speed sanity */
misc/iwmc3200top/main.c:	dev_dbg(&func->dev, "IRQ polling period id %u msecs, HZ is %d\n",
misc/iwmc3200top/main.c:		jiffies_to_msecs(2147483647), HZ);
misc/lis3lv02d/lis3lv02d.c: * Note that 40Hz input device can eat up about 10% CPU at 800MHZ
misc/pch_phub.c:					       CLKCFG_CAN_50MHZ,
misc/pch_phub.c:						CLKCFG_UART_48MHZ | CLKCFG_BAUDDIV |
misc/pch_phub.c:#define CLKCFG_CAN_50MHZ 0x12000000
misc/pch_phub.c:#define CLKCFG_UART_48MHZ			(1 << 16)
misc/pmic8058-pwm.c:#define	CLK_PERIOD_MAX	NSEC_1000HZ
misc/pmic8058-pwm.c:#define	CLK_PERIOD_MIN	NSEC_19P2MHZ
misc/pmic8058-pwm.c:#define	NSEC_1000HZ	(NSEC_PER_SEC / 1000)
misc/pmic8058-pwm.c:#define	NSEC_19P2MHZ	(NSEC_PER_SEC / 19200000)
misc/pmic8058-pwm.c:#define	NSEC_32768HZ	(NSEC_PER_SEC / 32768)
misc/pmic8058-pwm.c:#define	PM8058_PWM_1KHZ_COUNT_MASK	0xF0
misc/pmic8058-pwm.c:#define	PM8058_PWM_1KHZ_COUNT_MAX	15
misc/pmic8058-pwm.c:#define	PM8058_PWM_1KHZ_COUNT_SHIFT	4
misc/pmic8058-pwm.c:#define	PM8058_PWM_CLK_SEL_19P2MHZ	3
misc/pmic8058-pwm.c:#define	PM8058_PWM_CLK_SEL_1KHZ		1
misc/pmic8058-pwm.c:#define	PM8058_PWM_CLK_SEL_32KHZ	2
misc/pmic8058-pwm.c:	for (i = 0; i < PM8058_PWM_1KHZ_COUNT_MAX; i++) {
misc/pmic8058-pwm.c:	mask = PM8058_PWM_1KHZ_COUNT_MASK;
misc/pmic8058-pwm.c:				>> PM8058_PWM_1KHZ_COUNT_SHIFT;
misc/pmic8058-pwm.c:	{	PRE_DIVIDE_0 * NSEC_1000HZ,
misc/pmic8058-pwm.c:		PRE_DIVIDE_0 * NSEC_19P2MHZ,
misc/pmic8058-pwm.c:		PRE_DIVIDE_0 * NSEC_32768HZ,
misc/pmic8058-pwm.c:	{	PRE_DIVIDE_1 * NSEC_1000HZ,
misc/pmic8058-pwm.c:		PRE_DIVIDE_1 * NSEC_19P2MHZ,
misc/pmic8058-pwm.c:		PRE_DIVIDE_1 * NSEC_32768HZ,
misc/pmic8058-pwm.c:	{	PRE_DIVIDE_2 * NSEC_1000HZ,
misc/pmic8058-pwm.c:		PRE_DIVIDE_2 * NSEC_19P2MHZ,
misc/pmic8058-pwm.c:		PRE_DIVIDE_2 * NSEC_32768HZ,
misc/pmic8058-pwm.c:static u16 duty_msec[PM8058_PWM_1KHZ_COUNT_MAX + 1] = {
misc/pmic8058-pwm.c:	time_cnt = (pwm->pwm_ctl[0] & PM8058_PWM_1KHZ_COUNT_MASK)
misc/pmic8058-pwm.c:	val = i << PM8058_PWM_1KHZ_COUNT_SHIFT;
misc/pn547.c:	wake_lock_timeout(&pn547_dev->nfc_wake_lock, 2*HZ);
misc/sec_jack.c:#define WAKE_LOCK_TIME		(HZ * 5)	/* 5 sec */
misc/sgi-gru/grutables.h:#define GRU_ASSIGN_DELAY	((HZ * 20) / 1000)
misc/sgi-gru/grutables.h:#define GRU_STEAL_DELAY		((HZ * 200) / 1000)
misc/sgi-xp/xpc.h:#define XPC_DROPPED_NOTIFY_IRQ_WAIT_INTERVAL	(0.25 * HZ)
misc/sgi-xp/xpc_main.c:					 jiffies) / HZ);
misc/sgi-xp/xpc_main.c:	printmsg_time = jiffies + (XPC_DEACTIVATE_PRINTMSG_INTERVAL * HZ);
misc/sgi-xp/xpc_main.c:				    (XPC_DEACTIVATE_PRINTMSG_INTERVAL * HZ);
misc/sgi-xp/xpc_main.c:			    (xpc_hb_check_interval * HZ);
misc/sgi-xp/xpc_main.c:	xpc_hb_check_timeout = jiffies + (xpc_hb_check_interval * HZ);
misc/sgi-xp/xpc_main.c:	xpc_hb_timer.expires = jiffies + (xpc_hb_interval * HZ);
misc/sgi-xp/xpc_partition.c:	part->disengage_timeout = jiffies + (xpc_disengage_timelimit * HZ);
misc/slimport_anx7808/slimport.c:		wake_lock_timeout(&anx7808->slimport_lock, 2*HZ);
misc/tifm_7xx1.c:		rc = wait_for_completion_timeout(&finish_resume, HZ);
misc/tspdrv/VibeOSKernelLinuxTime.c:#if (HZ != 1000)
misc/tspp.c:#define MSEC_TO_JIFFIES(msec)			((msec) * HZ / 1000)
misc/vmw_balloon.c:			   dwork, round_jiffies_relative(HZ));
mmc/card/queue.c:		        mmc_set_nopacked_period(mq, HZ);
mmc/card/queue.c:			    mmc_set_nopacked_period(mq, HZ);
mmc/core/core.c:		mmc_schedule_delayed_work(&host->detect, HZ);
mmc/core/core.c:		wake_lock_timeout(&host->detect_wake_lock, HZ / 2);
mmc/core/core.h:	if (ms < 1000 / HZ) {
mmc/core/sdio_cis.c:		func->enable_timeout = jiffies_to_msecs(HZ);
mmc/core/sdio_irq.c:				schedule_timeout(HZ);
mmc/host/au1xmmc.c:#define AU1XMMC_DETECT_TIMEOUT (HZ/2)
mmc/host/cb710-mmc.c:			mmc_detect_change(mmc, HZ/5);
mmc/host/dw_mmc.c:			 "Bus speed (slot %d) = %dHz (slot req %dHz, actual %dHZ"
mmc/host/imxmmc.c:	mod_timer(&host->timer, jiffies + (HZ>>1));
mmc/host/imxmmc.c:	mod_timer(&host->timer, jiffies + (HZ >> 1));
mmc/host/jz4740_mmc.c:	mmc_detect_change(host->mmc, HZ / 2);
mmc/host/jz4740_mmc.c:		mod_timer(&host->timeout_timer, jiffies + 5*HZ);
mmc/host/jz4740_mmc.c:	mod_timer(&host->timeout_timer, jiffies + 5*HZ);
mmc/host/jz4740_mmc.c:	set_timer_slack(&host->timeout_timer, HZ);
mmc/host/mmc_spi.c:#define r1b_timeout		(HZ * 3)
mmc/host/mvsdio.c:				   hw_state, count, jiffies - (t - HZ));
mmc/host/mvsdio.c:	mod_timer(&host->timer, jiffies + 5 * HZ);
mmc/host/mvsdio.c:		unsigned long t = jiffies + HZ;
mmc/host/mxcmmc.c:	unsigned long timeout = jiffies + HZ;
mmc/host/mxs-mmc.c:#define MXS_MMC_DETECT_TIMEOUT			(HZ/2)
mmc/host/omap.c:		mod_timer(&host->clk_timer, jiffies  + HZ/10);
mmc/host/omap.c:	mod_timer(&host->cmd_abort_timer, jiffies + HZ/2);
mmc/host/omap.c:	mod_timer(&host->dma_timer, jiffies + HZ);
mmc/host/omap_hsmmc.c:		mmc_detect_change(host->mmc, (HZ * 200) / 1000);
mmc/host/omap_hsmmc.c:		mmc_detect_change(host->mmc, (HZ * 50) / 1000);
mmc/host/sdhci.c:				host->tuning_count * HZ);
mmc/host/sdhci.c:			host->tuning_count * HZ);
mmc/host/sdhci.c:	mod_timer(&host->timer, jiffies + 10 * HZ);
mmc/host/via-sdmmc.c:	mod_timer(&host->timer, jiffies + HZ);
mmc/host/vub300.c:				0x0000, 0x0000, NULL, 0, HZ);
mmc/host/vub300.c:				0x0001, 0x0000, NULL, 0, HZ);
mmc/host/vub300.c:				0x00, 0x00, buf, buf_array_size, HZ);
mmc/host/vub300.c:				firmware_rom_wait_states, 0x0000, NULL, 0, HZ);
mmc/host/vub300.c:			mod_timer(&vub300->inactivity_timer, jiffies + HZ);
mmc/host/vub300.c:		mod_timer(&vub300->inactivity_timer, jiffies + HZ);
mmc/host/vub300.c:		mod_timer(&vub300->inactivity_timer, jiffies + HZ);
mmc/host/vub300.c:		mod_timer(&vub300->inactivity_timer, jiffies + HZ);
mmc/host/vub300.c:	mod_timer(&vub300->inactivity_timer, jiffies + HZ);
mmc/host/vub300.c:	mod_timer(&vub300->inactivity_timer, jiffies + HZ);
mmc/host/vub300.c:				sizeof(vub300->hc_info), HZ);
mmc/host/vub300.c:				sizeof(vub300->system_port_status), HZ);
mmc/host/vub300.c:				sizeof(vub300->system_port_status), HZ);
mmc/host/vub300.c:	vub300->inactivity_timer.expires = jiffies + HZ;
mmc/host/vub300.c:			vub300_queue_poll_work(vub300, HZ / 5);
mmc/host/vub300.c:						xfer_buffer, xfer_length, HZ);
mmc/host/vub300.c:						xfer_buffer, xfer_length, HZ);
mmc/host/wbsd.c:			mod_timer(&host->ignore_timer, jiffies + HZ / 100);
mtd/chips/cfi_cmdset_0001.c:		} else if (usec >= 1000000/HZ) {
mtd/chips/cfi_cmdset_0001.c:		if (sleep_time >= 1000000/HZ) {
mtd/chips/cfi_cmdset_0001.c:			sleep_time = 1000000/HZ;
mtd/chips/cfi_cmdset_0001.c:	udelay = (!extp || !(extp->FeatureSupport & (1 << 5))) ? 1000000/HZ : 0;
mtd/chips/cfi_cmdset_0001.c:	unsigned long timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0002.c:		const unsigned long timeo = (HZ / 1000) + 1;
mtd/chips/cfi_cmdset_0002.c:	const unsigned long uWriteTimeout = (HZ / 1000) + 1;
mtd/chips/cfi_cmdset_0002.c:		} else if (usec >= 1000000/HZ) {
mtd/chips/cfi_cmdset_0002.c:		timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0002.c:	timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0002.c:	timeo = jiffies + (HZ*20);
mtd/chips/cfi_cmdset_0002.c:	timeo = jiffies + (HZ*20);
mtd/chips/cfi_cmdset_0002.c:			timeo = jiffies + (HZ*20); /* FIXME */
mtd/chips/cfi_cmdset_0002.c:			timeo = jiffies + (HZ*20); /* FIXME */
mtd/chips/cfi_cmdset_0002.c:			timeo = jiffies + (HZ / 2); /* FIXME */
mtd/chips/cfi_cmdset_0002.c:			timeo = jiffies + (HZ / 2); /* FIXME */
mtd/chips/cfi_cmdset_0002.c:	 * timeout of 0 jiffies if HZ is smaller than 1000.
mtd/chips/cfi_cmdset_0002.c:		UDELAY(map, chip, adr, 1000000/HZ);
mtd/chips/cfi_cmdset_0002.c:		UDELAY(map, chip, adr, 1000000/HZ);
mtd/chips/cfi_cmdset_0002.c:	unsigned long timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0002.c:	unsigned long timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0002.c:	unsigned long timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0002.c:	unsigned long timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0002.c:	unsigned long timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0002.c:	unsigned long uWriteTimeout = ( HZ / 1000 ) + 1;
mtd/chips/cfi_cmdset_0002.c:	unsigned long uWriteTimeout = ( HZ / 1000 ) + 1;
mtd/chips/cfi_cmdset_0020.c:				timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:		timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:		timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:		timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:		timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:		timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:	timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:	timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:	timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:	timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:	timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:	timeo = jiffies + (HZ/2);
mtd/chips/cfi_cmdset_0020.c:	timeo = jiffies + (HZ*2);
mtd/chips/cfi_cmdset_0020.c:	timeo = jiffies + (HZ*2);
mtd/chips/cfi_cmdset_0020.c:	timeo = jiffies + (HZ*20);
mtd/chips/cfi_cmdset_0020.c:			timeo = jiffies + (HZ*20); /* FIXME */
mtd/chips/cfi_cmdset_0020.c:			timeo = jiffies + (HZ / 2); /* FIXME */
mtd/chips/cfi_cmdset_0020.c:	unsigned long timeo = jiffies + HZ;
mtd/chips/cfi_cmdset_0020.c:	unsigned long timeo = jiffies + HZ;
mtd/devices/doc2000.c:	unsigned long timeo = jiffies + (HZ * 10);
mtd/devices/m25p80.c:#define	MAX_READY_WAIT_JIFFIES	(40 * HZ)	/* M25P16 specs 40s max chip erase */
mtd/devices/spear_smi.c:#define SMI_CMD_TIMEOUT		(HZ / 10)
mtd/devices/spear_smi.c:#define SMI_MAX_TIME_OUT	(3 * HZ)
mtd/devices/spear_smi.c:#define SMI_PROBE_TIMEOUT	(HZ / 10)
mtd/lpddr/lpddr_cmds.c:		if (sleep_time >= 1000000/HZ) {
mtd/lpddr/lpddr_cmds.c:			sleep_time = 1000000/HZ;
mtd/maps/octagon-5066.c:   The Octagon 5066 is a SBC based on AMD's 586-WB running at 133 MHZ. It
mtd/maps/vmu-flash.c:				atomic_read(&mdev->busy) == 0, HZ);
mtd/maps/vmu-flash.c:				atomic_read(&mdev->busy) == 0, HZ);
mtd/maps/vmu-flash.c:			atomic_read(&mdev->busy) == 0, HZ);
mtd/maps/vmu-flash.c:			atomic_read(&mdev->busy) == 0, HZ/10);
mtd/maps/vmu-flash.c:			atomic_read(&mdev->busy) == 2), HZ * 3);
mtd/maps/vmu-flash.c:			time_before(jiffies, pcache->jiffies_atc + HZ) &&
mtd/nand/alauda.c:			ALAUDA_ACK_XD_MEDIA_CHANGE, 0x40, 0, 1, NULL, 0, HZ);
mtd/nand/alauda.c:			ALAUDA_GET_XD_MEDIA_SIG, 0xc0, 0, 0, buf, 4, HZ);
mtd/nand/alauda.c:			ALAUDA_GET_XD_MEDIA_STATUS, 0xc0, 0, 1, buf, 2, HZ);
mtd/nand/alauda.c:#define TIMEOUT HZ
mtd/nand/alauda.c:	usb_bulk_msg(al->dev, al->bulk_out, command, 9, NULL, HZ);
mtd/nand/diskonchip.c:	unsigned long timeo = jiffies + (HZ * 10);
mtd/nand/fsl_elbc_nand.c:	                   FCM_TIMEOUT_MSECS * HZ/1000);
mtd/nand/fsl_ifc_nand.c:			   IFC_TIMEOUT_MSECS * HZ/1000);
mtd/nand/mpc5121_nfc.c:#define NFC_TIMEOUT		(HZ / 10)	/* 1/10 s */
mtd/nand/nand_base.c:		timeo += (HZ * 20) / 1000;
mtd/nand/nand_base.c:		timeo += (HZ * 400) / 1000;
mtd/nand/omap2.c:		timeo += (HZ * 20) / 1000;
mtd/nand/omap2.c:		timeo += (HZ * 400) / 1000;
mtd/nand/pxa3xx_nand.c:#define	CHIP_DELAY_TIMEOUT	(2 * HZ/10)
mtd/nand/pxa3xx_nand.c:#define NAND_STOP_DELAY		(2 * HZ/50)
mtd/nand/s3c2410.c:#define NS_IN_KHZ 1000000
mtd/nand/s3c2410.c:#define to_ns(ticks,clk) (((ticks) * NS_IN_KHZ) / (unsigned int)(clk))
mtd/nand/s3c2410.c:	result = DIV_ROUND_UP((wanted * clk), NS_IN_KHZ);
net/appletalk/cops.c:		    cops_timer.expires 	= jiffies + HZ/20;
net/appletalk/cops.c:	cops_timer.expires = jiffies + HZ/20;
net/appletalk/cops.c:	dev->watchdog_timeo	= HZ * 2;
net/appletalk/ltpc.c:		ltpc_timer.expires = jiffies + HZ/20;
net/appletalk/ltpc.c:	ltpc_timer.expires = jiffies + HZ/20;
net/appletalk/ltpc.c:	timeout = jiffies+100*HZ/100;
net/appletalk/ltpc.c:	timeout = jiffies+100*HZ/100;
net/arcnet/arcnet.c:	if (time_after(jiffies, lp->last_timeout + 10*HZ)) {
net/arcnet/arcnet.c:				 (lp->last_recon - lp->first_recon) / HZ,
net/arcnet/arcnet.c:				    (lp->last_recon - lp->first_recon) <= HZ * 60 &&
net/arcnet/arcnet.c:					   lp->last_recon - lp->first_recon > HZ * 60) {
net/arcnet/arcnet.c:			    time_after(jiffies, lp->last_recon + HZ * 10)) {
net/arcnet/arcnet.c:				time_after(jiffies, lp->last_recon + HZ * 10)) {
net/bonding/bond_3ad.c:static const int ad_delta_in_ticks = (AD_TIMER_INTERVAL * HZ) / 1000;
net/bonding/bond_alb.c:static const int alb_delta_in_ticks = HZ / ALB_TIMER_TICKS_PER_SEC;
net/bonding/bond_alb.h:#define ALB_TIMER_TICKS_PER_SEC	    10	/* should be a divisor of HZ */
net/bonding/bond_main.c:		queue_delayed_work(bond->wq, &bond->mcast_work, HZ/5);
net/caif/caif_hsi.c:				inactivity_timeout * HZ / 1000;
net/caif/caif_hsi.c:		ret = 5 * HZ;
net/can/dev.c:			  jiffies + (priv->restart_ms * HZ) / 1000);
net/can/janz-ican3.c:	ret = wait_for_completion_timeout(&mod->buserror_comp, HZ);
net/can/janz-ican3.c:	ret = wait_for_completion_timeout(&mod->termination_comp, HZ);
net/can/janz-ican3.c:	} while (time_before(jiffies, start + HZ / 4));
net/can/mcp251x.c:		timeout = jiffies + HZ;
net/can/mcp251x.c:	timeout = jiffies + HZ;
net/can/sja1000/peak_pci.c:		card->i2c_bit.timeout = HZ;
net/can/sja1000/peak_pci.c:#define PCA9553_OFF		PCA9553_HIGHZ
net/can/sja1000/peak_pci.c:	PCA9553_HIGHZ,
net/can/sja1000/peak_pci.c:		schedule_delayed_work(&card->led_work, HZ);
net/can/sja1000/peak_pci.c:		schedule_delayed_work(&card->led_work, HZ);
net/can/sja1000/peak_pci.c:	.timeout = HZ,
net/can/sja1000/peak_pcmcia.c:		mod_timer(&card->led_timer, jiffies + HZ);
net/can/sja1000/peak_pcmcia.c:		mod_timer(&card->led_timer, jiffies + HZ);
net/can/slcan.c:	unsigned long timeout = jiffies + HZ;
net/can/softing/softing_cs.c:#define MHZ (1000*1000)
net/can/softing/softing_cs.c:	.freq = 16 * MHZ, .max_brp = 32, .max_sjw = 4,
net/can/softing/softing_cs.c:	.freq = 16 * MHZ, .max_brp = 32, .max_sjw = 4,
net/can/softing/softing_cs.c:	.freq = 16 * MHZ, .max_brp = 64, .max_sjw = 4,
net/can/softing/softing_cs.c:	.freq = 16 * MHZ, .max_brp = 64, .max_sjw = 4,
net/can/softing/softing_cs.c:	.freq = 20 * MHZ, .max_brp = 32, .max_sjw = 4,
net/can/softing/softing_cs.c:	.freq = 20 * MHZ, .max_brp = 32, .max_sjw = 4,
net/can/softing/softing_cs.c:	.freq = 24 * MHZ, .max_brp = 64, .max_sjw = 4,
net/can/softing/softing_cs.c:	.freq = 24 * MHZ, .max_brp = 64, .max_sjw = 4,
net/can/softing/softing_cs.c:	.freq = 24 * MHZ, .max_brp = 64, .max_sjw = 4,
net/can/softing/softing_fw.c:	stamp = jiffies + 1 * HZ;
net/can/softing/softing_fw.c:	stamp = jiffies + 3 * HZ;
net/can/usb/peak_usb/pcan_usb.c:#define PCAN_USB_CRYSTAL_HZ		16000000
net/can/usb/peak_usb/pcan_usb.c:		.freq = PCAN_USB_CRYSTAL_HZ / 2 ,
net/can/usb/peak_usb/pcan_usb_pro.c:#define PCAN_USBPRO_CRYSTAL_HZ		56000000
net/can/usb/peak_usb/pcan_usb_pro.c:		.freq = PCAN_USBPRO_CRYSTAL_HZ,
net/cris/eth_v10.c:#define NET_DUPLEX_CHECK_INTERVAL        (2*HZ) /* 2 s   */
net/cris/eth_v10.c:#define NET_FLASH_PAUSE                (HZ/100) /* 10 ms */
net/cris/eth_v10.c:#define NET_FLASH_TIME                  (HZ/50) /* 20 ms */
net/cris/eth_v10.c:#define NET_LINK_UP_CHECK_INTERVAL       (2*HZ) /* 2 s   */
net/cris/eth_v10.c:		mod_timer(&clear_led_timer, jiffies + HZ/10);
net/cris/eth_v10.c:		mod_timer(&clear_led_timer, jiffies + HZ/10);
net/dsa/mv88e6060.c:	timeout = jiffies + 1 * HZ;
net/dsa/mv88e6123_61_65.c:	timeout = jiffies + 1 * HZ;
net/dsa/mv88e6131.c:	timeout = jiffies + 1 * HZ;
net/dsa/mv88e6xxx.c:	timeout = jiffies + 1 * HZ;
net/dsa/mv88e6xxx.c:	timeout = jiffies + 1 * HZ;
net/ethernet/3com/3c501.c:	dev->watchdog_timeo = HZ;
net/ethernet/3com/3c509.c:#define TX_TIMEOUT  (400*HZ/1000)
net/ethernet/3com/3c515.c:	{ "100baseFX", Media_Lnk, 0x04, XCVR_MII, (14 * HZ) / 10},
net/ethernet/3com/3c515.c:	{ "100baseTX", Media_Lnk, 0x02, XCVR_100baseFx, (14 * HZ) / 10},
net/ethernet/3com/3c515.c:	{ "10base2", 0, 0x10, XCVR_AUI, (1 * HZ) / 10},
net/ethernet/3com/3c515.c:	{ "10baseT", Media_10TP, 0x08, XCVR_10base2, (14 * HZ) / 10 },
net/ethernet/3com/3c515.c:	{ "10Mbs AUI", Media_SQE, 0x20, XCVR_Default, (1 * HZ) / 10},
net/ethernet/3com/3c515.c:#define TX_TIMEOUT  ((4*HZ)/10)	/* Time in jiffies before concluding Tx hung */
net/ethernet/3com/3c515.c:	dev->watchdog_timeo = (400 * HZ) / 1000;
net/ethernet/3com/3c515.c:	{ "MII", 0, 0x40, XCVR_10baseT, 3 * HZ},
net/ethernet/3com/3c574_cs.c:#define TX_TIMEOUT  ((800*HZ)/1000)
net/ethernet/3com/3c574_cs.c:		lp->fast_poll = HZ;
net/ethernet/3com/3c574_cs.c:		lp->media.expires = jiffies + 2*HZ/100;
net/ethernet/3com/3c574_cs.c:	lp->media.expires = jiffies + HZ;
net/ethernet/3com/3c574_cs.c:	lp->media.expires = jiffies + HZ;
net/ethernet/3com/3c589_cs.c:#define TX_TIMEOUT	((400*HZ)/1000)
net/ethernet/3com/3c589_cs.c:    if (time_before(jiffies, lp->last_irq + HZ)) {
net/ethernet/3com/3c589_cs.c:	lp->fast_poll = HZ;
net/ethernet/3com/3c589_cs.c:    lp->media.expires = jiffies + HZ;
net/ethernet/3com/3c589_cs.c:    lp->media.expires = jiffies + HZ;
net/ethernet/3com/3c589_cs.c:	lp->media.expires = jiffies + HZ/100;
net/ethernet/3com/3c59x.c:  { "100baseFX", Media_Lnk, 0x04, XCVR_MII,		(14*HZ)/10},
net/ethernet/3com/3c59x.c:  { "100baseTX", Media_Lnk, 0x02, XCVR_100baseFx, (14*HZ)/10},
net/ethernet/3com/3c59x.c:  { "10base2",   0,			0x10, XCVR_AUI,		(1*HZ)/10},
net/ethernet/3com/3c59x.c:  {	"10baseT",   Media_10TP,0x08, XCVR_10base2, (14*HZ)/10},
net/ethernet/3com/3c59x.c:  { "10Mbs AUI", Media_SQE, 0x20, XCVR_Default, (1*HZ)/10},
net/ethernet/3com/3c59x.c:  { "Autonegotiate", 0,		0x41, XCVR_10baseT, 3*HZ},
net/ethernet/3com/3c59x.c:	dev->watchdog_timeo = (watchdog * HZ) / 1000;
net/ethernet/3com/3c59x.c:				if (time_after(jiffies, last_jif + 10 * HZ)) {
net/ethernet/3com/3c59x.c:	int next_tick = 60*HZ;
net/ethernet/3com/3c59x.c:  { "MII",		 0,			0x41, XCVR_10baseT, 3*HZ },
net/ethernet/3com/3c59x.c:  { "MII-External",	 0,		0x41, XCVR_10baseT, 3*HZ },
net/ethernet/3com/3c59x.c:					mod_timer(&vp->rx_oom_timer, RUN_AT(HZ * 1));
net/ethernet/3com/3c59x.c:			mod_timer(&vp->timer, jiffies + 1*HZ);
net/ethernet/3com/3c59x.c:			mod_timer(&vp->timer, jiffies + 1*HZ);
net/ethernet/3com/3c59x.c:		next_tick = 5*HZ;
net/ethernet/3com/typhoon.c:#define TX_TIMEOUT  (2*HZ)
net/ethernet/3com/typhoon.c:#define TYPHOON_RESET_TIMEOUT_SLEEP	(6 * HZ)
net/ethernet/8390/8390.h:#define TX_TIMEOUT (20*HZ/100)
net/ethernet/8390/apne.c:	if (time_after(jiffies, dma_start + 2*HZ/100)) {	/* 20ms */
net/ethernet/8390/apne.c:		if (time_after(jiffies, reset_start_time + 2*HZ/100)) {
net/ethernet/8390/apne.c:	if (time_after(jiffies, reset_start_time + 2*HZ/100)) {
net/ethernet/8390/ax88796.c:		if (jiffies - dma_start > 2 * HZ / 100) {		/* 20ms */
net/ethernet/8390/ax88796.c:		if (jiffies - reset_start_time > 2 * HZ / 100) {
net/ethernet/8390/axnet_cs.c:	info->fast_poll = HZ;
net/ethernet/8390/axnet_cs.c:    info->watchdog.expires = jiffies + HZ;
net/ethernet/8390/axnet_cs.c:    info->watchdog.expires = jiffies + HZ;
net/ethernet/8390/es3210.c:	end = jiffies + 2*HZ/100;
net/ethernet/8390/etherh.c:		if (time_after(jiffies, dma_start + 2*HZ/100)) { /* 20ms */
net/ethernet/8390/ne.c:		if (time_after(jiffies, dma_start + 2*HZ/100)) {		/* 20ms */
net/ethernet/8390/ne.c:		if (time_after(jiffies, reset_start_time + 2*HZ/100)) {
net/ethernet/8390/ne.c:		if (time_after(jiffies, reset_start_time + 2*HZ/100)) {
net/ethernet/8390/ne-h8300.c:		if (time_after(jiffies, dma_start + 2*HZ/100)) {		/* 20ms */
net/ethernet/8390/ne-h8300.c:		if (time_after(jiffies, reset_start_time + 2*HZ/100)) {
net/ethernet/8390/pcnet_cs.c:#define PCNET_RDC_TIMEOUT (2*HZ/100)	/* Max wait in jiffies for Tx RDC */
net/ethernet/8390/pcnet_cs.c:    if (info->pna_phy && time_after(jiffies, info->mii_reset + 6*HZ)) {
net/ethernet/8390/pcnet_cs.c:	info->fast_poll = HZ;
net/ethernet/8390/pcnet_cs.c:    info->watchdog.expires = jiffies + HZ;
net/ethernet/8390/pcnet_cs.c:    info->watchdog.expires = jiffies + HZ;
net/ethernet/8390/zorro8390.c:		if (time_after(jiffies, dma_start + 2 * HZ / 100)) {
net/ethernet/8390/zorro8390.c:		if (time_after(jiffies, reset_start_time + 2 * HZ / 100)) {
net/ethernet/8390/zorro8390.c:				       reset_start_time + 2 * HZ / 100)) {
net/ethernet/adaptec/starfire.c:#define TX_TIMEOUT	(2 * HZ)
net/ethernet/adi/bfin_mac.h:#define TX_RECLAIM_JIFFIES (HZ / 5)
net/ethernet/aeroflex/greth.c:		timeout = jiffies + 6*HZ;
net/ethernet/aeroflex/greth.c:	timeout = jiffies + HZ/100;
net/ethernet/aeroflex/greth.c:	unsigned long timeout = jiffies + 4*HZ/100;
net/ethernet/alteon/acenic.c:	dev->watchdog_timeo = 5*HZ;
net/ethernet/alteon/acenic.c:	myjif = jiffies + 3 * HZ;
net/ethernet/alteon/acenic.c:		(pci_state & PCI_66MHZ) ? 66 : 33,
net/ethernet/alteon/acenic.c:		tmp |= (MEM_READ_MULTIPLE | (pci_state & PCI_66MHZ));
net/ethernet/alteon/acenic.c:	unsigned long maxjiff = jiffies + 3*HZ;
net/ethernet/alteon/acenic.h:#define PCI_66MHZ		0x00080000
net/ethernet/amd/a2065.c:	dev->watchdog_timeo = 5*HZ;
net/ethernet/amd/amd8111e.h:#define  AMD8111E_TX_TIMEOUT		(3 * HZ)/* 3 sec */
net/ethernet/amd/amd8111e.h:#define	IPG_CONVERGE_JIFFIES (HZ/2)
net/ethernet/amd/ariadne.c:	dev->watchdog_timeo = 5 * HZ;
net/ethernet/amd/atarilance.c:#define TX_TIMEOUT	(HZ/5)
net/ethernet/amd/au1000_eth.h:#define ETH_TX_TIMEOUT (HZ/4)
net/ethernet/amd/declance.c:	dev->watchdog_timeo = 5*HZ;
net/ethernet/amd/declance.c:		mod_timer(&lp->multicast_timer, jiffies + 4 * HZ/100);
net/ethernet/amd/depca.c:#define TX_TIMEOUT (1*HZ)
net/ethernet/amd/depca.c:		delay = jiffies + HZ/50;
net/ethernet/amd/lance.c:#define TX_TIMEOUT	(HZ/5)
net/ethernet/amd/ni65.c:	dev->watchdog_timeo	= HZ/2;
net/ethernet/amd/nmclan_cs.c:#define TX_TIMEOUT		((400*HZ)/1000)
net/ethernet/amd/pcnet32.c:#define PCNET32_BLINK_TIMEOUT	(jiffies + (HZ/4))
net/ethernet/amd/pcnet32.c:#define PCNET32_WATCHDOG_TIMEOUT (jiffies + (2 * HZ))
net/ethernet/amd/pcnet32.c:	dev->watchdog_timeo = (5 * HZ);
net/ethernet/amd/sun3lance.c:		if (tickssofar < HZ/5)
net/ethernet/amd/sunlance.c:	dev->watchdog_timeo = 5*HZ;
net/ethernet/apple/bmac.c:#define TX_TIMEOUT	HZ	/* 1 second */
net/ethernet/apple/mace.c:#define TX_TIMEOUT	HZ	/* 1 second */
net/ethernet/apple/macmace.c:#define TX_TIMEOUT	HZ
net/ethernet/atheros/atl1c/atl1c.h:#define AT_TX_WATCHDOG  (5 * HZ)
net/ethernet/atheros/atl1e/atl1e.h:#define AT_TX_WATCHDOG  (5 * HZ)
net/ethernet/atheros/atlx/atl1.c:	netdev->watchdog_timeo = 5 * HZ;
net/ethernet/atheros/atlx/atl1.c:			  round_jiffies(jiffies + 3 * HZ));
net/ethernet/atheros/atlx/atl2.c:	mod_timer(&adapter->watchdog_timer, round_jiffies(jiffies + 4*HZ));
net/ethernet/atheros/atlx/atl2.c:	netdev->watchdog_timeo = 5 * HZ;
net/ethernet/atheros/atlx/atl2.c:			  round_jiffies(jiffies + 4 * HZ));
net/ethernet/atheros/atlx/atl2.c:				  round_jiffies(jiffies + 5 * HZ));
net/ethernet/broadcom/b44.c:	bp->timer.expires = jiffies + HZ;
net/ethernet/broadcom/b44.c:#define B44_TX_TIMEOUT			(5 * HZ)
net/ethernet/broadcom/b44.c:	mod_timer(&bp->timer, round_jiffies(jiffies + HZ));
net/ethernet/broadcom/bcm63xx_enet.c:		priv->rx_timeout.expires = jiffies + HZ;
net/ethernet/broadcom/bnx2.c:		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_133MHZ:
net/ethernet/broadcom/bnx2.c:		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_32MHZ:
net/ethernet/broadcom/bnx2.c:		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_38MHZ:
net/ethernet/broadcom/bnx2.c:		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_48MHZ:
net/ethernet/broadcom/bnx2.c:		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_55MHZ:
net/ethernet/broadcom/bnx2.c:		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_66MHZ:
net/ethernet/broadcom/bnx2.c:		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_80MHZ:
net/ethernet/broadcom/bnx2.c:		case BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_95MHZ:
net/ethernet/broadcom/bnx2.c:#define TX_TIMEOUT  (5*HZ)
net/ethernet/broadcom/bnx2.h:#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_133MHZ	 (7L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_32MHZ	 (0L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_38MHZ	 (1L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_48MHZ	 (2L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_55MHZ	 (3L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_66MHZ	 (4L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_80MHZ	 (5L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_MISC_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_95MHZ	 (6L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_133MHZ	 (7L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_32MHZ	 (0L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_38MHZ	 (1L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_48MHZ	 (2L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_55MHZ	 (3L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_66MHZ	 (4L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_80MHZ	 (5L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_PCICFG_PCI_CLOCK_CONTROL_BITS_PCI_CLK_SPD_DET_95MHZ	 (6L<<0)
net/ethernet/broadcom/bnx2.h:#define BNX2_SERDES_AN_TIMEOUT		(HZ / 3)
net/ethernet/broadcom/bnx2.h:#define BNX2_SERDES_FORCED_TIMEOUT	(HZ / 10)
net/ethernet/broadcom/bnx2.h:#define BNX2_TIMER_INTERVAL		HZ
net/ethernet/broadcom/bnx2x/bnx2x_hsi.h:		#define SHARED_HW_CFG_SMBUS_TIMING_100KHZ            0x00000000
net/ethernet/broadcom/bnx2x/bnx2x_hsi.h:		#define SHARED_HW_CFG_SMBUS_TIMING_400KHZ            0x00001000
net/ethernet/broadcom/bnx2x/bnx2x_link.c:			MDIO_PMA_REG_84823_BLINK_RATE_VAL_15P9HZ);
net/ethernet/broadcom/bnx2x/bnx2x_main.c:	bp->current_interval = CHIP_REV_IS_SLOW(bp) ? 5*HZ : HZ;
net/ethernet/broadcom/bnx2x/bnx2x_main.c:#define TX_TIMEOUT		(5*HZ)
net/ethernet/broadcom/bnx2x/bnx2x_main.c:							HZ/10);
net/ethernet/broadcom/bnx2x/bnx2x_main.c:								HZ/10);
net/ethernet/broadcom/bnx2x/bnx2x_main.c:								HZ/10);
net/ethernet/broadcom/bnx2x/bnx2x_main.c:		queue_delayed_work(bnx2x_wq, &bp->period_task, 1*HZ);
net/ethernet/broadcom/bnx2x/bnx2x_reg.h:#define MDIO_PMA_REG_84823_BLINK_RATE_VAL_15P9HZ	0x2f
net/ethernet/broadcom/cnic.c:		if (delta > (2 * HZ))
net/ethernet/broadcom/cnic.c:		if (!time_after(jiffies, ctx->timestamp + (2 * HZ))) {
net/ethernet/broadcom/cnic.c:	if (!time_after(jiffies, ctx->timestamp + (2 * HZ))) {
net/ethernet/broadcom/cnic.c:		unsigned long delta = ctx->timestamp + (2 * HZ) - jiffies;
net/ethernet/broadcom/cnic.h:#define CNIC_RAMROD_TMO			(HZ / 4)
net/ethernet/broadcom/sb1250-mac.c:#define TX_TIMEOUT  (2*HZ)
net/ethernet/broadcom/tg3.c:	BUG_ON(tp->timer_offset > HZ);
net/ethernet/broadcom/tg3.c:	case FLASH_5752VENDOR_ATMEL_EEPROM_376KHZ:
net/ethernet/broadcom/tg3.c:	case FLASH_5752VENDOR_ATMEL_EEPROM_64KHZ:
net/ethernet/broadcom/tg3.c:	case FLASH_5787VENDOR_ATMEL_EEPROM_376KHZ:
net/ethernet/broadcom/tg3.c:	case FLASH_5787VENDOR_ATMEL_EEPROM_376KHZ:
net/ethernet/broadcom/tg3.c:	case FLASH_5787VENDOR_ATMEL_EEPROM_64KHZ:
net/ethernet/broadcom/tg3.c:	case FLASH_5787VENDOR_MICRO_EEPROM_376KHZ:
net/ethernet/broadcom/tg3.c:	case FLASH_5787VENDOR_MICRO_EEPROM_376KHZ:
net/ethernet/broadcom/tg3.c:	case FLASH_5787VENDOR_MICRO_EEPROM_64KHZ:
net/ethernet/broadcom/tg3.c:					    CLOCK_CTRL_44MHZ_CORE);
net/ethernet/broadcom/tg3.c:			    (CLOCK_CTRL_44MHZ_CORE | CLOCK_CTRL_ALTCLK),
net/ethernet/broadcom/tg3.c:#define TG3_TX_TIMEOUT			(5 * HZ)
net/ethernet/broadcom/tg3.c:	} else if ((orig_clock_ctrl & CLOCK_CTRL_44MHZ_CORE) != 0) {
net/ethernet/broadcom/tg3.c:			newbits2 = newbits1 | CLOCK_CTRL_44MHZ_CORE;
net/ethernet/broadcom/tg3.c:			newbits2 = newbits1 | CLOCK_CTRL_44MHZ_CORE;
net/ethernet/broadcom/tg3.c:				newbits3 = CLOCK_CTRL_44MHZ_CORE;
net/ethernet/broadcom/tg3.c:	tp->asf_multiplier = (HZ / tp->timer_offset) *
net/ethernet/broadcom/tg3.c:		tp->mi_mode = MAC_MI_MODE_500KHZ_CONST;
net/ethernet/broadcom/tg3.c:	tp->timer_multiplier = (HZ / tp->timer_offset);
net/ethernet/broadcom/tg3.c:		tp->timer_offset = HZ;
net/ethernet/broadcom/tg3.c:		tp->timer_offset = HZ / 10;
net/ethernet/broadcom/tg3.h:#define  CLOCK_CTRL_44MHZ_CORE		 0x00040000
net/ethernet/broadcom/tg3.h:#define  FLASH_5752VENDOR_ATMEL_EEPROM_376KHZ	 0x02000000
net/ethernet/broadcom/tg3.h:#define  FLASH_5752VENDOR_ATMEL_EEPROM_64KHZ	 0x00000000
net/ethernet/broadcom/tg3.h:#define  FLASH_5755VENDOR_ATMEL_EEPROM_376KHZ	 0x03c00002
net/ethernet/broadcom/tg3.h:#define  FLASH_5755VENDOR_ATMEL_EEPROM_64KHZ	 0x03c00003
net/ethernet/broadcom/tg3.h:#define  FLASH_5787VENDOR_ATMEL_EEPROM_376KHZ	 0x03000002
net/ethernet/broadcom/tg3.h:#define  FLASH_5787VENDOR_ATMEL_EEPROM_64KHZ	 0x03000003
net/ethernet/broadcom/tg3.h:#define  FLASH_5787VENDOR_MICRO_EEPROM_376KHZ	 0x02000000
net/ethernet/broadcom/tg3.h:#define  FLASH_5787VENDOR_MICRO_EEPROM_64KHZ	 0x03000000
net/ethernet/broadcom/tg3.h:#define  MAC_MI_MODE_500KHZ_CONST	 0x00008000
net/ethernet/broadcom/tg3.h:#define  MAC_MI_MODE_CLK_10MHZ		 0x00000001
net/ethernet/brocade/bna/bfi_reg.h:	__APP_PLL_LCLK_FBCNT_425_MHZ = 6,
net/ethernet/brocade/bna/bfi_reg.h:	__APP_PLL_LCLK_FBCNT_468_MHZ = 4,
net/ethernet/brocade/bna/bfi_reg.h:#define __APP_PLL_LCLK_SRAM_USE_100MHZ	0x00100000
net/ethernet/cadence/at91_ether.c:#define LINK_POLL_INTERVAL	(HZ)
net/ethernet/chelsio/cxgb3/cxgb3_main.c:	    adap->params.stats_update_period * HZ;
net/ethernet/chelsio/cxgb3/cxgb3_main.c:	    (HZ * adap->params.linkpoll_period) / 10 :
net/ethernet/chelsio/cxgb3/sge.c:#define RX_RECLAIM_PERIOD (HZ/4)
net/ethernet/chelsio/cxgb3/sge.c:#define TX_RECLAIM_PERIOD (HZ / 4)
net/ethernet/chelsio/cxgb4/sge.c:#define RX_QCHECK_PERIOD (HZ / 2)
net/ethernet/chelsio/cxgb4/sge.c:#define TX_QCHECK_PERIOD (HZ / 2)
net/ethernet/chelsio/cxgb4/sge.c:		    time_after_eq(jiffies, q->txq->trans_start + HZ / 100) &&
net/ethernet/chelsio/cxgb4vf/sge.c:	RX_QCHECK_PERIOD = (HZ / 2),
net/ethernet/chelsio/cxgb4vf/sge.c:	TX_QCHECK_PERIOD = (HZ / 2),
net/ethernet/chelsio/cxgb/cxgb2.c:	schedule_delayed_work(&ap->stats_update_task, secs * HZ);
net/ethernet/chelsio/cxgb/my3126.c:	schedule_delayed_work(&cphy->phy_update, HZ/30);
net/ethernet/chelsio/cxgb/regs.h:#define F_PCI_MODE_66MHZ    V_PCI_MODE_66MHZ(1U)
net/ethernet/chelsio/cxgb/regs.h:#define S_PCI_MODE_66MHZ    1
net/ethernet/chelsio/cxgb/regs.h:#define V_PCI_MODE_66MHZ(x) ((x) << S_PCI_MODE_66MHZ)
net/ethernet/chelsio/cxgb/sge.c:#define TX_RECLAIM_PERIOD (HZ / 4)
net/ethernet/chelsio/cxgb/sge.c:			sge->espibug_timeout = HZ/100;
net/ethernet/cirrus/cs89x0.c:	dev->watchdog_timeo = HZ;
net/ethernet/cirrus/cs89x0.c:                    : Replace '100' with HZ
net/ethernet/cirrus/cs89x0.c:	while (jiffies - timenow < HZ)
net/ethernet/cisco/enic/enic_main.c:#define ENIC_NOTIFY_TIMER_PERIOD	(2 * HZ)
net/ethernet/cisco/enic/enic_main.c:	netdev->watchdog_timeo = 2 * HZ;
net/ethernet/cisco/enic/enic_main.c:		schedule_timeout_uninterruptible(HZ / 10);
net/ethernet/cisco/enic/enic_main.c:	time = jiffies + (HZ * 2);
net/ethernet/davicom/dm9000.c:		schedule_delayed_work(&db->phy_poll, HZ * 2);
net/ethernet/dec/ewrk3.c:#define QUEUE_PKT_TIMEOUT (1*HZ)	/* Jiffies */
net/ethernet/dec/tulip/21142.c:	int next_tick = 60*HZ;
net/ethernet/dec/tulip/21142.c:			next_tick = 3*HZ;
net/ethernet/dec/tulip/21142.c:			next_tick = 3*HZ;
net/ethernet/dec/tulip/21142.c:		next_tick = 3*HZ;
net/ethernet/dec/tulip/21142.c:			next_tick = 60*HZ;
net/ethernet/dec/tulip/21142.c:			tp->timer.expires = RUN_AT(3*HZ);
net/ethernet/dec/tulip/21142.c:		tp->timer.expires = RUN_AT(3*HZ);
net/ethernet/dec/tulip/de2104x.c:#define DE_TIMER_LINK		(60 * HZ)
net/ethernet/dec/tulip/de2104x.c:#define DE_TIMER_NO_LINK	(5 * HZ)
net/ethernet/dec/tulip/de2104x.c:#define TX_TIMEOUT		(6*HZ)
net/ethernet/dec/tulip/de4x5.c:#define QUEUE_PKT_TIMEOUT (3*HZ)        /* 3 second timeout */
net/ethernet/dec/tulip/de4x5.c:	dt = (next_tick * HZ) / 1000;
net/ethernet/dec/tulip/dmfe.c:			db->timer.expires = DMFE_TIMER_WUT + HZ * 2;
net/ethernet/dec/tulip/dmfe.c:	db->timer.expires = DMFE_TIMER_WUT + HZ * 2;
net/ethernet/dec/tulip/dmfe.c:#define DMFE_TIMER_WUT  (jiffies + HZ * 1)/* timer wakeup time : 1 second */
net/ethernet/dec/tulip/dmfe.c:#define DMFE_TX_KICK 	(HZ/2)	/* tx packet Kick-out time 0.5 s" */
net/ethernet/dec/tulip/dmfe.c:#define DMFE_TX_TIMEOUT ((3*HZ)/2)	/* tx packet time-out time 1.5 s" */
net/ethernet/dec/tulip/interrupt.c:				mod_timer(&tp->timer, RUN_AT(HZ/50));
net/ethernet/dec/tulip/interrupt.c:			mod_timer(&tp->timer, RUN_AT(HZ/50));
net/ethernet/dec/tulip/pnic2.c:	int next_tick = 60*HZ;
net/ethernet/dec/tulip/pnic2.c:			tp->timer.expires = RUN_AT(3*HZ);
net/ethernet/dec/tulip/pnic2.c:			tp->timer.expires = RUN_AT(3*HZ);
net/ethernet/dec/tulip/pnic2.c:		tp->timer.expires = RUN_AT(3*HZ);
net/ethernet/dec/tulip/pnic.c:		if (! tp->nwayset || time_after(jiffies, dev_trans_start(dev) + 1*HZ)) {
net/ethernet/dec/tulip/pnic.c:	int next_tick = 60*HZ;
net/ethernet/dec/tulip/pnic.c:				next_tick = 1*HZ;
net/ethernet/dec/tulip/pnic.c:			next_tick = 1*HZ;
net/ethernet/dec/tulip/pnic.c:			next_tick = 3*HZ;
net/ethernet/dec/tulip/pnic.c:			next_tick = 3*HZ;
net/ethernet/dec/tulip/pnic.c:			next_tick = 60*HZ;
net/ethernet/dec/tulip/timer.c:	int next_tick = 2*HZ;
net/ethernet/dec/tulip/timer.c:	int next_tick = 60*HZ;
net/ethernet/dec/tulip/timer.c:	int next_tick = 60*HZ;
net/ethernet/dec/tulip/timer.c:			next_tick = (24*HZ)/10;
net/ethernet/dec/tulip/timer.c:				next_tick = 3*HZ;
net/ethernet/dec/tulip/timer.c:				next_tick = 60*HZ;
net/ethernet/dec/tulip/timer.c:			next_tick = 60*HZ;
net/ethernet/dec/tulip/tulip_core.c:#define TX_TIMEOUT  (4*HZ)
net/ethernet/dec/tulip/tulip_core.c:	int next_tick = 3*HZ;
net/ethernet/dec/tulip/tulip_core.c:			next_tick = 1*HZ;
net/ethernet/dec/tulip/uli526x.c:	db->timer.expires = ULI526X_TIMER_WUT + HZ * 2;
net/ethernet/dec/tulip/uli526x.c:#define ULI526X_TIMER_WUT  (jiffies + HZ * 1)/* timer wakeup time : 1 second */
net/ethernet/dec/tulip/uli526x.c:#define ULI526X_TX_KICK 	(4*HZ/2)	/* tx packet Kick-out time 2 s" */
net/ethernet/dec/tulip/uli526x.c:#define ULI526X_TX_TIMEOUT ((16*HZ)/2)	/* tx packet time-out time 8 s" */
net/ethernet/dec/tulip/winbond-840.c:#define TX_TIMEOUT  (2*HZ)
net/ethernet/dec/tulip/winbond-840.c:		mod_timer(&np->timer, jiffies + 1*HZ);
net/ethernet/dec/tulip/winbond-840.c:	np->timer.expires = jiffies + 10*HZ;
net/ethernet/dec/tulip/winbond-840.c:	np->timer.expires = jiffies + 1*HZ;
net/ethernet/dlink/de600.c:		if (tickssofar < HZ/20)
net/ethernet/dlink/de620.c:	dev->watchdog_timeo	= HZ*2;
net/ethernet/dlink/dl2k.c:	int next_tick = 1*HZ;
net/ethernet/dlink/dl2k.c:	np->timer.expires = jiffies + 1*HZ;
net/ethernet/dlink/dl2k.h:#define TX_TIMEOUT  (4*HZ)
net/ethernet/dlink/sundance.c:#define TX_TIMEOUT  (4*HZ)
net/ethernet/dlink/sundance.c:	int next_tick = 10*HZ;
net/ethernet/dlink/sundance.c:	np->timer.expires = jiffies + 3*HZ;
net/ethernet/emulex/benet/be_main.c:	if (delta < HZ)
net/ethernet/emulex/benet/be_main.c:	stats->rx_pps = (unsigned long)(pkts - stats->rx_pkts_prev) / (delta / HZ);
net/ethernet/ethoc.c:#define	ETHOC_MII_TIMEOUT	(1 + (HZ / 5))
net/ethernet/ethoc.c:#define	ETHOC_TIMEOUT		(HZ / 2)
net/ethernet/fealnx.c:#define TX_TIMEOUT      (2*HZ)
net/ethernet/fealnx.c:				np->reset_timer.expires = RUN_AT(HZ/2);
net/ethernet/fealnx.c:	np->timer.expires = RUN_AT(10 * HZ);
net/ethernet/fealnx.c:	np->timer.expires = RUN_AT(3 * HZ);
net/ethernet/freescale/fec.c:#define TX_TIMEOUT (2 * HZ)
net/ethernet/freescale/fec_mpc52xx.h:#define FEC_WATCHDOG_TIMEOUT	((400*HZ)/1000)
net/ethernet/freescale/fs_enet/fs_enet-main.c:	ndev->watchdog_timeo = 2 * HZ;
net/ethernet/freescale/gianfar.c:#define TX_TIMEOUT      (1*HZ)
net/ethernet/freescale/ucc_geth.h:#define TX_TIMEOUT                              (1*HZ)
net/ethernet/fujitsu/at1700.c:#define TX_TIMEOUT		(HZ/10)
net/ethernet/fujitsu/eth16i.c:#define TX_TIMEOUT             (400*HZ/1000)
net/ethernet/fujitsu/fmvj18x_cs.c:#define TX_TIMEOUT		((400*HZ)/1000)
net/ethernet/hp/hp100.c:		if (time_before(jiffies, dev_trans_start(dev) + HZ))
net/ethernet/hp/hp100.c:		if (time_before(jiffies, dev_trans_start(dev) + HZ)) {
net/ethernet/hp/hp100.c:		time = jiffies + (1 * HZ);	/* 1 sec timeout for cable st */
net/ethernet/hp/hp100.c:			time = jiffies + (2 * HZ);	/* again a timeout */
net/ethernet/hp/hp100.c:	time = jiffies + (2 * HZ);	/* This seems to take a while.... */
net/ethernet/hp/hp100.c:	time = jiffies + (3 * HZ);	/* Timeout 3s */
net/ethernet/hp/hp100.c:		time = jiffies + (HZ / 10);
net/ethernet/hp/hp100.c:	time = jiffies + (HZ / 2);
net/ethernet/hp/hp100.c:	time = jiffies + (HZ / 4);
net/ethernet/hp/hp100.c:		time = jiffies + (HZ * 5);
net/ethernet/i825xx/3c505.c:	dev->watchdog_timeo = 10*HZ;
net/ethernet/i825xx/3c505.c:	for (timeout = jiffies + 5*HZ/100; time_before(jiffies, timeout);) {
net/ethernet/i825xx/3c505.c:	for (timeout = jiffies + 5*HZ/100; time_before(jiffies, timeout);) {
net/ethernet/i825xx/3c505.c:				timeout = jiffies + 10*HZ;
net/ethernet/i825xx/3c505.c:			timeout = jiffies + 2*HZ/100;
net/ethernet/i825xx/3c505.c:	timeout = jiffies + 2*HZ/100;
net/ethernet/i825xx/3c505.c:		timeout = jiffies + 3*HZ/100;
net/ethernet/i825xx/3c505.c:	timeout = jiffies + 3*HZ/100;
net/ethernet/i825xx/3c505.c:			timeout = jiffies + 5*HZ/100;
net/ethernet/i825xx/3c505.c:		timeout = jiffies + 5*HZ/100;
net/ethernet/i825xx/3c505.c:	unsigned long timeout = jiffies + 10*HZ/100;
net/ethernet/i825xx/3c507.c:#define TX_TIMEOUT (HZ/20)
net/ethernet/i825xx/82596.c:#define TX_TIMEOUT	(HZ/20)
net/ethernet/i825xx/eepro.c:#define TX_TIMEOUT ((4*HZ)/10)
net/ethernet/i825xx/eexpress.c:	dev->watchdog_timeo = 2*HZ;
net/ethernet/i825xx/eexpress.c:		if (time_after(jiffies, dev_trans_start(dev) + HZ/2))
net/ethernet/i825xx/ether1.c:	dev->watchdog_timeo	= 5 * HZ / 100;
net/ethernet/i825xx/ether1.c:	timeout += HZ;
net/ethernet/i825xx/ether1.c:	timeout += HZ/10;
net/ethernet/i825xx/ether1.c:	timeout += HZ/10;
net/ethernet/i825xx/ether1.c:	timeout += HZ/10;
net/ethernet/i825xx/ether1.c:	timeout = jiffies + HZ/2;
net/ethernet/i825xx/lib82596.c:#define TX_TIMEOUT	(HZ/20)
net/ethernet/i825xx/lp486e.c:	dev->watchdog_timeo = 5*HZ;
net/ethernet/i825xx/lp486e.c:		if (tickssofar < HZ/4)
net/ethernet/i825xx/ni52.c:	dev->watchdog_timeo	= HZ/20;
net/ethernet/i825xx/sun3_82586.c:	dev->watchdog_timeo	= HZ/20;
net/ethernet/i825xx/znet.c:#define TX_TIMEOUT	(HZ/10)
net/ethernet/ibm/ehea/ehea.h:#define EHEA_WATCH_DOG_TIMEOUT 10*HZ
net/ethernet/ibm/emac/core.c:#define EMAC_PROBE_DEP_TIMEOUT	(HZ * 5)
net/ethernet/ibm/emac/core.c:#define PHY_POLL_LINK_OFF	(HZ / 5)
net/ethernet/ibm/emac/core.c:#define PHY_POLL_LINK_ON	HZ
net/ethernet/ibm/emac/core.c:	ndev->watchdog_timeo = 5 * HZ;
net/ethernet/icplus/ipg.c:		schedule_delayed_work(&sp->task, HZ);
net/ethernet/icplus/ipg.h:#define IPG_CS_66MHZCAPABLE             0x0020
net/ethernet/intel/e1000/e1000_hw.h:#define EEPROM_WORD0A_66MHZ  0x0800
net/ethernet/intel/e1000/e1000_hw.h:#define IFE_PHC_HIGHZ                        0x0200	/* 1 = Open Circuit */
net/ethernet/intel/e1000/e1000_main.c:						      2 * HZ);
net/ethernet/intel/e1000/e1000_main.c:						      2 * HZ);
net/ethernet/intel/e1000/e1000_main.c:		               (adapter->tx_timeout_factor * HZ)) &&
net/ethernet/intel/e1000/e1000_main.c:	netdev->watchdog_timeo = 5 * HZ;
net/ethernet/intel/e1000/e1000_main.c:		schedule_delayed_work(&adapter->watchdog_task, 2 * HZ);
net/ethernet/intel/e1000e/netdev.c:			       + (adapter->tx_timeout_factor * HZ)) &&
net/ethernet/intel/e1000e/netdev.c:	netdev->watchdog_timeo		= 5 * HZ;
net/ethernet/intel/e1000e/netdev.c:			  round_jiffies(jiffies + 2 * HZ));
net/ethernet/intel/e1000e/netdev.c:					  round_jiffies(jiffies + 2 * HZ));
net/ethernet/intel/e1000e/netdev.c:					  round_jiffies(jiffies + 2 * HZ));
net/ethernet/intel/e100.c:#define E100_WATCHDOG_PERIOD	(2 * HZ)
net/ethernet/intel/igb/igb_main.c:			       (adapter->tx_timeout_factor * HZ)) &&
net/ethernet/intel/igb/igb_main.c:		if (!time_after(jiffies, vf_data->last_nack + (2 * HZ)))
net/ethernet/intel/igb/igb_main.c:		if (!time_after(jiffies, vf_data->last_nack + (2 * HZ)))
net/ethernet/intel/igb/igb_main.c:	netdev->watchdog_timeo = 5 * HZ;
net/ethernet/intel/igb/igb_main.c:			  round_jiffies(jiffies + 2 * HZ));
net/ethernet/intel/igb/igb_main.c:					  round_jiffies(jiffies + 2 * HZ));
net/ethernet/intel/igb/igb_main.c:					  round_jiffies(jiffies + 2 * HZ));
net/ethernet/intel/igb/igb_main.c:	    time_after(jiffies, vf_data->last_nack + (2 * HZ))) {
net/ethernet/intel/igbvf/netdev.c:	if (ret_val && time_after(jiffies, adapter->last_reset + (10 * HZ)))
net/ethernet/intel/igbvf/netdev.c:	netdev->watchdog_timeo = 5 * HZ;
net/ethernet/intel/igbvf/netdev.c:			  round_jiffies(jiffies + (2 * HZ)));
net/ethernet/intel/ixgbe/ixgbe.h:#define IXGBE_TRY_LINK_TIMEOUT (4 * HZ)
net/ethernet/intel/ixgbe/ixgbe_main.c:	netdev->watchdog_timeo = 5 * HZ;
net/ethernet/intel/ixgbe/ixgbe_main.c:		next_event_offset = HZ / 10;
net/ethernet/intel/ixgbe/ixgbe_main.c:		next_event_offset = HZ * 2;
net/ethernet/intel/ixgbe/ixgbe_main.c:	next_event_offset = HZ / 50;
net/ethernet/intel/ixgbevf/ixgbevf_main.c:	dev->watchdog_timeo = 5 * HZ;
net/ethernet/intel/ixgbevf/ixgbevf_main.c:			  round_jiffies(jiffies + (2 * HZ)));
net/ethernet/intel/ixgb/ixgb_main.c:	mod_timer(&adapter->watchdog_timer, jiffies + 2 * HZ);
net/ethernet/intel/ixgb/ixgb_main.c:	netdev->watchdog_timeo = 5 * HZ;
net/ethernet/intel/ixgb/ixgb_main.c:		   time_after(jiffies, tx_ring->buffer_info[eop].time_stamp + HZ)
net/ethernet/jme.h:#define PCC_INTERVAL (HZ / (1000000 / PCC_INTERVAL_US))
net/ethernet/jme.h:#define TX_TIMEOUT		(5 * HZ)
net/ethernet/korina.c:#define TX_TIMEOUT 	(6000 * HZ / 1000)
net/ethernet/korina.c:	mod_timer(&lp->media_check_timer, jiffies + HZ);
net/ethernet/lantiq_etop.c:	dev->watchdog_timeo = 10 * HZ;
net/ethernet/marvell/mv643xx_eth.c:	dev->watchdog_timeo = 2 * HZ;
net/ethernet/marvell/mv643xx_eth.c:	mod_timer(&mp->mib_counters_timer, jiffies + 30 * HZ);
net/ethernet/marvell/mv643xx_eth.c:			mod_timer(&mp->rx_oom, jiffies + (HZ / 10));
net/ethernet/marvell/mv643xx_eth.c:	mp->mib_counters_timer.expires = jiffies + 30 * HZ;
net/ethernet/marvell/mv643xx_eth.c:		mp->rx_oom.expires = jiffies + (HZ / 10);
net/ethernet/marvell/pxa168_eth.c:	dev->watchdog_timeo = 2 * HZ;
net/ethernet/marvell/pxa168_eth.c:		pep->timeout.expires = jiffies + (HZ / 10);
net/ethernet/marvell/skge.c:/* Chip HZ to microseconds */
net/ethernet/marvell/skge.c:#define LINK_HZ			HZ
net/ethernet/marvell/skge.c:#define TX_WATCHDOG		(5 * HZ)
net/ethernet/marvell/skge.c:		ectrl |= PHY_M_EC_MAC_S(MAC_TX_CLK_25_MHZ);
net/ethernet/marvell/skge.c:/* Microseconds to chip HZ */
net/ethernet/marvell/skge.c:	mod_timer(&skge->link_timer, jiffies + LINK_HZ);
net/ethernet/marvell/skge.c:			  round_jiffies(jiffies + LINK_HZ));
net/ethernet/marvell/skge.c:	unsigned long timeout = jiffies + HZ;
net/ethernet/marvell/skge.h:	MAC_TX_CLK_0_MHZ	= 2,
net/ethernet/marvell/skge.h:	MAC_TX_CLK_2_5_MHZ	= 6,
net/ethernet/marvell/skge.h:	MAC_TX_CLK_25_MHZ 	= 7,
net/ethernet/marvell/sky2.c:#define TX_WATCHDOG		(5 * HZ)
net/ethernet/marvell/sky2.c:		ectrl |= PHY_M_EC_MAC_S(MAC_TX_CLK_25_MHZ);
net/ethernet/marvell/sky2.c:		if (time_after(jiffies, start + HZ/4)) {
net/ethernet/marvell/sky2.c:	mod_timer(&hw->watchdog_timer, round_jiffies(jiffies + HZ));
net/ethernet/marvell/sky2.c:	wait_event_timeout(hw->msi_wait, (hw->flags & SKY2_HW_USE_MSI), HZ/10);
net/ethernet/marvell/sky2.h:	MAC_TX_CLK_0_MHZ	= 2,
net/ethernet/marvell/sky2.h:	MAC_TX_CLK_2_5_MHZ	= 6,
net/ethernet/marvell/sky2.h:	MAC_TX_CLK_25_MHZ 	= 7,
net/ethernet/mellanox/mlx4/catas.c:	MLX4_CATAS_POLL_INTERVAL	= 5 * HZ,
net/ethernet/mellanox/mlx4/en_netdev.c:	if (!priv->adaptive_rx_coal || period < priv->sample_interval * HZ)
net/ethernet/mellanox/mlx4/en_netdev.c:		rate = packets * HZ / period;
net/ethernet/mellanox/mlx4/mlx4_en.h:#define MLX4_EN_TX_POLL_TIMEOUT	(HZ / 4)
net/ethernet/mellanox/mlx4/mlx4_en.h:#define MLX4_EN_WATCHDOG_TIMEOUT	(15 * HZ)
net/ethernet/mellanox/mlx4/mlx4_en.h:#define STATS_DELAY		(HZ / 4)
net/ethernet/mellanox/mlx4/mlx4.h:#define MLX4_SENSE_RANGE	(HZ * 3)
net/ethernet/mellanox/mlx4/reset.c:#define MLX4_RESET_TIMEOUT_JIFFIES	(2 * HZ)
net/ethernet/mellanox/mlx4/reset.c:#define MLX4_SEM_TIMEOUT_JIFFIES	(10 * HZ)
net/ethernet/mellanox/mlx4/resource_tracker.c:		if (time_after(jiffies, begin + 5 * HZ))
net/ethernet/micrel/ksz884x.c:#define BUS_SPEED_125_MHZ		0x0000
net/ethernet/micrel/ksz884x.c:#define BUS_SPEED_25_MHZ		0x0003
net/ethernet/micrel/ksz884x.c:#define BUS_SPEED_41_66_MHZ		0x0002
net/ethernet/micrel/ksz884x.c:#define BUS_SPEED_62_5_MHZ		0x0001
net/ethernet/micrel/ksz884x.c:	dev->watchdog_timeo = HZ / 2;
net/ethernet/micrel/ksz884x.c:		hw_priv->pme_wait = jiffies + HZ * 2;
net/ethernet/micrel/ksz884x.c:					HZ * 1);
net/ethernet/micrel/ksz884x.c:			HZ * 1);
net/ethernet/micrel/ksz884x.c:					HZ * 2);
net/ethernet/micrel/ksz884x.c:	ksz_init_timer(&hw_priv->mib_timer_info, 500 * HZ / 1000,
net/ethernet/micrel/ksz884x.c:	ksz_init_timer(&priv->monitor_timer_info, 500 * HZ / 1000,
net/ethernet/micrel/ksz884x.c:		msleep(2000 / HZ);
net/ethernet/micrel/ksz884x.c:				next_jiffies += HZ * 1;
net/ethernet/micrel/ksz884x.c:			next_jiffies += HZ * 1 * hw->mib_port_cnt;
net/ethernet/micrel/ksz884x.c:				next_jiffies = jiffies + HZ * 2;
net/ethernet/micrel/ksz884x.c:	writew(BUS_SPEED_125_MHZ, hw->io + KS884X_BUS_CTRL_OFFSET);
net/ethernet/microchip/enc28j60.c:#define TX_TIMEOUT	(4 * HZ)
net/ethernet/msm/msm_rmnet.c:			wake_lock_timeout(&p->wake_lock, HZ / 2);
net/ethernet/msm/qfec.c:	dev->watchdog_timeo  = 2 * HZ;
net/ethernet/msm/qfec.c:	mod_timer(&priv->phy_tmr, jiffies + HZ);
net/ethernet/msm/qfec.c:	mod_timer(&priv->phy_tmr, jiffies + HZ);
net/ethernet/myricom/myri10ge/myri10ge.c:				   HZ);
net/ethernet/myricom/myri10ge/myri10ge.c:			  jiffies + myri10ge_watchdog_timeout * HZ);
net/ethernet/myricom/myri10ge/myri10ge.c:	mgp->watchdog_timer.expires = jiffies + myri10ge_watchdog_timeout * HZ;
net/ethernet/myricom/myri10ge/myri10ge_mcp_gen_header.h:#define MCP_TYPE_ETHZ 0x4554485a	/* "ETHZ" */
net/ethernet/natsemi/natsemi.c:#define NATSEMI_TIMER_FREQ	5*HZ
net/ethernet/natsemi/natsemi.c:#define TX_TIMEOUT  (2*HZ)
net/ethernet/natsemi/natsemi.c:		mod_timer(&np->timer, round_jiffies(jiffies + 1*HZ));
net/ethernet/natsemi/natsemi.c:				next_tick = HZ;
net/ethernet/natsemi/ns83820.c:		if (time_after_eq(jiffies, start + HZ)) {
net/ethernet/natsemi/ns83820.c:	if (time_after(jiffies, dev_trans_start(ndev) + 1*HZ) &&
net/ethernet/natsemi/ns83820.c:	mod_timer(&dev->tx_watchdog, jiffies + 2*HZ);
net/ethernet/natsemi/ns83820.c:	mod_timer(&dev->tx_watchdog, jiffies + 2*HZ);
net/ethernet/natsemi/ns83820.c:	ndev->watchdog_timeo = 5 * HZ;
net/ethernet/natsemi/sonic.h:#define TX_TIMEOUT (3 * HZ)
net/ethernet/neterion/s2io.c:	mod_timer(&sp->alarm_timer, jiffies + HZ / 2);
net/ethernet/neterion/s2io.c:	S2IO_TIMER_CONF(sp->alarm_timer, s2io_alarm_handle, sp, (HZ/2));
net/ethernet/neterion/s2io.c:	wait_event_timeout(sp->msi_wait, sp->msi_detected, HZ/10);
net/ethernet/neterion/s2io.h:#define WATCH_DOG_TIMEOUT		15*HZ
net/ethernet/neterion/vxge/vxge-ethtool.h:#define VXGE_MAX_FLICKER_TIME (60 * HZ) /* 60 seconds */
net/ethernet/neterion/vxge/vxge-main.c:			      HZ / 2);
net/ethernet/neterion/vxge/vxge-main.c:	if (jiffies > fifo->jiffies + HZ / 100) {
net/ethernet/neterion/vxge/vxge-main.c:	if (jiffies > ring->jiffies + HZ / 100) {
net/ethernet/neterion/vxge/vxge-main.c:	mod_timer(&vdev->vp_lockup_timer, jiffies + HZ / 1000);
net/ethernet/neterion/vxge/vxge-main.c:	mod_timer(&vdev->vp_reset_timer, jiffies + HZ / 2);
net/ethernet/neterion/vxge/vxge-main.c:			vxge_poll_vp_reset, vdev, (HZ/2));
net/ethernet/neterion/vxge/vxge-main.h:#define VXGE_LL_WATCH_DOG_TIMEOUT	(15 * HZ)
net/ethernet/nuvoton/w90p910_ether.c:#define TX_TIMEOUT		(HZ/2)
net/ethernet/nvidia/forcedeth.c:#define LINK_TIMEOUT	(3*HZ)
net/ethernet/nvidia/forcedeth.c:#define NV_WATCHDOG_TIMEO	(5*HZ)
net/ethernet/nvidia/forcedeth.c:#define OOM_REFILL	(1+HZ/20)
net/ethernet/nvidia/forcedeth.c:#define POLL_WAIT	(1+HZ/100)
net/ethernet/nvidia/forcedeth.c:#define STATS_INTERVAL	(10*HZ)
net/ethernet/nvidia/forcedeth.c:	while (time_before(jiffies, start + 5*HZ)) {
net/ethernet/oki-semi/pch_gbe/pch_gbe_main.c:#define PCH_GBE_WATCHDOG_PERIOD		(1 * HZ)	/* watchdog time */
net/ethernet/packetengines/hamachi.c:#define TX_TIMEOUT  (5*HZ)
net/ethernet/packetengines/hamachi.c:	hmp->timer.expires = RUN_AT((24*HZ)/10);			/* 2.4 sec. */
net/ethernet/packetengines/hamachi.c:	int next_tick = 10*HZ;
net/ethernet/packetengines/yellowfin.c:#define TX_TIMEOUT  (2*HZ)
net/ethernet/packetengines/yellowfin.c:	int next_tick = 60*HZ;
net/ethernet/packetengines/yellowfin.c:			next_tick = 3*HZ;
net/ethernet/packetengines/yellowfin.c:			next_tick = 60*HZ;
net/ethernet/packetengines/yellowfin.c:	yp->timer.expires = jiffies + 3*HZ;
net/ethernet/pasemi/pasemi_mac.c:#define TX_CLEAN_INTERVAL HZ
net/ethernet/pasemi/pasemi_mac.c:	mac->tx->clean_timer.expires = jiffies+HZ;
net/ethernet/qlogic/netxen/netxen_nic_ethtool.c:			ethtool_cmd_speed_set(ecmd, P3_LINK_SPEED_MHZ *
net/ethernet/qlogic/netxen/netxen_nic_hdr.h:#define FW_POLL_DELAY			(2 * HZ)
net/ethernet/qlogic/netxen/netxen_nic_hdr.h:#define P3_LINK_SPEED_MHZ	100
net/ethernet/qlogic/netxen/netxen_nic_main.c:	netdev->watchdog_timeo     = 5*HZ;
net/ethernet/qlogic/qla3xxx.c:		mod_timer(&qdev->adapter_timer, jiffies + HZ * 1);
net/ethernet/qlogic/qla3xxx.c:	mod_timer(&qdev->adapter_timer, jiffies + HZ * 1);
net/ethernet/qlogic/qla3xxx.c:	mod_timer(&qdev->adapter_timer, jiffies + HZ * 1);
net/ethernet/qlogic/qla3xxx.c:	ndev->watchdog_timeo = 5 * HZ;
net/ethernet/qlogic/qla3xxx.c:	qdev->adapter_timer.expires = jiffies + HZ * 2;	/* two second delay */
net/ethernet/qlogic/qlcnic/qlcnic_hdr.h:#define FW_POLL_DELAY		(1 * HZ)
net/ethernet/qlogic/qlcnic/qlcnic_hdr.h:#define P3P_LINK_SPEED_MHZ	100
net/ethernet/qlogic/qlcnic/qlcnic_hw.c:				(QLCNIC_FILTER_AGE * HZ + tmp_fil->ftime)) {
net/ethernet/qlogic/qlcnic/qlcnic_main.c:	netdev->watchdog_timeo     = 5*HZ;
net/ethernet/qlogic/qlcnic/qlcnic_main.c:			    (QLCNIC_READD_AGE * HZ + tmp_fil->ftime))
net/ethernet/qlogic/qlge/qlge_main.c:	mod_timer(&qdev->timer, jiffies + (5*HZ));
net/ethernet/qlogic/qlge/qlge_main.c:	mod_timer(&qdev->timer, jiffies + (5*HZ));
net/ethernet/qlogic/qlge/qlge_main.c:	mod_timer(&qdev->timer, jiffies + (5*HZ));
net/ethernet/qlogic/qlge/qlge_main.c:	ndev->watchdog_timeo = 10 * HZ;
net/ethernet/qlogic/qlge/qlge_main.c:			&qdev->mpi_port_cfg_work, 3*HZ);
net/ethernet/qlogic/qlge/qlge_main.c:	qdev->timer.expires = jiffies + (5*HZ);
net/ethernet/qlogic/qlge/qlge_mpi.c:	count = jiffies + HZ * MAILBOX_TIMEOUT;
net/ethernet/qlogic/qlge/qlge_mpi.c:	long wait_time = 1 * HZ;
net/ethernet/qlogic/qlge/qlge_mpi.c:			&qdev->mpi_core_to_log, 5 * HZ);
net/ethernet/racal/ni5010.c:	dev->watchdog_timeo	= HZ/20;
net/ethernet/rdc/r6040.c:#define TX_TIMEOUT	(6000 * HZ / 1000)
net/ethernet/realtek/8139cp.c:#define TX_TIMEOUT		(6*HZ)
net/ethernet/realtek/8139too.c:#define TX_TIMEOUT  (6*HZ)
net/ethernet/realtek/8139too.c:			next_tick = HZ / 10;
net/ethernet/realtek/8139too.c:			next_tick = HZ / 10;
net/ethernet/realtek/8139too.c:		next_tick = HZ / 10;
net/ethernet/realtek/8139too.c:		next_tick = HZ / 10;
net/ethernet/realtek/8139too.c:		next_tick = HZ / 10;
net/ethernet/realtek/8139too.c:	next_tick = HZ * 60;
net/ethernet/realtek/8139too.c:static int next_tick = 3 * HZ;
net/ethernet/realtek/atp.c:#define TIMED_CHECKER (HZ/4)
net/ethernet/realtek/atp.c:#define TX_TIMEOUT  (400*HZ/1000)
net/ethernet/realtek/atp.c:	if (tickssofar > 2*HZ) {
net/ethernet/realtek/atp.c:			   time_after(jiffies, dev->last_rx + HZ)) {
net/ethernet/realtek/r8169.c:#define RTL8169_PHY_TIMEOUT	(10*HZ)
net/ethernet/realtek/r8169.c:#define RTL8169_TX_TIMEOUT	(6*HZ)
net/ethernet/realtek/r8169.c:		timeout = HZ/10;
net/ethernet/renesas/sh_eth.c:	mdp->timer.expires = (jiffies + (24 * HZ)) / 10;/* 2.4 sec. */
net/ethernet/renesas/sh_eth.c:	mdp->timer.expires = (jiffies + (24 * HZ)) / 10;/* 2.4 sec. */
net/ethernet/renesas/sh_eth.c:	mod_timer(&mdp->timer, jiffies + (10 * HZ));
net/ethernet/renesas/sh_eth.h:#define TX_TIMEOUT	(5*HZ)
net/ethernet/s6gmac.c:	dev->watchdog_timeo = HZ;
net/ethernet/s6gmac.c:		pllsel |= S6_GREG1_PLLSEL_GMAC_125MHZ << S6_GREG1_PLLSEL_GMAC;
net/ethernet/s6gmac.c:		pllsel |= S6_GREG1_PLLSEL_GMAC_2500KHZ << S6_GREG1_PLLSEL_GMAC;
net/ethernet/s6gmac.c:		pllsel |= S6_GREG1_PLLSEL_GMAC_25MHZ << S6_GREG1_PLLSEL_GMAC;
net/ethernet/seeq/ether3.c:	dev->watchdog_timeo	= 5 * HZ / 100;
net/ethernet/seeq/ether3.c:	priv(dev)->timer.expires = jiffies + HZ / 50; /* leave on for 1/50th second */
net/ethernet/seeq/seeq8005.c:	dev->watchdog_timeo	= HZ/20;
net/ethernet/seeq/seeq8005.c:		j=jiffies+HZ;
net/ethernet/seeq/seeq8005.c:	tmp = jiffies + HZ;
net/ethernet/seeq/seeq8005.c:		while ( ((inw(SEEQ_STATUS) & SEEQSTAT_WINDOW_INT) != SEEQSTAT_WINDOW_INT) && time_before(jiffies, j+HZ))
net/ethernet/seeq/seeq8005.c:	while ( (((status=inw(SEEQ_STATUS)) & SEEQSTAT_FIFO_EMPTY) == 0) && time_before(jiffies, tmp + HZ))
net/ethernet/seeq/sgiseeq.c:	dev->watchdog_timeo	= (200 * HZ) / 1000;
net/ethernet/sfc/efx.c:	net_dev->watchdog_timeo = 5 * HZ;
net/ethernet/sfc/efx.c:static unsigned int efx_monitor_interval = 1 * HZ;
net/ethernet/sfc/falcon_boards.c:		schedule_timeout_uninterruptible(HZ);
net/ethernet/sfc/falcon_boards.c:			schedule_timeout_uninterruptible(HZ);
net/ethernet/sfc/falcon.c:	mod_timer(&nic_data->stats_timer, round_jiffies_up(jiffies + HZ / 2));
net/ethernet/sfc/falcon.c:	schedule_timeout_uninterruptible(HZ / 20);
net/ethernet/sfc/falcon.c:		schedule_timeout_uninterruptible(HZ / 50);
net/ethernet/sfc/falcon.c:	.timeout	= DIV_ROUND_UP(HZ, 20),
net/ethernet/sfc/falcon.c:	unsigned long timeout = jiffies + 1 + DIV_ROUND_UP(HZ, 10);
net/ethernet/sfc/falcon.c:	unsigned long timeout = jiffies + 1 + DIV_ROUND_UP(HZ, 100);
net/ethernet/sfc/mcdi.c:#define MCDI_RPC_TIMEOUT       (10 * HZ)
net/ethernet/sfc/mcdi_mon.c:	if (time_before(jiffies, hwmon->last_update + HZ))
net/ethernet/sfc/mtd.c:		schedule_timeout(HZ / 10);
net/ethernet/sfc/nic.c:			jiffies + EFX_INT_ERROR_EXPIRE * HZ;
net/ethernet/sfc/qt202x_phy.c:#define BUG17190_INTERVAL (2 * HZ)
net/ethernet/sfc/qt202x_phy.c:#define QT2025C_MAX_FWSTART_TIME (25 * HZ / 10)
net/ethernet/sfc/qt202x_phy.c:#define QT2025C_MAX_HEARTB_TIME (5 * HZ)
net/ethernet/sfc/selftest.c:#define IRQ_TIMEOUT HZ
net/ethernet/sfc/selftest.c:			schedule_timeout_uninterruptible(HZ / 10);
net/ethernet/sfc/selftest.c:		schedule_timeout_uninterruptible(HZ / 10);
net/ethernet/sfc/siena_sriov.c:	unsigned timeout = HZ;
net/ethernet/sfc/tenxpress.c:#define LNPGA_PDOWN_WAIT	(HZ / 5)
net/ethernet/sfc/tenxpress.c:	schedule_timeout_uninterruptible(HZ / 5); /* 200ms */
net/ethernet/sfc/txc43128_phy.c:#define BUG10934_RESET_INTERVAL (5 * HZ)
net/ethernet/sgi/ioc3-eth.c:	dev->watchdog_timeo	= 5 * HZ;
net/ethernet/sgi/ioc3-eth.c:	ip->ioc3_timer.expires = jiffies + ((12 * HZ)/10); /* 1.2s */
net/ethernet/sgi/ioc3-eth.c:	ip->ioc3_timer.expires = jiffies + (12 * HZ)/10;  /* 1.2 sec. */
net/ethernet/sgi/meth.c:#define TX_TIMEOUT (400*HZ/1000)
net/ethernet/silan/sc92031.c:#define  TX_TIMEOUT     (4*HZ)
net/ethernet/sis/sis190.c:#define SIS190_PHY_TIMEOUT	(10*HZ)
net/ethernet/sis/sis190.c:#define SIS190_TX_TIMEOUT	(6*HZ)
net/ethernet/sis/sis190.c:		mod_timer(&tp->timer, jiffies + HZ/10);
net/ethernet/sis/sis900.c:#define TX_TIMEOUT  (4*HZ)
net/ethernet/sis/sis900.c:		sis_priv->timer.expires = jiffies + HZ;
net/ethernet/sis/sis900.c:	sis_priv->timer.expires = jiffies + HZ;
net/ethernet/sis/sis900.c:	static const int next_tick = 5*HZ;
net/ethernet/sis/sis900.c:	unsigned long timeout = jiffies + 5 * HZ;
net/ethernet/smsc/epic100.c:#define TX_TIMEOUT  (2*HZ)
net/ethernet/smsc/epic100.c:	ep->timer.expires = jiffies + 3*HZ;
net/ethernet/smsc/epic100.c:	int next_tick = 5*HZ;
net/ethernet/smsc/smc9194.c:	dev->watchdog_timeo		= HZ/20;
net/ethernet/smsc/smc91c92_cs.c:#define TX_TIMEOUT		((400*HZ)/1000)
net/ethernet/smsc/smc91c92_cs.c:    if (time_after(jiffies, dev->last_rx + HZ)) {
net/ethernet/smsc/smc91c92_cs.c:	smc->fast_poll = HZ;
net/ethernet/smsc/smc91c92_cs.c:    smc->media.expires = jiffies + HZ;
net/ethernet/smsc/smc91c92_cs.c:    smc->media.expires = jiffies + HZ;
net/ethernet/smsc/smc91c92_cs.c:	smc->media.expires = jiffies + HZ/100;
net/ethernet/sun/cassini.c:#define CAS_LINK_TIMEOUT                (22*HZ/10)
net/ethernet/sun/cassini.c:#define CAS_TX_TIMEOUT			(HZ)
net/ethernet/sun/cassini.c:		    (i & BIM_CFG_66MHZ) ? "66" : "33",
net/ethernet/sun/cassini.c:		link_transition_timeout = linkdown_timeout * HZ;
net/ethernet/sun/cassini.c: * Linux.  This will default to DEFAULT_LINKDOWN_TIMEOUT * HZ.
net/ethernet/sun/cassini.c: * module because 'HZ' in actually a function call on some flavors of
net/ethernet/sun/cassini.h:#define    BIM_CFG_66MHZ            0x008   /* (ro) 1 = 66MHz, 0 = < 66MHz */
net/ethernet/sun/niu.c:#define NIU_TX_TIMEOUT			(5 * HZ)
net/ethernet/sun/niu.c:		np->timer.expires = jiffies + HZ;
net/ethernet/sun/niu.c:		np->timer.expires = jiffies + HZ;
net/ethernet/sun/niu.c:		np->timer.expires = jiffies + HZ;
net/ethernet/sun/niu.c:		np->timer.expires = jiffies + HZ;
net/ethernet/sun/niu.c:		off = 1 * HZ;
net/ethernet/sun/niu.c:		off = 5 * HZ;
net/ethernet/sun/niu.c:		val |= BMAC_XIF_CONFIG_25MHZ_CLOCK;
net/ethernet/sun/niu.c:		val &= ~BMAC_XIF_CONFIG_25MHZ_CLOCK;
net/ethernet/sun/niu.c:		val |= XMAC_CONFIG_SEL_CLK_25MHZ;
net/ethernet/sun/niu.c:		val &= ~XMAC_CONFIG_SEL_CLK_25MHZ;
net/ethernet/sun/niu.h:#define  BMAC_XIF_CONFIG_25MHZ_CLOCK	0x0000000000000080ULL
net/ethernet/sun/niu.h:#define  PLL_RX_CFG_EQ_LP_1084MHZ	0x00400000
net/ethernet/sun/niu.h:#define  PLL_RX_CFG_EQ_LP_135MHZ	0x00780000
net/ethernet/sun/niu.h:#define  PLL_RX_CFG_EQ_LP_156MHZ	0x00700000
net/ethernet/sun/niu.h:#define  PLL_RX_CFG_EQ_LP_216MHZ	0x00680000
net/ethernet/sun/niu.h:#define  PLL_RX_CFG_EQ_LP_304MHZ	0x00600000
net/ethernet/sun/niu.h:#define  PLL_RX_CFG_EQ_LP_402MHZ	0x00580000
net/ethernet/sun/niu.h:#define  PLL_RX_CFG_EQ_LP_573MHZ	0x00500000
net/ethernet/sun/niu.h:#define  PLL_RX_CFG_EQ_LP_805MHZ	0x00480000
net/ethernet/sun/niu.h:#define  XMAC_CONFIG_SEL_CLK_25MHZ	0x0000000080000000ULL
net/ethernet/sun/sunbmac.c:	bp->bigmac_timer.expires = jiffies + (12 * HZ) / 10;
net/ethernet/sun/sunbmac.c:		bp->bigmac_timer.expires = jiffies + ((12 * HZ)/10); /* 1.2 sec. */
net/ethernet/sun/sunbmac.c:	dev->watchdog_timeo = 5*HZ;
net/ethernet/sun/sungem.c:	dev->watchdog_timeo = 5 * HZ;
net/ethernet/sun/sungem.c:		mod_timer(&gp->link_timer, jiffies + ((12 * HZ) / 10));
net/ethernet/sun/sungem.c:	mod_timer(&gp->link_timer, jiffies + ((12 * HZ) / 10));
net/ethernet/sun/sungem.c:	mod_timer(&gp->link_timer, jiffies + ((12 * HZ) / 10));
net/ethernet/sun/sunhme.c:	dev->watchdog_timeo = 5*HZ;
net/ethernet/sun/sunhme.c:	dev->watchdog_timeo = 5*HZ;
net/ethernet/sun/sunhme.c:		hp->happy_timer.expires = jiffies + ((12 * HZ)/10); /* 1.2 sec. */
net/ethernet/sun/sunhme.c:	hp->happy_timer.expires = jiffies + (12 * HZ)/10;  /* 1.2 sec. */
net/ethernet/sun/sunqe.c:	dev->watchdog_timeo = 5*HZ;
net/ethernet/sun/sunvnet.h:#define VNET_TX_TIMEOUT			(5 * HZ)
net/ethernet/ti/cpsw_ale.c:	ale->ageout = ageout * HZ;
net/ethernet/ti/cpsw_ale.c:	ale->ageout = ale->params.ale_ageout * HZ;
net/ethernet/ti/cpsw.c:	unsigned long timeout = jiffies + HZ;
net/ethernet/ti/davinci_cpdma.c:	timeout = jiffies + HZ/10;	/* 100 msec */
net/ethernet/ti/davinci_cpdma.c:		unsigned long timeout = jiffies + HZ/10;
net/ethernet/tile/tilepro.c:#define TILE_NET_RETRY_INTERVAL (5 * HZ)
net/ethernet/tile/tilepro.c:#define TILE_NET_TIMEOUT (5 * HZ)
net/ethernet/ti/tlan.c:		tlan_set_timer(dev, (10*HZ), TLAN_TIMER_FINISH_RESET);
net/ethernet/ti/tlan.c:			tlan_set_timer(dev, (10*HZ), TLAN_TIMER_LINK_BEAT);
net/ethernet/ti/tlan.c:			tlan_set_timer(dev, (2*HZ), TLAN_TIMER_LINK_BEAT);
net/ethernet/ti/tlan.c:	tlan_set_timer(dev, (2*HZ), TLAN_TIMER_LINK_BEAT);
net/ethernet/ti/tlan.c:			tlan_set_timer(dev, (2*HZ), TLAN_TIMER_PHY_FINISH_AN);
net/ethernet/ti/tlan.c:		tlan_set_timer(dev, (400*HZ/1000), TLAN_TIMER_PHY_PDOWN);
net/ethernet/ti/tlan.c:		tlan_set_timer(dev, (40*HZ/1000), TLAN_TIMER_PHY_PDOWN);
net/ethernet/ti/tlan.c:	tlan_set_timer(dev, (4*HZ), TLAN_TIMER_FINISH_RESET);
net/ethernet/ti/tlan.c:		tlan_set_timer(dev, (8*HZ), TLAN_TIMER_PHY_FINISH_AN);
net/ethernet/ti/tlan.c:	tlan_set_timer(dev, (HZ/10), TLAN_TIMER_FINISH_RESET);
net/ethernet/ti/tlan.c:	tlan_set_timer(dev, (HZ/20), TLAN_TIMER_PHY_PUP);
net/ethernet/ti/tlan.c:	tlan_set_timer(dev, (HZ/20), TLAN_TIMER_PHY_RESET);
net/ethernet/ti/tlan.c:	tlan_set_timer(dev, (HZ/20), TLAN_TIMER_PHY_START_LINK);
net/ethernet/ti/tlan.h:#define TLAN_TIMER_ACT_DELAY		(HZ/10)
net/ethernet/ti/tlan.h:#define TX_TIMEOUT		(10*HZ)	 /* We need time for auto-neg */
net/ethernet/toshiba/ps3_gelic_net.h:#define GELIC_NET_WATCHDOG_TIMEOUT      5*HZ
net/ethernet/toshiba/ps3_gelic_wireless.c:	rc = wait_for_completion_timeout(&wl->assoc_done, HZ * 4);/*FIXME*/
net/ethernet/toshiba/ps3_gelic_wireless.c:		schedule_delayed_work(&wl->assoc_work, HZ/10); /*FIXME*/
net/ethernet/toshiba/ps3_gelic_wireless.c:		wait_for_completion_timeout(&wl->scan_done, HZ);
net/ethernet/toshiba/ps3_gelic_wireless.c:	wl->scan_age = 5*HZ; /* FIXME */
net/ethernet/toshiba/spider_net.h:#define SPIDER_NET_ANEG_TIMER			(HZ)
net/ethernet/toshiba/spider_net.h:#define SPIDER_NET_TX_TIMER			(HZ/5)
net/ethernet/toshiba/spider_net.h:#define SPIDER_NET_WATCHDOG_TIMEOUT		50*HZ
net/ethernet/toshiba/tc35815.c:	unsigned long timeout = jiffies + HZ;
net/ethernet/toshiba/tc35815.c:	unsigned long timeout = jiffies + HZ;
net/ethernet/tundra/tsi108_eth.c:#define CHECK_PHY_INTERVAL (HZ/2)
net/ethernet/via/via-rhine.c:#define TX_TIMEOUT	(2*HZ)
net/ethernet/xilinx/xilinx_emaclite.c:#define TX_TIMEOUT		(60*HZ)		/* Tx timeout is 60 seconds. */
net/ethernet/xilinx/xilinx_emaclite.c:		TX_TIMEOUT * 1000UL / HZ);
net/ethernet/xircom/xirc2ps_cs.c:#define TX_TIMEOUT	((400*HZ)/1000)
net/ethernet/xircom/xirc2ps_cs.c:	if (duration >= HZ/10) { /* if more than about 1/10 second */
net/ethernet/xircom/xirc2ps_cs.c:	    maxrx_bytes = (bytes_rcvd * (HZ/10)) / duration;
net/ethernet/xscale/ixp2000/enp2611.c:	link_check_timer.expires = jiffies + HZ / 10;
net/ethernet/xscale/ixp4xx_eth.c:#define MDIO_INTERVAL		(3 * HZ)
net/fddi/skfp/h/skfbi.h:#define PCI_66MHZCAP	0x0020	/* Bit 5:	66 MHz PCI bus clock capable */
net/fddi/skfp/h/targetos.h:#define	TICKS_PER_SECOND	HZ
net/hamradio/6pack.c:#define SIXP_INIT_RESYNC_TIMEOUT	(3*HZ/2) /* in 1 s */
net/hamradio/6pack.c:#define SIXP_RESYNC_TIMEOUT		5*HZ	/* in 1 s */
net/hamradio/6pack.c:#define SIXP_SLOTTIME			(HZ/10)	/* in 1 s */
net/hamradio/6pack.c:#define SIXP_TXDELAY			(HZ/4)	/* in 1 s */
net/hamradio/6pack.c:		mod_timer(&sp->tx_t, jiffies + ((when + 1) * HZ) / 100);
net/hamradio/baycom_epp.c:	bc->bitrate = i * (8 * HZ) / tstart;
net/hamradio/baycom_epp.c:	if (time_after_eq(cur_jiffies, bc->debug_vals.last_jiffies + HZ)) {
net/hamradio/baycom_epp.c:	while (time_before(jiffies, tstart + HZ/3)) {
net/hamradio/baycom_par.c:	if (time_after_eq(cur_jiffies, bc->debug_vals.last_jiffies + HZ)) {
net/hamradio/baycom_ser_fdx.c:	if (time_after_eq(cur_jiffies, bc->debug_vals.last_jiffies + HZ)) {
net/hamradio/baycom_ser_hdx.c:	if (time_after_eq(cur_jiffies, bc->debug_vals.last_jiffies + HZ)) {
net/hamradio/dmascc.c:#define TMR_0_HZ        25600	/* Frequency of timer 0 */
net/hamradio/dmascc.c:	int dcdoff;		/* [1/TMR_0_HZ] */
net/hamradio/dmascc.c:	int dcdon;		/* [1/TMR_0_HZ] */
net/hamradio/dmascc.c:	int rtsoff;		/* [1/TMR_0_HZ] */
net/hamradio/dmascc.c:	int slottime;		/* [1/TMR_0_HZ] */
net/hamradio/dmascc.c:	int txdelay;		/* [1/TMR_0_HZ] */
net/hamradio/dmascc.c:	int txpause;		/* [1/TMR_0_HZ] */
net/hamradio/dmascc.c:	int txtail;		/* [1/TMR_0_HZ] */
net/hamradio/dmascc.c:	int txtimeout;		/* [1/HZ] */
net/hamradio/dmascc.c:	int waittime;		/* [1/TMR_0_HZ] */
net/hamradio/dmascc.c:				outb((hw[h].tmr_hz / TMR_0_HZ) & 0xFF,
net/hamradio/dmascc.c:				outb((hw[h].tmr_hz / TMR_0_HZ) >> 8,
net/hamradio/dmascc.c:				outb((TMR_0_HZ / HZ * 10) & 0xFF, t1[i]);
net/hamradio/dmascc.c:				outb((TMR_0_HZ / HZ * 10) >> 8, t1[i]);
net/hamradio/dmascc.c:				/* Timer 0: LSB+MSB, Mode 3, TMR_0_HZ */
net/hamradio/dmascc.c:				/* Timer 1: LSB+MSB, Mode 0, HZ/10 */
net/hamradio/dmascc.c:					    t_val > TMR_0_HZ / HZ * 10)
net/hamradio/dmascc.c:		udelay(2000000 / TMR_0_HZ);
net/hamradio/dmascc.c:	while (jiffies - time < 2 + HZ / TMR_0_HZ);
net/hamradio/Kconfig:	bool "additional delay for PA0HZP OptoSCC compatible boards"
net/hamradio/mkiss.c:		if (time_before(jiffies, dev->trans_start + 20 * HZ)) {
net/hamradio/scc.c:/* If the card has a latch for the interrupt vector (like the PA0HZP card)
net/hamradio/scc.c:		scc->tx_t.expires = jiffies + (when*HZ)/100;
net/hamradio/scc.c:	scc->tx_wdog.expires = jiffies + HZ*duration;
net/hamradio/scc.c:		scc->tx_wdog.expires = jiffies + HZ*scc->kiss.maxdefer;
net/hamradio/scc.c:		scc->tx_wdog.expires = jiffies + HZ*scc->kiss.maxkeyup;
net/hamradio/yam.c:	unsigned long timeout = jiffies + HZ / 10;
net/hamradio/yam.c:	unsigned long timeout = jiffies + ((ms * HZ) / 1000);
net/hamradio/yam.c:	yam_timer.expires = jiffies + HZ / 100;
net/hamradio/yam.c:	yam_timer.expires = jiffies + HZ / 100;
net/hippi/rrunner.c:	myjif = jiffies + 5 * HZ;
net/hippi/rrunner.c:	rrpriv->timer.expires = RUN_AT(5*HZ);
net/hippi/rrunner.c:	rrpriv->timer.expires = RUN_AT(5*HZ);           /* 5 sec. watchdog */
net/hyperv/netvsc.c:	t = wait_for_completion_timeout(&net_device->channel_init_wait, 5*HZ);
net/hyperv/netvsc.c:	t = wait_for_completion_timeout(&net_device->channel_init_wait, 5*HZ);
net/hyperv/rndis_filter.c:	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
net/hyperv/rndis_filter.c:	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
net/hyperv/rndis_filter.c:	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
net/irda/au1k_ir.c:	aup->timer.expires = RUN_AT((3 * HZ));
net/irda/au1k_ir.c:#define IR_PHYCLK_40MHZ		(0 << 2)
net/irda/au1k_ir.c:#define IR_PHYCLK_48MHZ		(1 << 2)
net/irda/au1k_ir.c:#define IR_PHYCLK_56MHZ		(2 << 2)
net/irda/au1k_ir.c:#define IR_PHYCLK_64MHZ		(3 << 2)
net/irda/au1k_ir.c:	irda_write(aup, IR_CONFIG_2, IR_PHYCLK_48MHZ | IR_ONE_PIN);
net/irda/bfin_sir.c:#define DMA_SIR_RX_FLUSH_JIFS  (HZ * 4 / 250)
net/irda/bfin_sir.c:	ticks = 1 + mtt / (USEC_PER_SEC / HZ);
net/irda/irda-usb.c:		mod_timer(&self->rx_defer_timer, jiffies + (10 * HZ / 1000));
net/irda/smsc-ircc2.c:	dev->watchdog_timeo  = HZ * 2;  /* Allow enough time for speed change */
net/irda/stir4200.c:	ticks = us / (1000000 / HZ);
net/irda/vlsi_ir.c:	ndev->watchdog_timeo  = 500*HZ/1000;	/* max. allowed turn time for IrLAP */
net/phy/broadcom.c:#define  MII_BCM54XX_EXP_EXP08_RJCT_2MHZ	0x0001
net/phy/broadcom.c:					MII_BCM54XX_EXP_EXP08_RJCT_2MHZ);
net/phy/micrel.c:#define KSZ8051_RMII_50MHZ_CLK			(1 << 7)
net/phy/micrel.c:	if (phydev->dev_flags & MICREL_PHY_50MHZ_CLK) {
net/phy/micrel.c:		regval |= KSZ8051_RMII_50MHZ_CLK;
net/phy/phy.c:			PHY_STATE_TIME * HZ);
net/phy/phy.c:	schedule_delayed_work(&phydev->state_queue, HZ);
net/ppp/ppp_async.c:static int flag_time = HZ;
net/ppp/ppp_generic.c:		idle.recv_idle = (jiffies - ppp->last_recv) / HZ;
net/ppp/ppp_generic.c:		idle.xmit_idle = (jiffies - ppp->last_xmit) / HZ;
net/ppp/pppolac.c:					now - meta->timestamp < HZ &&
net/ppp/pppopns.c:		    now - meta->timestamp < (HZ - 5) &&
net/ppp/pppopns.c:			po->recv_queue_timer.expires = now + HZ;
net/sb1000.c:static const int Sb1000TimeOutJiffies = 7 * HZ;
net/sb1000.c:static const int TimeOutJiffies = (875 * HZ) / 100;
net/slip/slip.c:	dev->watchdog_timeo	= 20*HZ;
net/slip/slip.c:		if (time_before(jiffies, dev_trans_start(dev) + 20 * HZ))  {
net/slip/slip.c:						jiffies + sl->keepalive * HZ;
net/slip/slip.c:						jiffies + sl->keepalive * HZ);
net/slip/slip.c:					jiffies + sl->keepalive * HZ);
net/slip/slip.c:						jiffies + sl->outfill * HZ);
net/slip/slip.c:						jiffies + sl->outfill * HZ);
net/slip/slip.c:		mod_timer(&sl->keepalive_timer, jiffies+sl->keepalive*HZ);
net/slip/slip.c:		mod_timer(&sl->outfill_timer, jiffies+sl->outfill*HZ);
net/slip/slip.c:		sl->keepalive_timer.expires = jiffies + sl->keepalive * HZ;
net/slip/slip.c:		sl->outfill_timer.expires = jiffies + sl->outfill * HZ;
net/slip/slip.c:	unsigned long timeout = jiffies + HZ;
net/tokenring/3c359.c:		if (time_after(jiffies, t + 10 * HZ)) {
net/tokenring/3c359.c:		if (time_after(jiffies, t + 10 * HZ)) {
net/tokenring/3c359.c:		if (time_after(jiffies, t + 10 * HZ)) {
net/tokenring/3c359.c:		if (time_after(jiffies, t + 10 * HZ)) {
net/tokenring/3c359.c:		if (time_after(jiffies, t + 10 * HZ)) {
net/tokenring/3c359.c:		if (time_after(jiffies, t + 10 * HZ)) {
net/tokenring/3c359.c:		if (time_after(jiffies, t + 15 * HZ)) {
net/tokenring/3c359.c:		if (time_after(jiffies, t + 40 * HZ)) {
net/tokenring/3c359.c:		if (time_after(jiffies, t + 40 * HZ)) {
net/tokenring/3c359.c:		if (time_after(jiffies, t + 40 * HZ)) {
net/tokenring/ibmtr.c:		if(i!=0) break; /*prob. a signal, like the i>24*HZ case above */
net/tokenring/ibmtr.c:		if (i>(245*HZ)/10) break; /* fancier than if (i==25*HZ) */
net/tokenring/ibmtr.c:		i= interruptible_sleep_on_timeout(&ti->wait_for_reset, 25 * HZ);
net/tokenring/ibmtr.c:	i = sleep_on_timeout(&ti->wait_for_reset, 4 * HZ);
net/tokenring/ibmtr.c:					TR_RETRY_INTERVAL/HZ);
net/tokenring/ibmtr.c:					TR_RETRY_INTERVAL/HZ);
net/tokenring/ibmtr.c:					TR_RETRY_INTERVAL/HZ);
net/tokenring/ibmtr.c:						TR_RETRY_INTERVAL/HZ);
net/tokenring/lanstreamer.c:		if (time_after(jiffies, t + 40 * HZ)) {
net/tokenring/lanstreamer.c:			interruptible_sleep_on_timeout(&streamer_priv->srb_wait, 5 * HZ);
net/tokenring/lanstreamer.c:					       jiffies + 60 * HZ);
net/tokenring/olympic.c:			if (time_after(jiffies, t + 10*HZ)) {
net/tokenring/olympic.c:		if(time_after(jiffies, t + 15*HZ)) {
net/tokenring/olympic.c:			if(time_after(jiffies, t + 2*HZ)) {
net/tokenring/olympic.c:		if(time_after(jiffies, t + 40*HZ)) {
net/tokenring/olympic.c:		t = schedule_timeout_interruptible(60*HZ);
net/tokenring/smctr.c:        dev->watchdog_timeo	= HZ;
net/tokenring/tms380tr.c:	dev->watchdog_timeo	= HZ;
net/tokenring/tms380tr.c:	tmp = jiffies + time/(1000000/HZ);
net/tokenring/tms380tr.c:	tp->timer.expires	= jiffies + 1*HZ;
net/tokenring/tms380tr.c:	tp->timer.expires = jiffies + 2*HZ;
net/tokenring/tms380tr.c:	tp->timer.expires	= jiffies + 2*HZ;
net/tokenring/tms380tr.c:	tp->timer.expires	= jiffies + 30*HZ;
net/tokenring/tms380tr.h:#define SEND_TIMEOUT 10*HZ
net/usb/catc.c:#define STATS_UPDATE		(HZ)	/* Time between stats updates */
net/usb/catc.c:#define TX_TIMEOUT		(5*HZ)	/* Max time the queue can be stopped */
net/usb/hso.c:#define	HSO_NET_TX_TIMEOUT		(HZ*10)
net/usb/ipheth.c:#define IPHETH_CARRIER_CHECK_TIMEOUT round_jiffies_relative(1 * HZ)
net/usb/ipheth.c:#define IPHETH_CTRL_TIMEOUT     (5 * HZ)
net/usb/ipheth.c:#define IPHETH_TX_TIMEOUT       (5 * HZ)
net/usb/kaweth.c:#define KAWETH_TX_TIMEOUT		(5 * HZ)
net/usb/kaweth.c:			schedule_delayed_work(&kaweth->lowmem_work, HZ/4);
net/usb/kaweth.c:		schedule_delayed_work(&kaweth->lowmem_work, HZ/4);
net/usb/pegasus.c:#define CARRIER_CHECK_DELAY (2 * HZ)
net/usb/pegasus.h:#define	PEGASUS_TX_TIMEOUT	(HZ*10)
net/usb/pegasus.h:#define	REG_TIMEOUT		(HZ)
net/usb/rtl8150.c:#define	RTL8150_TX_TIMEOUT	(HZ)
net/usb/rtl8150.c:	int i = HZ;
net/usb/sierra_net.c:#define SIERRA_NET_SYNCDELAY (2*HZ)
net/usb/smsc75xx.c:	} while (!time_after(jiffies, start_time + HZ));
net/usb/smsc75xx.c:	} while (!time_after(jiffies, start_time + HZ));
net/usb/smsc75xx.c:	} while (!time_after(jiffies, start_time + HZ));
net/usb/smsc95xx.c:	} while (!time_after(jiffies, start_time + HZ));
net/usb/smsc95xx.c:	} while (!time_after(jiffies, start_time + HZ));
net/usb/smsc95xx.c:	} while (!time_after(jiffies, start_time + HZ));
net/usb/usbnet.c:#define THROTTLE_JIFFIES	(HZ/8)
net/usb/usbnet.c:#define TX_TIMEOUT_JIFFIES	(5*HZ)
net/usb/usbnet.c:// us (it polls at HZ/4 usually) before we report too many false errors.
net/virtio_net.c:		schedule_delayed_work(&vi->refill, HZ/2);
net/vmxnet3/vmxnet3_drv.c:	netdev->watchdog_timeo = 5 * HZ;
net/wan/cosa.c:#define TX_TIMEOUT	(5*HZ)
net/wan/cycx_x25.c:		mod_timer(&chan->timer, jiffies+chan->idle_tmout*HZ);
net/wan/dscc4.c:#define DSCC4_HZ_MAX		33000000
net/wan/dscc4.c:#define TX_TIMEOUT		(HZ/10)
net/wan/dscc4.c:        dpriv->timer.expires = jiffies + 10*HZ;
net/wan/dscc4.c:	if ((hz < 0) || (hz > DSCC4_HZ_MAX))
net/wan/farsync.c:#define FST_TX_TIMEOUT          (2*HZ)
net/wan/hdlc_cisco.c:	data->time = htonl((jiffies - INITIAL_JIFFIES) * (1000 / HZ));
net/wan/hdlc_cisco.c:	st->timer.expires = jiffies + HZ; /* First poll after 1 s */
net/wan/hdlc_cisco.c:	st->timer.expires = jiffies + st->settings.interval * HZ;
net/wan/hdlc_cisco.c:	    time_after(jiffies, st->last_poll + st->settings.timeout * HZ)) {
net/wan/hdlc_cisco.c:	/* we will need do_div here if 1000 % HZ != 0 */
net/wan/hdlc_fr.c:			state(hdlc)->settings.t391 * HZ;
net/wan/hdlc_fr.c:				    state(hdlc)->settings.t392 * HZ);
net/wan/hdlc_fr.c:			state(hdlc)->settings.t392 * HZ;
net/wan/hdlc_fr.c:		state(hdlc)->timer.expires = jiffies + HZ;
net/wan/hdlc_ppp.c:				  jiffies + ppp->keepalive_interval * HZ);
net/wan/hdlc_ppp.c:			  jiffies + ppp->req_timeout * HZ);
net/wan/hdlc_ppp.c:				ppp->keepalive_interval * HZ;
net/wan/hdlc_ppp.c:			       ppp->keepalive_timeout * HZ)) {
net/wan/ixp4xx_hss.c:#define CLK42X_SPEED_1536KHZ	((   43 << 22) | ( 18 << 12) |   47)
net/wan/ixp4xx_hss.c:#define CLK42X_SPEED_1544KHZ	((   43 << 22) | ( 33 << 12) |  192)
net/wan/ixp4xx_hss.c:#define CLK42X_SPEED_2048KHZ	((   32 << 22) | ( 34 << 12) |   63)
net/wan/ixp4xx_hss.c:#define CLK42X_SPEED_4096KHZ	((   16 << 22) | ( 34 << 12) |  127)
net/wan/ixp4xx_hss.c:#define CLK42X_SPEED_512KHZ	((  130 << 22) | (  2 << 12) |   15)
net/wan/ixp4xx_hss.c:#define CLK42X_SPEED_8192KHZ	((    8 << 22) | ( 34 << 12) |  255)
net/wan/ixp4xx_hss.c:#define CLK46X_SPEED_1536KHZ	((   43 << 22) | (152 << 12) |  383)
net/wan/ixp4xx_hss.c:#define CLK46X_SPEED_1544KHZ	((   43 << 22) | ( 66 << 12) |  385)
net/wan/ixp4xx_hss.c:#define CLK46X_SPEED_2048KHZ	((   32 << 22) | (280 << 12) |  511)
net/wan/ixp4xx_hss.c:#define CLK46X_SPEED_4096KHZ	((   16 << 22) | (280 << 12) | 1023)
net/wan/ixp4xx_hss.c:#define CLK46X_SPEED_512KHZ	((  130 << 22) | ( 24 << 12) |  127)
net/wan/ixp4xx_hss.c:#define CLK46X_SPEED_8192KHZ	((    8 << 22) | (280 << 12) | 2047)
net/wan/ixp4xx_hss.c:			port->clock_reg = CLK42X_SPEED_2048KHZ;
net/wan/ixp4xx_hss.c:	port->clock_reg = CLK42X_SPEED_2048KHZ;
net/wan/lmc/lmc_main.c:	dev->watchdog_timeo = HZ; /* 1 second */
net/wan/lmc/lmc_main.c:    sc->timer.expires = jiffies + (HZ);
net/wan/lmc/lmc_main.c:    sc->timer.expires = jiffies + HZ;
net/wan/lmc/lmc_var.h:#define TX_TIMEOUT (2*HZ)
net/wan/pc300.h:#define PC300_TX_TIMEOUT	(2*HZ)
net/wan/sbni.h:#define SBNI_TIMEOUT	(HZ/10)
net/wan/sdla.c:	if ((jiffs = sdla_z80_poll(dev, 0, 8*HZ, Z80_SCC_OK, Z80_SCC_BAD)) < 0)
net/wan/sdla.c:	if (sdla_z80_poll(dev, 0, 3*HZ, Z80_READY, 0) < 0)
net/wan/sdla.c:	jiffs = jiffies + HZ;  /* 1 second is plenty */
net/wan/wanxl.c:	timeout = jiffies + 20 * HZ;
net/wan/wanxl.c:	timeout = jiffies + 5 * HZ;
net/wan/wanxl.c:	timeout = jiffies + HZ;
net/wan/wanxl.c:	timeout = jiffies + HZ;
net/wan/wanxl.c:	unsigned long timeout = jiffies + 5 * HZ;
net/wan/x25_asy.c:	dev->watchdog_timeo	= HZ*20;
net/wimax/i2400m/control.c:		ack_timeout = 5 * HZ;
net/wimax/i2400m/control.c:		ack_timeout = HZ;
net/wimax/i2400m/driver.c:	result = wait_for_completion_timeout(&ctx.completion, 4*HZ);
net/wimax/i2400m/i2400m-usb.h:	EDC_ERROR_TIMEFRAME = HZ,
net/wimax/i2400m/netdev.c:	I2400M_TX_TIMEOUT = 21 * HZ,
net/wimax/i2400m/netdev.c:				    net_dev->watchdog_timeo - HZ/2);
net/wimax/i2400m/op-rfkill.c:		5 * HZ);
net/wimax/i2400m/sdio.c:	timeout = get_jiffies_64() + ioe_timeout * HZ;
net/wimax/i2400m/sdio-fw.c:				    2 * HZ);
net/wimax/i2400m/usb-fw.c:			&notif_completion, HZ);
net/wireless/adm8211.c:	dev->wiphy->bands[IEEE80211_BAND_2GHZ] = &priv->band;
net/wireless/adm8211.c:			rx_status.band = IEEE80211_BAND_2GHZ;
net/wireless/airo.c:			ai->expires = RUN_AT(3*HZ);
net/wireless/airo.c:		ai->expires = RUN_AT(3*HZ);
net/wireless/airo.c:	ai->scan_timeout = RUN_AT(3*HZ);
net/wireless/airo.c:	apriv->expires = RUN_AT(HZ*3);
net/wireless/airo.c:		schedule_timeout_uninterruptible(3 * HZ);
net/wireless/at76c50x-usb.c:		mod_timer(&ledtrig_tx_timer, jiffies + HZ / 4);
net/wireless/at76c50x-usb.c:		mod_timer(&ledtrig_tx_timer, jiffies + HZ / 4);
net/wireless/at76c50x-usb.c:				   need_remap ? 0 : 2 * HZ);
net/wireless/at76c50x-usb.c:	priv->hw->wiphy->bands[IEEE80211_BAND_2GHZ] = &at76_supported_band;
net/wireless/at76c50x-usb.c:	schedule_timeout_interruptible(2 * HZ + 1);
net/wireless/at76c50x-usb.c:		schedule_timeout_interruptible(HZ / 10);	/* 100 ms */
net/wireless/at76c50x-usb.c:		schedule_timeout_interruptible(HZ / 5 + 1);
net/wireless/at76c50x-usb.h:#define CMD_COMPLETION_TIMEOUT	(5 * HZ)
net/wireless/at76c50x-usb.h:#define SCAN_POLL_INTERVAL	(HZ / 4)
net/wireless/ath/ath5k/ani.c:	} else if (ah->ah_current_channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/ath5k/ath5k.h:	AR5K_BWMODE_10MHZ	= 2,
net/wireless/ath/ath5k/ath5k.h: * @AR5K_BWMODE_10MHZ: Half rate
net/wireless/ath/ath5k/ath5k.h:	AR5K_BWMODE_40MHZ	= 3
net/wireless/ath/ath5k/ath5k.h: * @AR5K_BWMODE_40MHZ: Turbo
net/wireless/ath/ath5k/ath5k.h:	AR5K_BWMODE_5MHZ	= 1,
net/wireless/ath/ath5k/ath5k.h: * @AR5K_BWMODE_5MHZ: Quarter rate
net/wireless/ath/ath5k/ath5k.h:#define AR5K_INIT_TXF2TXD_START_DELAY_10MHZ	12
net/wireless/ath/ath5k/ath5k.h:#define AR5K_INIT_TXF2TXD_START_DELAY_5MHZ	13
net/wireless/ath/ath5k/ath5k.h: * struct ath5k_athchan_2ghz - 2GHz to 5GHZ map for RF5111
net/wireless/ath/ath5k/attach.c:							IEEE80211_BAND_2GHZ);
net/wireless/ath/ath5k/attach.c:							IEEE80211_BAND_2GHZ);
net/wireless/ath/ath5k/attach.c:							IEEE80211_BAND_2GHZ);
net/wireless/ath/ath5k/attach.c:			IEEE80211_BAND_5GHZ);
net/wireless/ath/ath5k/base.c:		band = IEEE80211_BAND_2GHZ;
net/wireless/ath/ath5k/base.c:		band = IEEE80211_BAND_5GHZ;
net/wireless/ath/ath5k/base.c:		hw->wiphy->bands[IEEE80211_BAND_2GHZ] = sband;
net/wireless/ath/ath5k/base.c:		hw->wiphy->bands[IEEE80211_BAND_2GHZ] = sband;
net/wireless/ath/ath5k/base.c:		hw->wiphy->bands[IEEE80211_BAND_5GHZ] = sband;
net/wireless/ath/ath5k/base.c:	if (band == IEEE80211_BAND_2GHZ && chan <= 14)
net/wireless/ath/ath5k/base.c:	sband = &ah->sbands[IEEE80211_BAND_2GHZ];
net/wireless/ath/ath5k/base.c:		sband = &ah->sbands[IEEE80211_BAND_5GHZ];
net/wireless/ath/ath5k/base.c:	sband->band = IEEE80211_BAND_2GHZ;
net/wireless/ath/ath5k/base.c:		sband->band = IEEE80211_BAND_5GHZ;
net/wireless/ath/ath5k/base.c:	sband->bitrates = &ah->rates[IEEE80211_BAND_2GHZ][0];
net/wireless/ath/ath5k/base.c:		sband->bitrates = &ah->rates[IEEE80211_BAND_5GHZ][0];
net/wireless/ath/ath5k/debug.c:		case IEEE80211_BAND_2GHZ:
net/wireless/ath/ath5k/debug.c:		case IEEE80211_BAND_5GHZ:
net/wireless/ath/ath5k/eeprom.c:		AR5K_EEPROM_HDR_T_5GHZ_DBM(ee->ee_header);
net/wireless/ath/ath5k/eeprom.c:					AR5K_EEPROM_N_2GHZ_CHAN_2413 / 2;
net/wireless/ath/ath5k/eeprom.c:		AR5K_EEPROM_N_2GHZ_CHAN_2413, pcal,
net/wireless/ath/ath5k/eeprom.c:					AR5K_EEPROM_N_5GHZ_CHAN / 2;
net/wireless/ath/ath5k/eeprom.c:			AR5K_EEPROM_N_5GHZ_CHAN, pcal,
net/wireless/ath/ath5k/eeprom.c:		AR5K_EEPROM_READ(AR5K_EEPROM_OBDB0_2GHZ, val);
net/wireless/ath/ath5k/eeprom.c:		AR5K_EEPROM_READ(AR5K_EEPROM_OBDB1_2GHZ, val);
net/wireless/ath/ath5k/eeprom.c:		ee->ee_rate_target_pwr_num[mode] = AR5K_EEPROM_N_2GHZ_CHAN;
net/wireless/ath/ath5k/eeprom.c:		ee->ee_rate_target_pwr_num[mode] = AR5K_EEPROM_N_5GHZ_CHAN;
net/wireless/ath/ath5k/eeprom.c:		for (i = 0; i < AR5K_EEPROM_N_5GHZ_CHAN; i++) {
net/wireless/ath/ath5k/eeprom.c:		offset += AR5K_EEPROM_N_2GHZ_CHAN_2413 / 2;
net/wireless/ath/ath5k/eeprom.c:		offset += AR5K_EEPROM_N_2GHZ_CHAN_2413 / 2;
net/wireless/ath/ath5k/eeprom.c:		offset += AR5K_EEPROM_N_5GHZ_CHAN / 2;
net/wireless/ath/ath5k/eeprom.h:	AR5K_EEPROM_BAND_2GHZ = 1,
net/wireless/ath/ath5k/eeprom.h:	AR5K_EEPROM_BAND_5GHZ = 0,
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_ANT_GAIN_2GHZ(_v)	((s8)((_v) & 0xff))
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_ANT_GAIN_5GHZ(_v)	((s8)(((_v) >> 8) & 0xff))
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_HAS32KHZCRYSTAL_OLD(_v)	(((_v) >> 15) & 0x1)
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_HAS32KHZCRYSTAL(_v)		(((_v) >> 14) & 0x1)	/* has 32KHz crystal for sleep mode */
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_HDR_T_2GHZ_DIS(_v)	(((_v) >> 3) & 0x1)	/* Disable turbo for 2GHz */
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_HDR_T_5GHZ_DBM(_v)	(((_v) >> 4) & 0x7f)	/* Max turbo power for < 2W power consumption */
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_HDR_T_5GHZ_DIS(_v)	(((_v) >> 15) & 0x1)	/* Disable turbo for 5GHz */
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_N_2GHZ_CHAN_2413	4
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_N_2GHZ_CHAN		3
net/wireless/ath/ath5k/eeprom.h:#define	AR5K_EEPROM_N_2GHZ_CHAN_MAX	4
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_N_5GHZ_CHAN		10
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_N_INTERCEPT_10_2GHZ	35
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_N_INTERCEPT_10_5GHZ	55
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_OBDB0_2GHZ		0x00ec
net/wireless/ath/ath5k/eeprom.h:#define AR5K_EEPROM_OBDB1_2GHZ		0x00ed
net/wireless/ath/ath5k/eeprom.h:	struct ath5k_chan_pcal_info	ee_pwr_cal_a[AR5K_EEPROM_N_5GHZ_CHAN];
net/wireless/ath/ath5k/eeprom.h:	struct ath5k_chan_pcal_info	ee_pwr_cal_b[AR5K_EEPROM_N_2GHZ_CHAN_MAX];
net/wireless/ath/ath5k/eeprom.h:	struct ath5k_chan_pcal_info	ee_pwr_cal_g[AR5K_EEPROM_N_2GHZ_CHAN_MAX];
net/wireless/ath/ath5k/eeprom.h:	struct ath5k_rate_pcal_info	ee_rate_tpwr_a[AR5K_EEPROM_N_5GHZ_CHAN];
net/wireless/ath/ath5k/eeprom.h:	struct ath5k_rate_pcal_info	ee_rate_tpwr_b[AR5K_EEPROM_N_2GHZ_CHAN_MAX];
net/wireless/ath/ath5k/eeprom.h:	struct ath5k_rate_pcal_info	ee_rate_tpwr_g[AR5K_EEPROM_N_2GHZ_CHAN_MAX];
net/wireless/ath/ath5k/initvals.c:	{ AR5K_PHY_GAIN_2GHZ,
net/wireless/ath/ath5k/initvals.c:	{ AR5K_PHY_GAIN_2GHZ,
net/wireless/ath/ath5k/initvals.c:	{ AR5K_PHY_GAIN_2GHZ,
net/wireless/ath/ath5k/initvals.c:	{ AR5K_PHY_GAIN_2GHZ,
net/wireless/ath/ath5k/initvals.c:	{ AR5K_PHY_GAIN_2GHZ,
net/wireless/ath/ath5k/initvals.c:	{ AR5K_PHY_GAIN_2GHZ, 0x6480416c },
net/wireless/ath/ath5k/pcu.c:	case AR5K_BWMODE_10MHZ:
net/wireless/ath/ath5k/pcu.c:	case AR5K_BWMODE_10MHZ:
net/wireless/ath/ath5k/pcu.c:	case AR5K_BWMODE_10MHZ:
net/wireless/ath/ath5k/pcu.c:	case AR5K_BWMODE_40MHZ:
net/wireless/ath/ath5k/pcu.c:	case AR5K_BWMODE_40MHZ:
net/wireless/ath/ath5k/pcu.c:	case AR5K_BWMODE_40MHZ:
net/wireless/ath/ath5k/pcu.c:	case AR5K_BWMODE_5MHZ:
net/wireless/ath/ath5k/pcu.c:	case AR5K_BWMODE_5MHZ:
net/wireless/ath/ath5k/pcu.c:	case AR5K_BWMODE_5MHZ:
net/wireless/ath/ath5k/pcu.c:		if (channel->band == IEEE80211_BAND_5GHZ)
net/wireless/ath/ath5k/pcu.c:	u8 band = IEEE80211_BAND_2GHZ;
net/wireless/ath/ath5k/phy.c:		ah->ah_bwmode == AR5K_BWMODE_10MHZ) {
net/wireless/ath/ath5k/phy.c:		ah->ah_bwmode == AR5K_BWMODE_10MHZ) {
net/wireless/ath/ath5k/phy.c:						AR5K_RF_DB_2GHZ, true);
net/wireless/ath/ath5k/phy.c:						AR5K_RF_DB_5GHZ, true);
net/wireless/ath/ath5k/phy.c:						AR5K_RF_OB_2GHZ, true);
net/wireless/ath/ath5k/phy.c:						AR5K_RF_OB_5GHZ, true);
net/wireless/ath/ath5k/phy.c:		ath5k_hw_reg_write(ah, AR5K_PHY_SHIFT_2GHZ, AR5K_PHY(0));
net/wireless/ath/ath5k/phy.c:		ath5k_hw_reg_write(ah, AR5K_PHY_SHIFT_5GHZ, AR5K_PHY(0));
net/wireless/ath/ath5k/phy.c:	ath5k_hw_reg_write(ah, AR5K_PHY_SHIFT_5GHZ, AR5K_PHY(0));
net/wireless/ath/ath5k/phy.c:		case AR5K_BWMODE_10MHZ:
net/wireless/ath/ath5k/phy.c:	case AR5K_BWMODE_10MHZ:
net/wireless/ath/ath5k/phy.c:		case AR5K_BWMODE_40MHZ:
net/wireless/ath/ath5k/phy.c:	case AR5K_BWMODE_40MHZ:
net/wireless/ath/ath5k/phy.c:		case AR5K_BWMODE_5MHZ:
net/wireless/ath/ath5k/phy.c:	case AR5K_BWMODE_5MHZ:
net/wireless/ath/ath5k/phy.c:	case IEEE80211_BAND_2GHZ:
net/wireless/ath/ath5k/phy.c:	case IEEE80211_BAND_5GHZ:
net/wireless/ath/ath5k/phy.c:	channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/ath5k/phy.c:	} else if (channel->band == IEEE80211_BAND_5GHZ)
net/wireless/ath/ath5k/phy.c:	} else if ((channel->band == IEEE80211_BAND_5GHZ) ||
net/wireless/ath/ath5k/phy.c:		freq_band = AR5K_EEPROM_BAND_2GHZ;
net/wireless/ath/ath5k/phy.c:		freq_band = AR5K_EEPROM_BAND_5GHZ;
net/wireless/ath/ath5k/phy.c:		if (ah->ah_bwmode == AR5K_BWMODE_10MHZ)
net/wireless/ath/ath5k/phy.c:		if (ah->ah_bwmode == AR5K_BWMODE_40MHZ)
net/wireless/ath/ath5k/phy.c:		if (ah->ah_bwmode == AR5K_BWMODE_40MHZ)
net/wireless/ath/ath5k/phy.c:	if (ah->ah_bwmode == AR5K_BWMODE_40MHZ)
net/wireless/ath/ath5k/phy.c:	if ((ah->ah_bwmode == AR5K_BWMODE_40MHZ) &&
net/wireless/ath/ath5k/phy.c:		if (ah->ah_bwmode == AR5K_BWMODE_5MHZ)
net/wireless/ath/ath5k/phy.c:		if (ah->ah_bwmode == AR5K_BWMODE_5MHZ ||
net/wireless/ath/ath5k/phy.c:		if (ah->ah_bwmode == AR5K_BWMODE_5MHZ ||
net/wireless/ath/ath5k/phy.c:	if (channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/ath5k/phy.c:	if (channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/ath5k/phy.c:	if (channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/ath5k/phy.c:	if (channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/ath5k/phy.c:			if (channel->band == IEEE80211_BAND_5GHZ) {
net/wireless/ath/ath5k/phy.c:	index = (band == IEEE80211_BAND_2GHZ) ? 1 : 0;
net/wireless/ath/ath5k/phy.c:			pd_delay = (ah->ah_bwmode == AR5K_BWMODE_5MHZ) ?
net/wireless/ath/ath5k/phy.c:		/* Scale up spur_offset by 1000 to switch to 100HZ resolution
net/wireless/ath/ath5k/phy.c:			wait_i = (ah->ah_bwmode == AR5K_BWMODE_5MHZ) ?
net/wireless/ath/ath5k/qcu.c:	if (ah->ah_bwmode == AR5K_BWMODE_40MHZ)
net/wireless/ath/ath5k/qcu.c:	if (channel->band == IEEE80211_BAND_5GHZ)
net/wireless/ath/ath5k/qcu.c:		rate = &ah->sbands[IEEE80211_BAND_2GHZ].bitrates[0];
net/wireless/ath/ath5k/qcu.c:		rate = &ah->sbands[IEEE80211_BAND_5GHZ].bitrates[0];
net/wireless/ath/ath5k/reg.h:					AR5K_PHY_PLL_40MHZ_5211 : AR5K_PHY_PLL_40MHZ_5212)
net/wireless/ath/ath5k/reg.h:					AR5K_PHY_PLL_44MHZ_5211 : AR5K_PHY_PLL_44MHZ_5212)
net/wireless/ath/ath5k/reg.h:#define AR5K_EEPROM_CFG_CLK_RATE_156KHZ	0
net/wireless/ath/ath5k/reg.h:#define AR5K_EEPROM_CFG_CLK_RATE_312KHZ	1
net/wireless/ath/ath5k/reg.h:#define AR5K_EEPROM_CFG_CLK_RATE_625KHZ	2
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_GAIN_2GHZ			0xa20c
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_GAIN_2GHZ_INI_5111		0x6480416c
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_GAIN_2GHZ_MARGIN_TXRX		0x00fc0000
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_GAIN_2GHZ_MARGIN_TXRX_S	18
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_MODE_FREQ_2GHZ		2
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_MODE_FREQ_5GHZ		0
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_PLL_20MHZ		0x00000013	/* For half rate (?) */
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_PLL_40MHZ_5211		0x00000018
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_PLL_40MHZ_5212		0x000000aa
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_PLL_40MHZ_5413		0x00000004
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_PLL_40MHZ		(ah->ah_version == AR5K_AR5211 ? \
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_PLL_44MHZ_5211		0x00000019
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_PLL_44MHZ_5212		0x000000ab
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_PLL_44MHZ		(ah->ah_version == AR5K_AR5211 ? \
net/wireless/ath/ath5k/reg.h:#define AR5K_PHY_SCAL_32MHZ		0x0000000e
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_SCAL_32MHZ_2417	0x0000000a
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_SCAL_32MHZ_5311	0x00000008
net/wireless/ath/ath5k/reg.h:#define	AR5K_PHY_SCAL_32MHZ_HB63	0x00000032
net/wireless/ath/ath5k/reg.h:#define AR5K_PHY_SCLOCK_32MHZ		0x0000000c
net/wireless/ath/ath5k/reg.h:#define AR5K_PHY_SDELAY_32MHZ		0x000000ff
net/wireless/ath/ath5k/reg.h:#define AR5K_PHY_SHIFT_2GHZ		0x00004007	/* Used to access 2GHz radios */
net/wireless/ath/ath5k/reg.h:#define AR5K_PHY_SHIFT_5GHZ		0x00000007	/* Used to access 5GHz radios (default) */
net/wireless/ath/ath5k/reg.h:#define AR5K_PHY_SLMT_32MHZ		0x0000007f
net/wireless/ath/ath5k/reset.c:	AR5K_EEPROM_HAS32KHZCRYSTAL_OLD(ee->ee_misc1)) &&
net/wireless/ath/ath5k/reset.c:				AR5K_PHY_GAIN_2GHZ_MARGIN_TXRX,
net/wireless/ath/ath5k/reset.c:				AR5K_PHY_GAIN_2GHZ_MARGIN_TXRX,
net/wireless/ath/ath5k/reset.c:			AR5K_REG_WRITE_BITS(ah, AR5K_PHY_GAIN_2GHZ,
net/wireless/ath/ath5k/reset.c:		AR5K_REG_WRITE_BITS(ah, AR5K_PHY_GAIN_2GHZ,
net/wireless/ath/ath5k/reset.c:		ath5k_hw_reg_write(ah, AR5K_PHY_SCAL_32MHZ_5311,
net/wireless/ath/ath5k/reset.c:		ath5k_hw_reg_write(ah, AR5K_PHY_SCLOCK_32MHZ, AR5K_PHY_SCLOCK);
net/wireless/ath/ath5k/reset.c:		ath5k_hw_reg_write(ah, AR5K_PHY_SDELAY_32MHZ, AR5K_PHY_SDELAY);
net/wireless/ath/ath5k/reset.c:		ath5k_hw_reg_write(ah, AR5K_PHY_SHIFT_5GHZ | 0x40,
net/wireless/ath/ath5k/reset.c:		ath5k_hw_reg_write(ah, AR5K_PHY_SHIFT_5GHZ, AR5K_PHY(0));
net/wireless/ath/ath5k/reset.c:		ath5k_hw_reg_write(ah, AR5K_PHY_SLMT_32MHZ, AR5K_PHY_SLMT);
net/wireless/ath/ath5k/reset.c:	case AR5K_BWMODE_10MHZ:
net/wireless/ath/ath5k/reset.c:	case AR5K_BWMODE_10MHZ:
net/wireless/ath/ath5k/reset.c:	case AR5K_BWMODE_40MHZ:
net/wireless/ath/ath5k/reset.c:	case AR5K_BWMODE_40MHZ:
net/wireless/ath/ath5k/reset.c:	case AR5K_BWMODE_5MHZ:
net/wireless/ath/ath5k/reset.c:	case AR5K_BWMODE_5MHZ:
net/wireless/ath/ath5k/reset.c:				clock |= (ah->ah_bwmode == AR5K_BWMODE_10MHZ) ?
net/wireless/ath/ath5k/reset.c:				clock |= AR5K_PHY_PLL_40MHZ;
net/wireless/ath/ath5k/reset.c:				clock = AR5K_PHY_PLL_40MHZ_5413;
net/wireless/ath/ath5k/reset.c:			clock |= AR5K_PHY_PLL_44MHZ;
net/wireless/ath/ath5k/reset.c:		} else if (channel->band == IEEE80211_BAND_5GHZ) {
net/wireless/ath/ath5k/reset.c:		if (ah->ah_bwmode == AR5K_BWMODE_40MHZ)
net/wireless/ath/ath5k/reset.c:		if (ah->ah_bwmode == AR5K_BWMODE_40MHZ) {
net/wireless/ath/ath5k/reset.c:		if (ah->ah_bwmode == AR5K_BWMODE_40MHZ) {
net/wireless/ath/ath5k/reset.c:	if ((ah->ah_bwmode == AR5K_BWMODE_40MHZ) &&
net/wireless/ath/ath5k/reset.c:	if ((AR5K_EEPROM_HAS32KHZCRYSTAL(ee->ee_misc1) ||
net/wireless/ath/ath5k/reset.c:		if (channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/ath5k/reset.c:		if (channel->band == IEEE80211_BAND_5GHZ)
net/wireless/ath/ath5k/reset.c:				mode |= (ah->ah_bwmode == AR5K_BWMODE_10MHZ) ?
net/wireless/ath/ath5k/reset.c:			mode |= AR5K_PHY_MODE_FREQ_2GHZ;
net/wireless/ath/ath5k/reset.c:			mode |= (AR5K_PHY_MODE_FREQ_5GHZ |
net/wireless/ath/ath5k/reset.c:			scal = AR5K_PHY_SCAL_32MHZ;
net/wireless/ath/ath5k/reset.c:			scal = AR5K_PHY_SCAL_32MHZ_2417;
net/wireless/ath/ath5k/reset.c:			scal = AR5K_PHY_SCAL_32MHZ_HB63;
net/wireless/ath/ath5k/reset.c:		txf2txs = AR5K_INIT_TXF2TXD_START_DELAY_10MHZ;
net/wireless/ath/ath5k/reset.c:		txf2txs = AR5K_INIT_TXF2TXD_START_DELAY_5MHZ;
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_2GHZ,		AR5K_RF2316_DB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_2GHZ,		AR5K_RF2413_DB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_2GHZ,		AR5K_RF2425_DB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_2GHZ,		AR5K_RF5111_DB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_2GHZ,		AR5K_RF5112A_DB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_2GHZ,		AR5K_RF5112_DB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_2GHZ,		 AR5K_RF5413_DB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_5GHZ,		AR5K_RF5111_DB_5GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_5GHZ,		AR5K_RF5112A_DB_5GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_5GHZ,		AR5K_RF5112_DB_5GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_DB_5GHZ,		 AR5K_RF5413_DB_5GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_2GHZ,		AR5K_RF2316_OB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_2GHZ,		AR5K_RF2413_OB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_2GHZ,		AR5K_RF2425_OB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_2GHZ,		AR5K_RF5111_OB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_2GHZ,		AR5K_RF5112A_OB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_2GHZ,		AR5K_RF5112_OB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_2GHZ,		 AR5K_RF5413_OB_2GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_5GHZ,		AR5K_RF5111_OB_5GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_5GHZ,		AR5K_RF5112A_OB_5GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_5GHZ,		AR5K_RF5112_OB_5GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	{6, AR5K_RF_OB_5GHZ,		 AR5K_RF5413_OB_5GHZ},
net/wireless/ath/ath5k/rfbuffer.h:	AR5K_RF_DB_2GHZ,
net/wireless/ath/ath5k/rfbuffer.h:	AR5K_RF_DB_5GHZ,
net/wireless/ath/ath5k/rfbuffer.h:	AR5K_RF_OB_2GHZ,
net/wireless/ath/ath5k/rfbuffer.h:	AR5K_RF_OB_5GHZ,
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF2316_DB_2GHZ		{ 3, 175, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF2316_OB_2GHZ		{ 3, 178, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF2413_DB_2GHZ		{ 3, 165, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF2413_OB_2GHZ		{ 3, 168, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF2425_DB_2GHZ		{ 3, 190, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF2425_OB_2GHZ		{ 3, 193, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5111_DB_2GHZ		{ 3, 122, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5111_DB_5GHZ		{ 3, 107, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5111_OB_2GHZ		{ 3, 119, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5111_OB_5GHZ		{ 3, 104, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5112A_DB_2GHZ		{ 3, 290, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5112A_DB_5GHZ		{ 3, 282, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5112A_OB_2GHZ		{ 3, 287, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5112A_OB_5GHZ		{ 3, 279, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5112_DB_2GHZ		{ 3, 272, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5112_DB_5GHZ		{ 3, 264, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5112_OB_2GHZ		{ 3, 269, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5112_OB_5GHZ		{ 3, 261, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5413_DB_2GHZ		{ 3, 238, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5413_DB_5GHZ		{ 3, 244, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5413_OB_2GHZ		{ 3, 241, 0 }
net/wireless/ath/ath5k/rfbuffer.h:#define	AR5K_RF5413_OB_5GHZ		{ 3, 247, 0 }
net/wireless/ath/ath6kl/cfg80211.c:						 5 * HZ);
net/wireless/ath/ath6kl/cfg80211.c:	.band           = IEEE80211_BAND_2GHZ,  \
net/wireless/ath/ath6kl/cfg80211.c:	.band           = IEEE80211_BAND_5GHZ,      \
net/wireless/ath/ath6kl/cfg80211.c:		sinfo->txrate.flags |= RATE_INFO_FLAGS_40_MHZ_WIDTH;
net/wireless/ath/ath6kl/cfg80211.c:	wiphy->bands[IEEE80211_BAND_2GHZ] = &ath6kl_band_2ghz;
net/wireless/ath/ath6kl/cfg80211.c:	wiphy->bands[IEEE80211_BAND_5GHZ] = &ath6kl_band_5ghz;
net/wireless/ath/ath6kl/core.h:#define WMI_TIMEOUT (2 * HZ)
net/wireless/ath/ath6kl/txrx.c:					   HZ * (AGGR_RX_TIMEOUT) / 1000));
net/wireless/ath/ath6kl/usb.c:				 size, 2 * HZ);
net/wireless/ath/ath6kl/wmi.c:		/* A mode operate in 5GHZ band */
net/wireless/ath/ath6kl/wmi.c:		/* A mode operate in 5GHZ band */
net/wireless/ath/ath6kl/wmi.c:			band = IEEE80211_BAND_2GHZ;
net/wireless/ath/ath6kl/wmi.c:			band = IEEE80211_BAND_2GHZ;
net/wireless/ath/ath6kl/wmi.c:			band = IEEE80211_BAND_5GHZ;
net/wireless/ath/ath6kl/wmi.c:			band = IEEE80211_BAND_5GHZ;
net/wireless/ath/ath6kl/wmi.c:		if (band == IEEE80211_BAND_5GHZ)
net/wireless/ath/ath6kl/wmi.c:		if (band == IEEE80211_BAND_5GHZ)
net/wireless/ath/ath6kl/wmi.h:#define A_BAND_24GHZ           0
net/wireless/ath/ath6kl/wmi.h:#define A_BAND_5GHZ            1
net/wireless/ath/ath9k/ani.c:		if ((conf->channel->band == IEEE80211_BAND_2GHZ) &&
net/wireless/ath/ath9k/ani.c:		if ((conf->channel->band == IEEE80211_BAND_2GHZ) &&
net/wireless/ath/ath9k/ani.c:			if (IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/ani.c:		if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/ar5008_phy.c:	ah->nf_2g.max = AR_PHY_CCA_MAX_GOOD_VAL_5416_2GHZ;
net/wireless/ath/ath9k/ar5008_phy.c:	ah->nf_2g.min = AR_PHY_CCA_MIN_GOOD_VAL_5416_2GHZ;
net/wireless/ath/ath9k/ar5008_phy.c:	ah->nf_2g.nominal = AR_PHY_CCA_NOM_VAL_5416_2GHZ;
net/wireless/ath/ath9k/ar5008_phy.c:	ah->nf_5g.max = AR_PHY_CCA_MAX_GOOD_VAL_5416_5GHZ;
net/wireless/ath/ath9k/ar5008_phy.c:	ah->nf_5g.min = AR_PHY_CCA_MIN_GOOD_VAL_5416_5GHZ;
net/wireless/ath/ath9k/ar5008_phy.c:	ah->nf_5g.nominal = AR_PHY_CCA_NOM_VAL_5416_5GHZ;
net/wireless/ath/ath9k/ar5008_phy.c:			AR_PHY_MODE_RF5GHZ : AR_PHY_MODE_RF2GHZ;
net/wireless/ath/ath9k/ar5008_phy.c:	bool is2GHz = IS_CHAN_2GHZ(chan);
net/wireless/ath/ath9k/ar5008_phy.c:	denominator = IS_CHAN_2GHZ(chan) ? 440 : 400;
net/wireless/ath/ath9k/ar5008_phy.c:	if (chan && IS_CHAN_5GHZ(chan))
net/wireless/ath/ath9k/ar5008_phy.c:	if (chan && IS_CHAN_5GHZ(chan))
net/wireless/ath/ath9k/ar5008_phy.c:		if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/ar5008_phy.c:		rfMode |= (IS_CHAN_5GHZ(chan)) ?
net/wireless/ath/ath9k/ar9002_calib.c:		    !((IS_CHAN_2GHZ(chan) || IS_CHAN_A_FAST_CLOCK(ah, chan)) &&
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.max = AR_PHY_CCA_MAX_GOOD_VAL_9271_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.max = AR_PHY_CCA_MAX_GOOD_VAL_9280_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.max = AR_PHY_CCA_MAX_GOOD_VAL_9285_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.max = AR_PHY_CCA_MAX_GOOD_VAL_9287_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.min = AR_PHY_CCA_MIN_GOOD_VAL_9271_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.min = AR_PHY_CCA_MIN_GOOD_VAL_9280_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.min = AR_PHY_CCA_MIN_GOOD_VAL_9285_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.min = AR_PHY_CCA_MIN_GOOD_VAL_9287_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.nominal = AR_PHY_CCA_NOM_VAL_9271_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.nominal = AR_PHY_CCA_NOM_VAL_9280_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.nominal = AR_PHY_CCA_NOM_VAL_9285_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_2g.nominal = AR_PHY_CCA_NOM_VAL_9287_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_5g.max = AR_PHY_CCA_MAX_GOOD_VAL_9280_5GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_5g.min = AR_PHY_CCA_MIN_GOOD_VAL_9280_5GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:		ah->nf_5g.nominal = AR_PHY_CCA_NOM_VAL_9280_5GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:	bool is2GHz = IS_CHAN_2GHZ(chan);
net/wireless/ath/ath9k/ar9002_phy.c:			cur_bb_spur = (cur_bb_spur / 10) + AR_BASE_FREQ_2GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:			cur_bb_spur = (cur_bb_spur / 10) + AR_BASE_FREQ_5GHZ;
net/wireless/ath/ath9k/ar9002_phy.c:	denominator = IS_CHAN_2GHZ(chan) ? 44 : 40;
net/wireless/ath/ath9k/ar9002_phy.c:	if (chan && IS_CHAN_5GHZ(chan) && !IS_CHAN_A_FAST_CLOCK(ah, chan)) {
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MAX_GOOD_VAL_5416_2GHZ     -80
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MAX_GOOD_VAL_5416_5GHZ     -90
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MAX_GOOD_VAL_9271_2GHZ      -116
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MAX_GOOD_VAL_9280_2GHZ  -97
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MAX_GOOD_VAL_9280_5GHZ  -102
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MAX_GOOD_VAL_9285_2GHZ    -108
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MAX_GOOD_VAL_9287_2GHZ    -110
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_5416_2GHZ     -100
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_5416_5GHZ     -110
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_9271_2GHZ      -127
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_9280_2GHZ  -127
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_9280_5GHZ  -122
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_9285_2GHZ    -127
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_9287_2GHZ    -127
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_NOM_VAL_5416_2GHZ            -90
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_NOM_VAL_5416_5GHZ            -100
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_NOM_VAL_9271_2GHZ             -118
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_NOM_VAL_9280_2GHZ         -112
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_NOM_VAL_9280_5GHZ         -112
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_NOM_VAL_9285_2GHZ           -118
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_CCA_NOM_VAL_9287_2GHZ           -120
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ                0xA20C
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_BSW_ATTEN      0x0000001F
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_BSW_ATTEN_S    0
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_BSW_MARGIN     0x00003C00
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_BSW_MARGIN_S   10
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_RXTX_MARGIN    0x00FC0000
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_RXTX_MARGIN_S  18
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_XATTEN1_DB         0x0000003F
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_XATTEN1_DB_S       0
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN     0x0001F000
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN_S   12
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_XATTEN2_DB         0x00000FC0
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_XATTEN2_DB_S       6
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN     0x003E0000
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN_S   17
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_MODE_RF2GHZ  0x02
net/wireless/ath/ath9k/ar9002_phy.h:#define AR_PHY_MODE_RF5GHZ  0x00
net/wireless/ath/ath9k/ar9003_calib.c:	if (mci && IS_CHAN_2GHZ(chan) && run_agc_cal)
net/wireless/ath/ath9k/ar9003_calib.c:	if (mci && IS_CHAN_2GHZ(chan) && run_agc_cal)
net/wireless/ath/ath9k/ar9003_eeprom.c:	ar9003_hw_ant_ctrl_apply(ah, IS_CHAN_2GHZ(chan));
net/wireless/ath/ath9k/ar9003_eeprom.c:	ar9003_hw_xpa_bias_level_apply(ah, IS_CHAN_2GHZ(chan));
net/wireless/ath/ath9k/ar9003_eeprom.c:	bool is2ghz = IS_CHAN_2GHZ(chan);
net/wireless/ath/ath9k/ar9003_eeprom.c:		if (IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/ar9003_eeprom.c:		if (IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/ar9003_eeprom.c:		if (IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/ar9003_eeprom.c:	if (IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/ar9003_eeprom.c:	if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/ar9003_mci.c:	ar9003_mci_2g5g_changed(ah, IS_CHAN_2GHZ(chan));
net/wireless/ath/ath9k/ar9003_mci.c:		if (IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/ar9003_mci.c:	if (!IS_CHAN_2GHZ(chan) || (mci_hw->bt_state != MCI_BT_SLEEP))
net/wireless/ath/ath9k/ar9003_paprd.c:	if (IS_CHAN_2GHZ(ah->curchan))
net/wireless/ath/ath9k/ar9003_paprd.c:	if (IS_CHAN_5GHZ(chan)) {
net/wireless/ath/ath9k/ar9003_phy.c:	ah->nf_2g.max = AR_PHY_CCA_MAX_GOOD_VAL_9300_2GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:	ah->nf_2g.min = AR_PHY_CCA_MIN_GOOD_VAL_9300_2GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:		ah->nf_2g.min = AR_PHY_CCA_MIN_GOOD_VAL_9462_2GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:	ah->nf_2g.nominal = AR_PHY_CCA_NOM_VAL_9300_2GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:		ah->nf_2g.nominal = AR_PHY_CCA_NOM_VAL_9330_2GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:		ah->nf_2g.nominal = AR_PHY_CCA_NOM_VAL_9462_2GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:	ah->nf_5g.max = AR_PHY_CCA_MAX_GOOD_VAL_9300_5GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:	ah->nf_5g.min = AR_PHY_CCA_MIN_GOOD_VAL_9300_5GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:		ah->nf_5g.min = AR_PHY_CCA_MIN_GOOD_VAL_9462_5GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:	ah->nf_5g.nominal = AR_PHY_CCA_NOM_VAL_9300_5GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:		ah->nf_5g.nominal = AR_PHY_CCA_NOM_VAL_9462_5GHZ;
net/wireless/ath/ath9k/ar9003_phy.c:	if (IS_CHAN_5GHZ(chan)) {
net/wireless/ath/ath9k/ar9003_phy.c:							 IS_CHAN_2GHZ(chan));
net/wireless/ath/ath9k/ar9003_phy.c:					IS_CHAN_2GHZ(chan)) - synth_freq;
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_MAX_GOOD_VAL_9300_2GHZ     -95
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_MAX_GOOD_VAL_9300_5GHZ     -100
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_9300_2GHZ     -125
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_9300_5GHZ     -125
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_9462_2GHZ     -127
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_MIN_GOOD_VAL_9462_5GHZ     -127
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_NOM_VAL_9300_2GHZ          -110
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_NOM_VAL_9300_5GHZ          -115
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_NOM_VAL_9330_2GHZ          -118
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_NOM_VAL_9462_2GHZ          -127
net/wireless/ath/ath9k/ar9003_phy.h:#define AR_PHY_CCA_NOM_VAL_9462_5GHZ          -127
net/wireless/ath/ath9k/calib.c:	case IEEE80211_BAND_2GHZ:
net/wireless/ath/ath9k/calib.c:	case IEEE80211_BAND_5GHZ:
net/wireless/ath/ath9k/calib.c:	if (!chan || IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/calib.c:	if (IS_CHAN_2GHZ(ah->curchan))
net/wireless/ath/ath9k/common.c:	case IEEE80211_BAND_2GHZ:
net/wireless/ath/ath9k/common.c:	case IEEE80211_BAND_5GHZ:
net/wireless/ath/ath9k/common.c:		ichan->channelFlags = CHANNEL_2GHZ | CHANNEL_OFDM;
net/wireless/ath/ath9k/common.c:		ichan->channelFlags = CHANNEL_5GHZ | CHANNEL_OFDM;
net/wireless/ath/ath9k/common.c:	if (chan->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/ath9k/eeprom_4k.c:			      AR_PHY_GAIN_2GHZ_XATTEN1_DB, pModal->bswAtten[0]);
net/wireless/ath/ath9k/eeprom_4k.c:			      AR_PHY_GAIN_2GHZ_XATTEN1_DB, pModal->bswAtten[0]);
net/wireless/ath/ath9k/eeprom_4k.c:			      AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN,
net/wireless/ath/ath9k/eeprom_4k.c:			      AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN, pModal->bswMargin[0]);
net/wireless/ath/ath9k/eeprom_4k.c:			      AR_PHY_GAIN_2GHZ_XATTEN2_DB,
net/wireless/ath/ath9k/eeprom_4k.c:			      AR_PHY_GAIN_2GHZ_XATTEN2_DB, pModal->xatten2Db[0]);
net/wireless/ath/ath9k/eeprom_4k.c:			      AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN,
net/wireless/ath/ath9k/eeprom_4k.c:			      AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN,
net/wireless/ath/ath9k/eeprom_4k.c:					IS_CHAN_2GHZ(chan),
net/wireless/ath/ath9k/eeprom_4k.c:		REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ,
net/wireless/ath/ath9k/eeprom_4k.c:		REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ,
net/wireless/ath/ath9k/eeprom_4k.c:		REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ,
net/wireless/ath/ath9k/eeprom_4k.c:		REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ,
net/wireless/ath/ath9k/eeprom_4k.c:		REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ + 0x1000,
net/wireless/ath/ath9k/eeprom_4k.c:		REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ + 0x1000,
net/wireless/ath/ath9k/eeprom_4k.c:		REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ + 0x1000,
net/wireless/ath/ath9k/eeprom_4k.c:		REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ + 0x1000,
net/wireless/ath/ath9k/eeprom_9287.c:			      AR_PHY_GAIN_2GHZ_XATTEN1_DB,
net/wireless/ath/ath9k/eeprom_9287.c:			      AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN,
net/wireless/ath/ath9k/eeprom_9287.c:		if (IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/eeprom_9287.c:	if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/eeprom_9287.c:	if (IS_CHAN_2GHZ(chan))	{
net/wireless/ath/ath9k/eeprom_9287.c:	if (IS_CHAN_2GHZ(chan))	{
net/wireless/ath/ath9k/eeprom_9287.c:	if (IS_CHAN_2GHZ(chan))	{
net/wireless/ath/ath9k/eeprom_9287.c:								IS_CHAN_2GHZ(chan),
net/wireless/ath/ath9k/eeprom_9287.c:		REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ + regChainOffset,
net/wireless/ath/ath9k/eeprom_9287.c:		REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ + regChainOffset,
net/wireless/ath/ath9k/eeprom_9287.c:		(u8)FREQ2FBIN(centers.synth_center, IS_CHAN_2GHZ(chan)),
net/wireless/ath/ath9k/eeprom.c:	if (freq <= ath9k_hw_fbin2freq(powInfo[0].bChannel, IS_CHAN_2GHZ(chan))) {
net/wireless/ath/ath9k/eeprom.c:						       IS_CHAN_2GHZ
net/wireless/ath/ath9k/eeprom.c:				       IS_CHAN_2GHZ(chan))) {
net/wireless/ath/ath9k/eeprom.c:					 IS_CHAN_2GHZ(chan));
net/wireless/ath/ath9k/eeprom.c:					 IS_CHAN_2GHZ(chan));
net/wireless/ath/ath9k/eeprom.c:					 IS_CHAN_2GHZ(chan));
net/wireless/ath/ath9k/eeprom.c:					 IS_CHAN_2GHZ(chan));
net/wireless/ath/ath9k/eeprom.c:						       IS_CHAN_2GHZ(chan))) {
net/wireless/ath/ath9k/eeprom.c:						       IS_CHAN_2GHZ(chan))) {
net/wireless/ath/ath9k/eeprom.c:							     IS_CHAN_2GHZ(chan)),
net/wireless/ath/ath9k/eeprom.c:						IS_CHAN_2GHZ(chan))) {
net/wireless/ath/ath9k/eeprom.c:						IS_CHAN_2GHZ(chan))) {
net/wireless/ath/ath9k/eeprom.c:						IS_CHAN_2GHZ(chan)) && i > 0 &&
net/wireless/ath/ath9k/eeprom.c:						IS_CHAN_2GHZ(chan)) && i > 0 &&
net/wireless/ath/ath9k/eeprom_def.c:			   ~AR_PHY_GAIN_2GHZ_BSW_ATTEN)
net/wireless/ath/ath9k/eeprom_def.c:			       AR_PHY_GAIN_2GHZ_BSW_ATTEN));
net/wireless/ath/ath9k/eeprom_def.c:			   ~AR_PHY_GAIN_2GHZ_BSW_MARGIN)
net/wireless/ath/ath9k/eeprom_def.c:			       AR_PHY_GAIN_2GHZ_BSW_MARGIN));
net/wireless/ath/ath9k/eeprom_def.c:			  AR_PHY_GAIN_2GHZ + regChainOffset,
net/wireless/ath/ath9k/eeprom_def.c:			   ~AR_PHY_GAIN_2GHZ_RXTX_MARGIN) |
net/wireless/ath/ath9k/eeprom_def.c:			      AR_PHY_GAIN_2GHZ_XATTEN1_DB,
net/wireless/ath/ath9k/eeprom_def.c:			      AR_PHY_GAIN_2GHZ_XATTEN1_MARGIN,
net/wireless/ath/ath9k/eeprom_def.c:			      AR_PHY_GAIN_2GHZ_XATTEN2_DB,
net/wireless/ath/ath9k/eeprom_def.c:			      AR_PHY_GAIN_2GHZ_XATTEN2_MARGIN,
net/wireless/ath/ath9k/eeprom_def.c:			if (IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/eeprom_def.c:		if (IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/eeprom_def.c:		if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/eeprom_def.c:		if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/eeprom_def.c:	if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/eeprom_def.c:	if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/eeprom_def.c:	if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/eeprom_def.c:	if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/eeprom_def.c:	if (IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/eeprom_def.c:	if (OLC_FOR_AR9280_20_LATER && IS_CHAN_2GHZ(chan)) {
net/wireless/ath/ath9k/eeprom_def.c:					 IS_CHAN_2GHZ(chan));
net/wireless/ath/ath9k/eeprom_def.c:				IS_CHAN_2GHZ(chan), AR5416_NUM_BAND_EDGES);
net/wireless/ath/ath9k/eeprom_def.c:	modalIdx = IS_CHAN_2GHZ(chan) ? 1 : 0;
net/wireless/ath/ath9k/eeprom_def.c:		&(pEepData->modalHeader[IS_CHAN_2GHZ(chan)]);
net/wireless/ath/ath9k/eeprom_def.c:	pModal = &(eep->modalHeader[IS_CHAN_2GHZ(chan)]);
net/wireless/ath/ath9k/eeprom_def.c:	pModal = &(eep->modalHeader[IS_CHAN_2GHZ(chan)]);
net/wireless/ath/ath9k/eeprom_def.c:			  (REG_READ(ah, AR_PHY_GAIN_2GHZ + regChainOffset) &
net/wireless/ath/ath9k/eeprom_def.c:			  (REG_READ(ah, AR_PHY_GAIN_2GHZ + regChainOffset) &
net/wireless/ath/ath9k/eeprom_def.c:			  (REG_READ(ah, AR_PHY_GAIN_2GHZ + regChainOffset) &
net/wireless/ath/ath9k/eeprom_def.c:			REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ + regChainOffset,
net/wireless/ath/ath9k/eeprom_def.c:			REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ + regChainOffset,
net/wireless/ath/ath9k/eeprom_def.c:			REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ + regChainOffset,
net/wireless/ath/ath9k/eeprom_def.c:			REG_RMW_FIELD(ah, AR_PHY_GAIN_2GHZ + regChainOffset,
net/wireless/ath/ath9k/eeprom_def.c:			REG_WRITE(ah, AR_PHY_GAIN_2GHZ + regChainOffset,
net/wireless/ath/ath9k/eeprom_def.c:			REG_WRITE(ah, AR_PHY_GAIN_2GHZ + regChainOffset,
net/wireless/ath/ath9k/eeprom_def.c:			  SM(pModal->rxTxMarginCh[i], AR_PHY_GAIN_2GHZ_RXTX_MARGIN));
net/wireless/ath/ath9k/eeprom_def.c:	txRxAttenLocal = IS_CHAN_2GHZ(chan) ? 23 : 44;
net/wireless/ath/ath9k/eeprom_def.c:			(u8)FREQ2FBIN(centers.synth_center, IS_CHAN_2GHZ(chan)),
net/wireless/ath/ath9k/eeprom.h:	ATH9K_HAL_FREQ_BAND_2GHZ = 1
net/wireless/ath/ath9k/eeprom.h:	ATH9K_HAL_FREQ_BAND_5GHZ = 0,
net/wireless/ath/ath9k/hif_usb.c:				      addr >> 8, 0, buf, transfer, HZ);
net/wireless/ath/ath9k/hif_usb.c:			   buf, 4, NULL, HZ);
net/wireless/ath/ath9k/hif_usb.c:			      firm_offset >> 8, 0, NULL, 0, HZ);
net/wireless/ath/ath9k/htc_drv_init.c:	.band = IEEE80211_BAND_5GHZ, \
net/wireless/ath/ath9k/htc_drv_init.c:		hw->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/ath/ath9k/htc_drv_init.c:		hw->wiphy->bands[IEEE80211_BAND_5GHZ] =
net/wireless/ath/ath9k/htc_drv_init.c:		if (priv->ah->caps.hw_caps & ATH9K_HW_CAP_2GHZ)
net/wireless/ath/ath9k/htc_drv_init.c:	if (priv->ah->caps.hw_caps & ATH9K_HW_CAP_2GHZ)
net/wireless/ath/ath9k/htc_drv_init.c:	if (priv->ah->caps.hw_caps & ATH9K_HW_CAP_2GHZ) {
net/wireless/ath/ath9k/htc_drv_init.c:		if (priv->ah->caps.hw_caps & ATH9K_HW_CAP_5GHZ)
net/wireless/ath/ath9k/htc_drv_init.c:	if (priv->ah->caps.hw_caps & ATH9K_HW_CAP_5GHZ)
net/wireless/ath/ath9k/htc_drv_init.c:	if (priv->ah->caps.hw_caps & ATH9K_HW_CAP_5GHZ) {
net/wireless/ath/ath9k/htc_drv_init.c:			&priv->sbands[IEEE80211_BAND_2GHZ];
net/wireless/ath/ath9k/htc_drv_init.c:		priv->sbands[IEEE80211_BAND_2GHZ].band = IEEE80211_BAND_2GHZ;
net/wireless/ath/ath9k/htc_drv_init.c:		priv->sbands[IEEE80211_BAND_2GHZ].bitrates = ath9k_legacy_rates;
net/wireless/ath/ath9k/htc_drv_init.c:		priv->sbands[IEEE80211_BAND_2GHZ].channels =
net/wireless/ath/ath9k/htc_drv_init.c:				     &priv->sbands[IEEE80211_BAND_2GHZ].ht_cap);
net/wireless/ath/ath9k/htc_drv_init.c:		priv->sbands[IEEE80211_BAND_2GHZ].n_bitrates =
net/wireless/ath/ath9k/htc_drv_init.c:		priv->sbands[IEEE80211_BAND_2GHZ].n_channels =
net/wireless/ath/ath9k/htc_drv_init.c:			&priv->sbands[IEEE80211_BAND_5GHZ];
net/wireless/ath/ath9k/htc_drv_init.c:		priv->sbands[IEEE80211_BAND_5GHZ].band = IEEE80211_BAND_5GHZ;
net/wireless/ath/ath9k/htc_drv_init.c:		priv->sbands[IEEE80211_BAND_5GHZ].bitrates =
net/wireless/ath/ath9k/htc_drv_init.c:		priv->sbands[IEEE80211_BAND_5GHZ].channels = ath9k_5ghz_channels;
net/wireless/ath/ath9k/htc_drv_init.c:				     &priv->sbands[IEEE80211_BAND_5GHZ].ht_cap);
net/wireless/ath/ath9k/htc_drv_init.c:		priv->sbands[IEEE80211_BAND_5GHZ].n_bitrates =
net/wireless/ath/ath9k/htc_drv_init.c:		priv->sbands[IEEE80211_BAND_5GHZ].n_channels =
net/wireless/ath/ath9k/htc_drv_init.c:	time_left = wait_for_completion_timeout(&priv->htc->target_wait, HZ);
net/wireless/ath/ath9k/htc_drv_main.c:		mask->control[IEEE80211_BAND_2GHZ].legacy,
net/wireless/ath/ath9k/htc_drv_main.c:		mask->control[IEEE80211_BAND_5GHZ].legacy);
net/wireless/ath/ath9k/htc_drv_main.c:	tmask.band = IEEE80211_BAND_2GHZ;
net/wireless/ath/ath9k/htc_drv_main.c:	tmask.band = IEEE80211_BAND_5GHZ;
net/wireless/ath/ath9k/htc_drv_main.c:	tmask.mask = cpu_to_be32(mask->control[IEEE80211_BAND_2GHZ].legacy);
net/wireless/ath/ath9k/htc_drv_main.c:	tmask.mask = cpu_to_be32(mask->control[IEEE80211_BAND_5GHZ].legacy);
net/wireless/ath/ath9k/htc_drv_txrx.c:		if (cur_conf->channel->band == IEEE80211_BAND_5GHZ)
net/wireless/ath/ath9k/htc_drv_txrx.c:			rate->flags |= IEEE80211_TX_RC_40_MHZ_WIDTH;
net/wireless/ath/ath9k/htc_drv_txrx.c:			rxs->flag |= RX_FLAG_40MHZ;
net/wireless/ath/ath9k/htc_hst.c:	time_left = wait_for_completion_timeout(&target->cmd_wait, HZ);
net/wireless/ath/ath9k/htc_hst.c:	time_left = wait_for_completion_timeout(&target->cmd_wait, HZ);
net/wireless/ath/ath9k/htc_hst.c:	time_left = wait_for_completion_timeout(&target->cmd_wait, HZ);
net/wireless/ath/ath9k/hw.c:		      (ah->curchan->channelFlags & (CHANNEL_2GHZ |
net/wireless/ath/ath9k/hw.c:	ah->enable_32kHz_clock = DONT_USE_32KHZ;
net/wireless/ath/ath9k/hw.c:		ar9003_mci_reset(ah, false, IS_CHAN_2GHZ(chan), save_fullsleep);
net/wireless/ath/ath9k/hw.c:	band_switch = (chan->channelFlags & (CHANNEL_2GHZ | CHANNEL_5GHZ)) !=
net/wireless/ath/ath9k/hw.c:						    CHANNEL_5GHZ));
net/wireless/ath/ath9k/hw.c:		clockrate = ATH9K_CLOCK_FAST_RATE_5GHZ_OFDM;
net/wireless/ath/ath9k/hw.c:		clockrate = ATH9K_CLOCK_RATE_2GHZ_OFDM;
net/wireless/ath/ath9k/hw.c:		clockrate = ATH9K_CLOCK_RATE_5GHZ_OFDM;
net/wireless/ath/ath9k/hw.c:	else if (conf->channel->band == IEEE80211_BAND_2GHZ)
net/wireless/ath/ath9k/hw.c:		if (!(ah->ent_mode & AR_ENT_OTP_49GHZ_DISABLE))
net/wireless/ath/ath9k/hw.c:	if (conf->channel && conf->channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/ath9k/hw.c:	if (IS_CHAN_2GHZ(chan))
net/wireless/ath/ath9k/hw.c:		if (IS_CHAN_5GHZ(chan))
net/wireless/ath/ath9k/hw.c:		pCap->hw_caps |= ATH9K_HW_CAP_2GHZ;
net/wireless/ath/ath9k/hw.c:		pCap->hw_caps |= ATH9K_HW_CAP_5GHZ;
net/wireless/ath/ath9k/hw.c:	REG_WRITE(ah, AR_CFG_LED, saveLedState | AR_CFG_SCLK_32KHZ);
net/wireless/ath/ath9k/hw.h:	ATH9K_HW_CAP_2GHZ			= BIT(11),
net/wireless/ath/ath9k/hw.h:	ATH9K_HW_CAP_5GHZ			= BIT(12),
net/wireless/ath/ath9k/hw.h:		AUTO_32KHZ,
net/wireless/ath/ath9k/hw.h:	((((_c)->channelFlags & CHANNEL_5GHZ) != 0) &&	\
net/wireless/ath/ath9k/hw.h:	 CHANNEL_2GHZ |				\
net/wireless/ath/ath9k/hw.h:	 CHANNEL_5GHZ |				\
net/wireless/ath/ath9k/hw.h:#define AR_BASE_FREQ_2GHZ   	2300
net/wireless/ath/ath9k/hw.h:#define AR_BASE_FREQ_5GHZ   	4900
net/wireless/ath/ath9k/hw.h:#define ATH9K_CLOCK_FAST_RATE_5GHZ_OFDM 44
net/wireless/ath/ath9k/hw.h:#define ATH9K_CLOCK_RATE_2GHZ_OFDM	44
net/wireless/ath/ath9k/hw.h:#define ATH9K_CLOCK_RATE_5GHZ_OFDM	40
net/wireless/ath/ath9k/hw.h:#define CHANNEL_2GHZ      0x00080
net/wireless/ath/ath9k/hw.h:#define CHANNEL_5GHZ      0x00100
net/wireless/ath/ath9k/hw.h:#define CHANNEL_A           (CHANNEL_5GHZ|CHANNEL_OFDM)
net/wireless/ath/ath9k/hw.h:#define CHANNEL_A_HT20      (CHANNEL_5GHZ|CHANNEL_HT20)
net/wireless/ath/ath9k/hw.h:#define CHANNEL_A_HT40MINUS (CHANNEL_5GHZ|CHANNEL_HT40MINUS)
net/wireless/ath/ath9k/hw.h:#define CHANNEL_A_HT40PLUS  (CHANNEL_5GHZ|CHANNEL_HT40PLUS)
net/wireless/ath/ath9k/hw.h:#define CHANNEL_B           (CHANNEL_2GHZ|CHANNEL_CCK)
net/wireless/ath/ath9k/hw.h:#define CHANNEL_G           (CHANNEL_2GHZ|CHANNEL_OFDM)
net/wireless/ath/ath9k/hw.h:#define CHANNEL_G_HT20      (CHANNEL_2GHZ|CHANNEL_HT20)
net/wireless/ath/ath9k/hw.h:#define CHANNEL_G_HT40MINUS (CHANNEL_2GHZ|CHANNEL_HT40MINUS)
net/wireless/ath/ath9k/hw.h:#define CHANNEL_G_HT40PLUS  (CHANNEL_2GHZ|CHANNEL_HT40PLUS)
net/wireless/ath/ath9k/hw.h:#define IS_CHAN_2GHZ(_c) (((_c)->channelFlags & CHANNEL_2GHZ) != 0)
net/wireless/ath/ath9k/hw.h:#define IS_CHAN_5GHZ(_c) (((_c)->channelFlags & CHANNEL_5GHZ) != 0)
net/wireless/ath/ath9k/hw.h:		DONT_USE_32KHZ,
net/wireless/ath/ath9k/hw.h:		USE_32KHZ,
net/wireless/ath/ath9k/init.c:		ath9k_init_band_txpower(sc, IEEE80211_BAND_2GHZ);
net/wireless/ath/ath9k/init.c:		ath9k_init_band_txpower(sc, IEEE80211_BAND_5GHZ);
net/wireless/ath/ath9k/init.c:	.band = IEEE80211_BAND_2GHZ, \
net/wireless/ath/ath9k/init.c:	.band = IEEE80211_BAND_5GHZ, \
net/wireless/ath/ath9k/init.c:		hw->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/ath/ath9k/init.c:		hw->wiphy->bands[IEEE80211_BAND_5GHZ] =
net/wireless/ath/ath9k/init.c:	if (ah->caps.hw_caps & ATH9K_HW_CAP_2GHZ)
net/wireless/ath/ath9k/init.c:	if (ah->caps.hw_caps & ATH9K_HW_CAP_5GHZ)
net/wireless/ath/ath9k/init.c:			if (sc->sbands[IEEE80211_BAND_2GHZ].channels)
net/wireless/ath/ath9k/init.c:	if (sc->sbands[IEEE80211_BAND_2GHZ].channels)
net/wireless/ath/ath9k/init.c:	if (sc->sbands[IEEE80211_BAND_5GHZ].channels)
net/wireless/ath/ath9k/init.c:	if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_2GHZ)
net/wireless/ath/ath9k/init.c:	if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_2GHZ)
net/wireless/ath/ath9k/init.c:	if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_2GHZ) {
net/wireless/ath/ath9k/init.c:	if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_5GHZ)
net/wireless/ath/ath9k/init.c:	if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_5GHZ)
net/wireless/ath/ath9k/init.c:	if (sc->sc_ah->caps.hw_caps & ATH9K_HW_CAP_5GHZ) {
net/wireless/ath/ath9k/init.c:		kfree(sc->sbands[IEEE80211_BAND_2GHZ].channels);
net/wireless/ath/ath9k/init.c:				kfree(sc->sbands[IEEE80211_BAND_2GHZ].channels);
net/wireless/ath/ath9k/init.c:		kfree(sc->sbands[IEEE80211_BAND_5GHZ].channels);
net/wireless/ath/ath9k/init.c:			&sc->sbands[IEEE80211_BAND_2GHZ];
net/wireless/ath/ath9k/init.c:		sc->sbands[IEEE80211_BAND_2GHZ].band = IEEE80211_BAND_2GHZ;
net/wireless/ath/ath9k/init.c:		sc->sbands[IEEE80211_BAND_2GHZ].bitrates = ath9k_legacy_rates;
net/wireless/ath/ath9k/init.c:		sc->sbands[IEEE80211_BAND_2GHZ].channels = channels;
net/wireless/ath/ath9k/init.c:		sc->sbands[IEEE80211_BAND_2GHZ].n_bitrates =
net/wireless/ath/ath9k/init.c:		sc->sbands[IEEE80211_BAND_2GHZ].n_channels =
net/wireless/ath/ath9k/init.c:			&sc->sbands[IEEE80211_BAND_5GHZ];
net/wireless/ath/ath9k/init.c:		sc->sbands[IEEE80211_BAND_5GHZ].band = IEEE80211_BAND_5GHZ;
net/wireless/ath/ath9k/init.c:		sc->sbands[IEEE80211_BAND_5GHZ].bitrates =
net/wireless/ath/ath9k/init.c:		sc->sbands[IEEE80211_BAND_5GHZ].channels = channels;
net/wireless/ath/ath9k/init.c:		sc->sbands[IEEE80211_BAND_5GHZ].n_bitrates =
net/wireless/ath/ath9k/init.c:		sc->sbands[IEEE80211_BAND_5GHZ].n_channels =
net/wireless/ath/ath9k/init.c:		setup_ht_cap(sc, &sc->sbands[IEEE80211_BAND_2GHZ].ht_cap);
net/wireless/ath/ath9k/init.c:		setup_ht_cap(sc, &sc->sbands[IEEE80211_BAND_5GHZ].ht_cap);
net/wireless/ath/ath9k/main.c:		ieee80211_queue_delayed_work(sc->hw, &sc->hw_pll_work, HZ/2);
net/wireless/ath/ath9k/main.c:		ieee80211_queue_delayed_work(sc->hw, &sc->hw_pll_work, HZ/5);
net/wireless/ath/ath9k/main.c:	sband = hw->wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/ath/ath9k/main.c:		sband = hw->wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/ath/ath9k/mci.c:	if (IS_CHAN_2GHZ(sc->sc_ah->curchan)) {
net/wireless/ath/ath9k/mci.c:	if (IS_CHAN_5GHZ(sc->sc_ah->curchan))
net/wireless/ath/ath9k/rc.c:	case IEEE80211_BAND_2GHZ:
net/wireless/ath/ath9k/rc.c:	case IEEE80211_BAND_5GHZ:
net/wireless/ath/ath9k/rc.c:	else if (rate->flags & IEEE80211_TX_RC_40_MHZ_WIDTH)
net/wireless/ath/ath9k/rc.c:				if ((flags & IEEE80211_TX_RC_40_MHZ_WIDTH) &&
net/wireless/ath/ath9k/rc.c:	if ((flags & IEEE80211_TX_RC_40_MHZ_WIDTH) &&
net/wireless/ath/ath9k/rc.c:	if ((rate->flags & IEEE80211_TX_RC_40_MHZ_WIDTH) &&
net/wireless/ath/ath9k/rc.c:	if ((sc->hw->conf.channel->band == IEEE80211_BAND_2GHZ) &&
net/wireless/ath/ath9k/rc.c:	if (sc->hw->conf.channel->band == IEEE80211_BAND_2GHZ &&
net/wireless/ath/ath9k/rc.c:			rate->flags |= IEEE80211_TX_RC_40_MHZ_WIDTH;
net/wireless/ath/ath9k/recv.c:			rxs->flag |= RX_FLAG_40MHZ;
net/wireless/ath/ath9k/reg.h:#define AR_CFG_SCLK_1MHZ               0x00000002
net/wireless/ath/ath9k/reg.h:#define AR_CFG_SCLK_32KHZ              0x00000003
net/wireless/ath/ath9k/reg.h:#define AR_CFG_SCLK_32MHZ              0x00000000
net/wireless/ath/ath9k/reg.h:#define AR_CFG_SCLK_4MHZ               0x00000001
net/wireless/ath/ath9k/reg.h:#define AR_ENT_OTP_49GHZ_DISABLE		0x00100000
net/wireless/ath/ath9k/reg.h:#define AR_PHY_CCA_NOM_VAL_2GHZ      -118
net/wireless/ath/ath9k/wmi.h:				    &cmd_rsp, sizeof(cmd_rsp), HZ*2);	\
net/wireless/ath/ath9k/wmi.h:				    sizeof(cmd_rsp), HZ*2);		\
net/wireless/ath/ath9k/xmit.c:	    (curchan->channelFlags & CHANNEL_5GHZ) &&
net/wireless/ath/ath9k/xmit.c:		if (rates[i].flags & IEEE80211_TX_RC_40_MHZ_WIDTH)
net/wireless/ath/ath9k/xmit.c:		if (rates[i].flags & IEEE80211_TX_RC_40_MHZ_WIDTH)
net/wireless/ath/ath9k/xmit.c:		if ((tx_info->band == IEEE80211_BAND_2GHZ) &&
net/wireless/ath/ath9k/xmit.c:		is_40 = !!(rates[i].flags & IEEE80211_TX_RC_40_MHZ_WIDTH);
net/wireless/ath/ath9k/xmit.c:	width = (flags & IEEE80211_TX_RC_40_MHZ_WIDTH) ? 1 : 0;
net/wireless/ath/carl9170/eeprom.h:#define AR9170_LED_MODE_FREQUENCY_0_125HZ	0x0030
net/wireless/ath/carl9170/eeprom.h:#define AR9170_LED_MODE_FREQUENCY_0_25HZ	0x0020
net/wireless/ath/carl9170/eeprom.h:#define AR9170_LED_MODE_FREQUENCY_0_5HZ		0x0010
net/wireless/ath/carl9170/eeprom.h:#define AR9170_LED_MODE_FREQUENCY_1HZ		0x0000
net/wireless/ath/carl9170/eeprom.h:#define AR9170_OPFLAG_2GHZ		2
net/wireless/ath/carl9170/eeprom.h:#define AR9170_OPFLAG_5GHZ		1
net/wireless/ath/carl9170/fw.c:	if (SUPP(CARL9170FW_PSM) && SUPP(CARL9170FW_FIXED_5GHZ_PSM))
net/wireless/ath/carl9170/fwdesc.h:	CARL9170FW_FIXED_5GHZ_PSM,
net/wireless/ath/carl9170/fwdesc.h:	/* Firmware supports PSM in the 5GHZ Band */
net/wireless/ath/carl9170/hw.h:	AHB_AMODE_20MHZ = 1,
net/wireless/ath/carl9170/hw.h:	AHB_AMODE_40MHZ = 2,
net/wireless/ath/carl9170/hw.h:	AHB_AMODE_80MHZ = 3
net/wireless/ath/carl9170/hw.h:	AHB_GMODE_22MHZ = 1,
net/wireless/ath/carl9170/hw.h:	AHB_GMODE_44MHZ = 2,
net/wireless/ath/carl9170/hw.h:	AHB_GMODE_88MHZ = 3,
net/wireless/ath/carl9170/hw.h:	AHB_STATIC_40MHZ = 0,
net/wireless/ath/carl9170/hw.h:#define		AR9170_PWR_CLK_AHB_20_22MHZ		1
net/wireless/ath/carl9170/hw.h:#define		AR9170_PWR_CLK_AHB_40_44MHZ		2
net/wireless/ath/carl9170/hw.h:#define		AR9170_PWR_CLK_AHB_40MHZ		0
net/wireless/ath/carl9170/hw.h:#define		AR9170_PWR_CLK_AHB_80_88MHZ		3
net/wireless/ath/carl9170/led.c:		ieee80211_queue_delayed_work(ar->hw, &ar->led_work, HZ / 10);
net/wireless/ath/carl9170/mac.c:	case IEEE80211_BAND_2GHZ:
net/wireless/ath/carl9170/mac.c:	case IEEE80211_BAND_5GHZ:
net/wireless/ath/carl9170/mac.c:		if (ar->hw->conf.channel->band == IEEE80211_BAND_2GHZ)
net/wireless/ath/carl9170/mac.c:		if (ar->hw->conf.channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/carl9170/mac.c:	if (ar->hw->conf.channel->band == IEEE80211_BAND_5GHZ)
net/wireless/ath/carl9170/mac.c:	if ((ar->hw->conf.channel->band == IEEE80211_BAND_5GHZ) ||
net/wireless/ath/carl9170/main.c:		ar->hw->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/ath/carl9170/main.c:		ar->hw->wiphy->bands[IEEE80211_BAND_5GHZ] =
net/wireless/ath/carl9170/main.c:	if (ar->eeprom.operating_flags & AR9170_OPFLAG_2GHZ) {
net/wireless/ath/carl9170/main.c:	if (ar->eeprom.operating_flags & AR9170_OPFLAG_5GHZ) {
net/wireless/ath/carl9170/main.c:		WARN_ON(wait_for_completion_timeout(&ar->tx_flush, HZ) == 0);
net/wireless/ath/carl9170/phy.c:	bool is_2ghz = band == IEEE80211_BAND_2GHZ;
net/wireless/ath/carl9170/phy.c:	carl9170_regwrite(AR9170_PHY_REG_GAIN_2GHZ_CHAIN_2, val);
net/wireless/ath/carl9170/phy.c:	carl9170_regwrite(AR9170_PHY_REG_GAIN_2GHZ, val);
net/wireless/ath/carl9170/phy.c:			case IEEE80211_BAND_2GHZ:
net/wireless/ath/carl9170/phy.c:	case IEEE80211_BAND_2GHZ:
net/wireless/ath/carl9170/phy.c:			case IEEE80211_BAND_5GHZ:
net/wireless/ath/carl9170/phy.c:	case IEEE80211_BAND_5GHZ:
net/wireless/ath/carl9170/phy.c:			channel->band == IEEE80211_BAND_5GHZ);
net/wireless/ath/carl9170/phy.c:		channel->band == IEEE80211_BAND_5GHZ,
net/wireless/ath/carl9170/phy.c:	if (ar->hw->conf.channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/carl9170/phy.c:	if (!ar->hw->wiphy->bands[IEEE80211_BAND_5GHZ] &&
net/wireless/ath/carl9170/phy.c:		SET_VAL(AR9170_PHY_GAIN_2GHZ_BSW_MARGIN, val, m->bswMargin[0]);
net/wireless/ath/carl9170/phy.c:	SET_VAL(AR9170_PHY_GAIN_2GHZ_RXTX_MARGIN, val, m->rxTxMarginCh[0]);
net/wireless/ath/carl9170/phy.c:	SET_VAL(AR9170_PHY_GAIN_2GHZ_RXTX_MARGIN, val, m->rxTxMarginCh[1]);
net/wireless/ath/carl9170/phy.c:	val = carl9170_def_val(AR9170_PHY_REG_GAIN_2GHZ_CHAIN_2,
net/wireless/ath/carl9170/phy.c:	val = carl9170_def_val(AR9170_PHY_REG_GAIN_2GHZ, is_2ghz, is_40mhz);
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_BSW_ATTEN		0x0000001f
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_BSW_ATTEN_S	0
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_BSW_MARGIN		0x00003c00
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_BSW_MARGIN_S	10
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_RXTX_MARGIN	0x00fc0000
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_RXTX_MARGIN_S	18
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_XATTEN1_DB		0x0000003f
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_XATTEN1_DB_S	0
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_XATTEN1_MARGIN	0x0001f000
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_XATTEN1_MARGIN_S	12
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_XATTEN2_DB		0x00000fc0
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_XATTEN2_DB_S	6
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_XATTEN2_MARGIN	0x003e0000
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_GAIN_2GHZ_XATTEN2_MARGIN_S	17
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_MODE_RF2GHZ			0x02
net/wireless/ath/carl9170/phy.h:#define		AR9170_PHY_MODE_RF5GHZ			0x00
net/wireless/ath/carl9170/phy.h:#define	AR9170_PHY_REG_GAIN_2GHZ		(AR9170_PHY_REG_BASE + 0x0a0c)
net/wireless/ath/carl9170/phy.h:#define	AR9170_PHY_REG_GAIN_2GHZ_CHAIN_2	(AR9170_PHY_REG_BASE + 0x2a0c)
net/wireless/ath/carl9170/rx.c:		if (status->band == IEEE80211_BAND_2GHZ)
net/wireless/ath/carl9170/rx.c:			status->flag |= RX_FLAG_40MHZ;
net/wireless/ath/carl9170/tx.c:			if (info->band == IEEE80211_BAND_2GHZ)
net/wireless/ath/carl9170/tx.c:			if (info->band == IEEE80211_BAND_2GHZ)
net/wireless/ath/carl9170/tx.c:		if (info->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/carl9170/tx.c:		if (info->band == IEEE80211_BAND_2GHZ) {
net/wireless/ath/carl9170/tx.c:		if (rate->flags & IEEE80211_TX_RC_40_MHZ_WIDTH) {
net/wireless/ath/carl9170/tx.c:		if (txrate->flags & IEEE80211_TX_RC_40_MHZ_WIDTH) {
net/wireless/ath/carl9170/tx.c:	if (txrate->flags & IEEE80211_TX_RC_40_MHZ_WIDTH)
net/wireless/ath/carl9170/tx.c:		tmp |= cpu_to_le32(AR9170_TX_PHY_BW_40MHZ <<
net/wireless/ath/carl9170/tx.c:		tmp |= cpu_to_le32(AR9170_TX_PHY_BW_40MHZ_DUP <<
net/wireless/ath/carl9170/usb.c:		err = wait_for_completion_timeout(&ar->cmd_wait, HZ);
net/wireless/ath/carl9170/usb.c:	if (wait_for_completion_timeout(&ar->fw_boot_wait, HZ) == 0) {
net/wireless/ath/carl9170/wlan.h:#define	AR9170_TX_PHY_BW_20MHZ			0
net/wireless/ath/carl9170/wlan.h:#define	AR9170_TX_PHY_BW_40MHZ			2
net/wireless/ath/carl9170/wlan.h:#define	AR9170_TX_PHY_BW_40MHZ_DUP		3
net/wireless/ath/regd.c:		ATH9K_2GHZ_ALL,
net/wireless/ath/regd.c:		ATH9K_2GHZ_CH01_11,
net/wireless/ath/regd.c:		ATH9K_2GHZ_CH01_11,
net/wireless/ath/regd.c:		ATH9K_2GHZ_CH01_11,
net/wireless/ath/regd.c:		ATH9K_2GHZ_CH01_11,
net/wireless/ath/regd.c:		ATH9K_2GHZ_CH12_13,
net/wireless/ath/regd.c:		ATH9K_2GHZ_CH12_13,
net/wireless/ath/regd.c:				ATH9K_2GHZ_CH12_13, \
net/wireless/ath/regd.c:				ATH9K_2GHZ_CH14
net/wireless/ath/regd.c:				ATH9K_5GHZ_5470_5850
net/wireless/ath/regd.c:				ATH9K_5GHZ_5725_5850
net/wireless/ath/regd.c:		ATH9K_5GHZ_ALL,
net/wireless/ath/regd.c:		ATH9K_5GHZ_ALL,
net/wireless/ath/regd.c:		ATH9K_5GHZ_ALL,
net/wireless/ath/regd.c:		ATH9K_5GHZ_NO_MIDBAND,
net/wireless/ath/regd.c:		ATH9K_5GHZ_NO_MIDBAND,
net/wireless/ath/regd.c:	case IEEE80211_BAND_2GHZ:
net/wireless/ath/regd.c:	case IEEE80211_BAND_5GHZ:
net/wireless/ath/regd.c:#define ATH9K_2GHZ_ALL		ATH9K_2GHZ_CH01_11, \
net/wireless/ath/regd.c:#define ATH9K_2GHZ_CH01_11	REG_RULE(2412-10, 2462+10, 40, 0, 20, 0)
net/wireless/ath/regd.c:#define ATH9K_2GHZ_CH12_13	REG_RULE(2467-10, 2472+10, 40, 0, 20,\
net/wireless/ath/regd.c:#define ATH9K_2GHZ_CH14		REG_RULE(2484-10, 2484+10, 40, 0, 20,\
net/wireless/ath/regd.c:#define ATH9K_5GHZ_5150_5350	REG_RULE(5150-10, 5350+10, 40, 0, 30,\
net/wireless/ath/regd.c:#define ATH9K_5GHZ_5470_5850	REG_RULE(5470-10, 5850+10, 40, 0, 30,\
net/wireless/ath/regd.c:#define ATH9K_5GHZ_5725_5850	REG_RULE(5725-10, 5850+10, 40, 0, 30,\
net/wireless/ath/regd.c:#define ATH9K_5GHZ_ALL		ATH9K_5GHZ_5150_5350, \
net/wireless/ath/regd.c:#define ATH9K_5GHZ_NO_MIDBAND	ATH9K_5GHZ_5150_5350, \
net/wireless/ath/regd.c:	if (!wiphy->bands[IEEE80211_BAND_5GHZ])
net/wireless/ath/regd.c:	sband = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/ath/regd.c:	sband = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/atmel.c:#define MGMT_JIFFIES (256 * HZ / 100)
net/wireless/atmel.c:	if (time_after(jiffies, priv->last_survey + 20 * HZ))
net/wireless/atmel.c:		priv->last_qual += HZ;
net/wireless/atmel.c:	unsigned long time_diff = (jiffies - priv->last_qual) / HZ;
net/wireless/b43/b43.h:#define  B43_BCMA_IOCTL_PHY_BW_10MHZ	0x00000000	/* 10 MHz bandwidth, 40 MHz PHY */
net/wireless/b43/b43.h:#define  B43_BCMA_IOCTL_PHY_BW_20MHZ	0x00000040	/* 20 MHz bandwidth, 80 MHz PHY */
net/wireless/b43/b43.h:#define  B43_BCMA_IOCTL_PHY_BW_40MHZ	0x00000080	/* 40 MHz bandwidth, 160 MHz PHY */
net/wireless/b43/b43.h:#define B43_BFH_EXTLNA_5GHZ		0x1000	/* has an external LNA (5GHz mode) */
net/wireless/b43/b43.h:#define  B43_SHM_SH_CHAN_40MHZ		0x0200	/* Bit set, if 40 Mhz channel width */
net/wireless/b43/b43.h:#define  B43_SHM_SH_CHAN_5GHZ		0x0100	/* Bit set, if 5 Ghz channel */
net/wireless/b43/b43.h:#define B43_TMSHIGH_HAVE_2GHZ_PHY	0x00010000	/* 2.4 GHz PHY available (rev >= 5) */
net/wireless/b43/b43.h:#define B43_TMSHIGH_HAVE_5GHZ_PHY	0x00020000	/* 5 GHz PHY available (rev >= 5) */
net/wireless/b43/b43.h:#define  B43_TMSLOW_PHY_BANDWIDTH_10MHZ	0x00000000	/* 10 MHz bandwidth, 40 MHz PHY */
net/wireless/b43/b43.h:#define  B43_TMSLOW_PHY_BANDWIDTH_20MHZ	0x00400000	/* 20 MHz bandwidth, 80 MHz PHY */
net/wireless/b43/b43.h:#define  B43_TMSLOW_PHY_BANDWIDTH_40MHZ	0x00800000	/* 40 MHz bandwidth, 160 MHz PHY */
net/wireless/b43/b43.h: * Returns one of IEEE80211_BAND_2GHZ and IEEE80211_BAND_5GHZ.
net/wireless/b43/debugfs.c:	return (expire - now) / HZ;
net/wireless/b43/dma.c:		next_overflow = ring->last_injected_overflow + HZ;
net/wireless/b43legacy/dma.c:		next_overflow = ring->last_injected_overflow + HZ;
net/wireless/b43legacy/main.c:	case IEEE80211_BAND_2GHZ:
net/wireless/b43legacy/main.c:		delay = round_jiffies_relative(HZ * 15);
net/wireless/b43legacy/main.c:		dev->wl->hw->wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/b43legacy/main.c:		hw->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/b43legacy/main.c:		hw->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/b43legacy/xmit.c:		status.band = IEEE80211_BAND_2GHZ;
net/wireless/b43legacy/xmit.h:#define B43legacy_TX4_MAC_5GHZ		0x00000080
net/wireless/b43/lo.h:#define B43_LO_CALIB_EXPIRE	(HZ * (30 - 2))
net/wireless/b43/lo.h:#define B43_LO_PWRVEC_EXPIRE	(HZ * (30 - 2))
net/wireless/b43/lo.h:#define B43_LO_TXCTL_EXPIRE	(HZ * (180 - 4))
net/wireless/b43/main.c:	.band		= IEEE80211_BAND_2GHZ,
net/wireless/b43/main.c:	.band			= IEEE80211_BAND_2GHZ,		\
net/wireless/b43/main.c:	.band		= IEEE80211_BAND_5GHZ,
net/wireless/b43/main.c:	.band		= IEEE80211_BAND_5GHZ,
net/wireless/b43/main.c:	.band			= IEEE80211_BAND_5GHZ,		\
net/wireless/b43/main.c:		case IEEE80211_BAND_2GHZ:
net/wireless/b43/main.c:	case IEEE80211_BAND_2GHZ:
net/wireless/b43/main.c:		case IEEE80211_BAND_5GHZ:
net/wireless/b43/main.c:	case IEEE80211_BAND_5GHZ:
net/wireless/b43/main.c:		delay = round_jiffies_relative(HZ * 15);
net/wireless/b43/main.c:	flags |= B43_BCMA_IOCTL_PHY_BW_20MHZ; /* Make 20 MHz def */
net/wireless/b43/main.c:		flags |= B43_TMSLOW_PHY_BANDWIDTH_20MHZ; /* Make 20 MHz def */
net/wireless/b43/main.c:			have_2ghz_phy = !!(tmp & B43_TMSHIGH_HAVE_2GHZ_PHY);
net/wireless/b43/main.c:			have_5ghz_phy = !!(tmp & B43_TMSHIGH_HAVE_5GHZ_PHY);
net/wireless/b43/main.c:		hw->wiphy->bands[IEEE80211_BAND_2GHZ] = &b43_band_2GHz;
net/wireless/b43/main.c:			hw->wiphy->bands[IEEE80211_BAND_5GHZ] = &b43_band_5GHz_aphy;
net/wireless/b43/main.c:			hw->wiphy->bands[IEEE80211_BAND_5GHZ] = &b43_band_5GHz_nphy;
net/wireless/b43/main.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ)
net/wireless/b43/main.c:			if (tmshigh & B43_TMSHIGH_HAVE_2GHZ_PHY)
net/wireless/b43/main.c:			if (tmshigh & B43_TMSHIGH_HAVE_2GHZ_PHY)
net/wireless/b43/phy_common.c:		channelcookie |= B43_SHM_SH_CHAN_40MHZ;
net/wireless/b43/phy_common.c:		channelcookie |= B43_SHM_SH_CHAN_5GHZ;
net/wireless/b43/phy_common.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ)
net/wireless/b43/phy_common.c:	phy->next_txpwr_check_time = round_jiffies(now + (HZ * 2));
net/wireless/b43/phy_ht.c:	} else if (new_channel->band == IEEE80211_BAND_2GHZ && old_band_5ghz) {
net/wireless/b43/phy_ht.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_ht.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_ht.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_ht.c:	if (new_channel->band == IEEE80211_BAND_5GHZ && !old_band_5ghz) {
net/wireless/b43/phy_ht.h:#define  B43_PHY_HT_BANDCTL_5GHZ		0x0001 /* Use the 5GHz band */
net/wireless/b43/phy_lcn.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_lcn.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_lcn.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_lcn.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_lcn.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_lp.c:	   ((b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) ||
net/wireless/b43/phy_lp.c:	} else if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ ||
net/wireless/b43/phy_lp.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_lp.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_lp.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_lp.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_lp.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_lp.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_lp.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_lp.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_lp.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_lp.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_lp.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_lp.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_lp.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:	b2056_upload_syn_pll_cp2(dev, band == IEEE80211_BAND_5GHZ);
net/wireless/b43/phy_n.c:	     b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ))
net/wireless/b43/phy_n.c:	    b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:	   (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)) {
net/wireless/b43/phy_n.c:		b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ);
net/wireless/b43/phy_n.c:	     b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) ||
net/wireless/b43/phy_n.c:	    b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) {
net/wireless/b43/phy_n.c:		b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) {
net/wireless/b43/phy_n.c:		& B43_NPHY_BANDCTL_5GHZ;
net/wireless/b43/phy_n.c:		    B43_NPHY_BANDCTL_5GHZ)) {
net/wireless/b43/phy_n.c:		b43_phy_mask(dev, B43_NPHY_BANDCTL, ~B43_NPHY_BANDCTL_5GHZ);
net/wireless/b43/phy_n.c:		b43_phy_read(dev, B43_NPHY_BANDCTL) & B43_NPHY_BANDCTL_5GHZ;
net/wireless/b43/phy_n.c:		b43_phy_set(dev, B43_NPHY_BANDCTL, B43_NPHY_BANDCTL_5GHZ);
net/wireless/b43/phy_n.c:					b43_radio_write(dev, r + 0x9, (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) ? 0xE : 0xC);
net/wireless/b43/phy_n.c:		bool ghz5 = b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ;
net/wireless/b43/phy_n.c:		(dev->phy.n->ipa5g_on && band == IEEE80211_BAND_5GHZ));
net/wireless/b43/phy_n.c:	} else if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) {
net/wireless/b43/phy_n.c:	} else if (dev->phy.n->ipa5g_on && band == IEEE80211_BAND_5GHZ) {
net/wireless/b43/phy_n.c:	} else if (new_channel->band == IEEE80211_BAND_2GHZ && old_band_5ghz) {
net/wireless/b43/phy_n.c:	ext_lna = ghz5 ? sprom->boardflags_hi & B43_BFH_EXTLNA_5GHZ :
net/wireless/b43/phy_n.c:			if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_n.c:			if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:			if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_n.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_n.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_n.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ &&
net/wireless/b43/phy_n.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:			if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) {
net/wireless/b43/phy_n.c:			if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) {
net/wireless/b43/phy_n.c:			if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) {
net/wireless/b43/phy_n.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ)
net/wireless/b43/phy_n.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) {
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ)
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ)
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ &&
net/wireless/b43/phy_n.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) {
net/wireless/b43/phy_n.c:			if (band == IEEE80211_BAND_5GHZ)
net/wireless/b43/phy_n.c:			if (band == IEEE80211_BAND_5GHZ)
net/wireless/b43/phy_n.c:			if (band == IEEE80211_BAND_5GHZ)
net/wireless/b43/phy_n.c:			if (band == IEEE80211_BAND_5GHZ)
net/wireless/b43/phy_n.c:		if (band == IEEE80211_BAND_5GHZ)
net/wireless/b43/phy_n.c:		if (band == IEEE80211_BAND_5GHZ) {
net/wireless/b43/phy_n.c:	if (dev->phy.n->ipa2g_on && band == IEEE80211_BAND_2GHZ) {
net/wireless/b43/phy_n.c:		if (new_channel->band == IEEE80211_BAND_2GHZ)
net/wireless/b43/phy_n.c:	if (new_channel->band == IEEE80211_BAND_5GHZ && !old_band_5ghz) {
net/wireless/b43/phy_n.c:		indx = (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) ?
net/wireless/b43/phy_n.c:	return ((dev->phy.n->ipa2g_on && band == IEEE80211_BAND_2GHZ) ||
net/wireless/b43/phy_n.c:	tmp16 = (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) ?
net/wireless/b43/phy_n.c:				tmp = (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) ? 0xC : 0xE;
net/wireless/b43/phy_n.c:		tmp = (channel->band == IEEE80211_BAND_5GHZ) ? 0x0020 : 0x0050;
net/wireless/b43/phy_n.c:		tmp = (channel->band == IEEE80211_BAND_5GHZ) ? 4 : 0;
net/wireless/b43/phy_n.c:					val = (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) ? 4 : 8;
net/wireless/b43/phy_n.c:						val = (band == IEEE80211_BAND_5GHZ) ? 0xC : 0xE;
net/wireless/b43/phy_n.h:#define  B43_NPHY_BANDCTL_5GHZ			0x0001 /* Use the 5GHz band */
net/wireless/b43/tables_lpphy.c:		else if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/tables_lpphy.c:		else if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/tables_lpphy.c:		else if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ)
net/wireless/b43/tables_lpphy.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/tables_lpphy.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/tables_lpphy.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ)
net/wireless/b43/tables_lpphy.c:		if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ)
net/wireless/b43/tables_nphy.c:	    (dev->phy.n->ipa5g_on && band == IEEE80211_BAND_5GHZ)) {
net/wireless/b43/tables_nphy.c:	} else if (b43_current_band(dev->wl) == IEEE80211_BAND_5GHZ) {
net/wireless/b43/tables_nphy.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/tables_nphy.c:	if ((dev->phy.n->ipa2g_on && band == IEEE80211_BAND_2GHZ) ||
net/wireless/b43/tables_phy_lcn.c:	if (b43_current_band(dev->wl) == IEEE80211_BAND_2GHZ) {
net/wireless/b43/xmit.c:		if (chanstat & B43_RX_CHAN_5GHZ) {
net/wireless/b43/xmit.c:		mac_ctl |= B43_TXH_MAC_5GHZ;
net/wireless/b43/xmit.c:			status.band = IEEE80211_BAND_2GHZ;
net/wireless/b43/xmit.c:		status.band = IEEE80211_BAND_2GHZ;
net/wireless/b43/xmit.c:			status.band = IEEE80211_BAND_5GHZ;
net/wireless/b43/xmit.c:		status.band = IEEE80211_BAND_5GHZ;
net/wireless/b43/xmit.h:#define B43_RX_CHAN_40MHZ		0x1000 /* 40 Mhz channel width */
net/wireless/b43/xmit.h:#define B43_RX_CHAN_5GHZ		0x0800 /* 5 Ghz band */
net/wireless/b43/xmit.h:#define B43_TXH_MAC_40MHZ		0x00000100 /* Use 40 MHz bandwidth */
net/wireless/b43/xmit.h:#define B43_TXH_MAC_5GHZ		0x00000080 /* 5GHz band */
net/wireless/bcmdhd/bcmwifi_channels.c:			center_chan -= CH_20MHZ_APART;
net/wireless/bcmdhd/bcmwifi_channels.c:			center_chan += CH_20MHZ_APART;
net/wireless/bcmdhd/bcmwifi_channels.c:			center_chan += CH_20MHZ_APART;
net/wireless/bcmdhd/bcmwifi_channels.c:			center_chan -= CH_40MHZ_APART;
net/wireless/bcmdhd/bcmwifi_channels.c:			center_chan += CH_40MHZ_APART;
net/wireless/bcmdhd/bcmwifi_channels.c: * channels this is just the channel number, for 40MHZ, 80MHz, 160MHz channels it is the 20MHZ
net/wireless/bcmdhd/bcmwifi_channels.c:#endif /* CHANSPEC_NEW_40MHZ_FORMAT */
net/wireless/bcmdhd/bcmwifi_channels.c:			if (ch2 > ch1 + CH_80MHZ_APART)
net/wireless/bcmdhd/bcmwifi_channels.c:#ifdef CHANSPEC_NEW_40MHZ_FORMAT
net/wireless/bcmdhd/bcmwifi_channels.c:				primary80_chan = chan1 - CH_40MHZ_APART;
net/wireless/bcmdhd/bcmwifi_channels.c:				primary80_chan = chan1 + CH_40MHZ_APART;
net/wireless/bcmdhd/bcmwifi_channels.c:				secondary80_chan = chan1 - CH_40MHZ_APART;
net/wireless/bcmdhd/bcmwifi_channels.c:				secondary80_chan = chan1 + CH_40MHZ_APART;
net/wireless/bcmdhd/bcmwifi_channels.h:				((channel) + 3 * CH_10MHZ_APART) : 0)
net/wireless/bcmdhd/bcmwifi_channels.h:					((channel) - CH_10MHZ_APART) : 0)
net/wireless/bcmdhd/bcmwifi_channels.h:					((channel) + CH_10MHZ_APART) : 0)
net/wireless/bcmdhd/bcmwifi_channels.h:					((channel) + CH_20MHZ_APART) : 0)
net/wireless/bcmdhd/bcmwifi_channels.h: * chanspec of the primary 20MHZ channel specified by the chanspec.
net/wireless/bcmdhd/bcmwifi_channels.h:#define CH_10MHZ_APART			2
net/wireless/bcmdhd/bcmwifi_channels.h:#define CH160MHZ_CHSPEC(channel, ctlsb)	(chanspec_t) \
net/wireless/bcmdhd/bcmwifi_channels.h:#define CH_20MHZ_APART			4
net/wireless/bcmdhd/bcmwifi_channels.h:#define CH20MHZ_CHSPEC(channel)		(chanspec_t)((chanspec_t)(channel) | WL_CHANSPEC_BW_20 | \
net/wireless/bcmdhd/bcmwifi_channels.h:#define CH20MHZ_LCHSPEC(channel) \
net/wireless/bcmdhd/bcmwifi_channels.h:#define CH_40MHZ_APART			8
net/wireless/bcmdhd/bcmwifi_channels.h:#define CH40MHZ_CHSPEC(channel, ctlsb)	(chanspec_t) \
net/wireless/bcmdhd/bcmwifi_channels.h:#define CH_5MHZ_APART			1	/* 2G band channels are 5 Mhz apart */
net/wireless/bcmdhd/bcmwifi_channels.h:#define CH_80MHZ_APART			16
net/wireless/bcmdhd/bcmwifi_channels.h:#define CH80MHZ_CHSPEC(channel, ctlsb)	(chanspec_t) \
net/wireless/bcmdhd/bcmwifi_channels.h:#define LL_20_SB(channel) (((channel) > 3 * CH_10MHZ_APART) ? ((channel) - 3 * CH_10MHZ_APART) : 0)
net/wireless/bcmdhd/bcmwifi_channels.h:#define LOWER_20_SB(channel)		(((channel) > CH_10MHZ_APART) ? \
net/wireless/bcmdhd/bcmwifi_channels.h:#define LOWER_40_SB(channel)		((channel) - CH_20MHZ_APART)
net/wireless/bcmdhd/bcmwifi_channels.h:#define NEXT_20MHZ_CHAN(channel)	(((channel) < (MAXCHANNEL - CH_20MHZ_APART)) ? \
net/wireless/bcmdhd/bcmwifi_channels.h:#define UPPER_20_SB(channel)		(((channel) < (MAXCHANNEL - CH_10MHZ_APART)) ? \
net/wireless/bcmdhd/bcmwifi_channels.h:#define UPPER_40_SB(channel)		((channel) + CH_20MHZ_APART)
net/wireless/bcmdhd/bcmwifi_channels.h:#define UU_20_SB(channel) 	(((channel) < (MAXCHANNEL - 3 * CH_10MHZ_APART)) ? \
net/wireless/bcmdhd/bcmwifi_channels.h:#define WLC_2G_25MHZ_OFFSET		5	/* 2.4GHz band channel offset */
net/wireless/bcmdhd/bcmwifi_channels.h:#else /* !WL11N_20MHZONLY */
net/wireless/bcmdhd/bcmwifi_channels.h:#endif /* !WL11N_20MHZONLY */
net/wireless/bcmdhd/bcmwifi_channels.h:#ifdef WL11N_20MHZONLY
net/wireless/bcmdhd/dhd_linux.c:			DHD_ERROR(("cpu freq is changed to %u kHZ on CPU %d\n",
net/wireless/bcmdhd/dhd_linux.c:	int timeout = (IOCTL_RESP_TIMEOUT / 1000) * HZ;
net/wireless/bcmdhd/dhd_linux.c:	timeout = dhd_ioctl_timeout_msec * HZ / 1000;
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define VHT_BI_160MHZ			    0x00000400
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define VHT_BI_8080MHZ			    0x00000800
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define VHT_BI_80MHZ			    0x00000200
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define VHT_BI_SGI_80MHZ			0x00000100
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_BW_160MHZ		3
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_BW_20MHZ		0
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_BW_40MHZ		1
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_BW_80MHZ		2
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_BW_CAP_160MHZ(bw_cap)(((bw_cap) & WLC_BW_160MHZ_BIT) ? TRUE : FALSE)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_BW_CAP_20MHZ(bw_cap)	(((bw_cap) & WLC_BW_20MHZ_BIT) ? TRUE : FALSE)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_BW_CAP_40MHZ(bw_cap)	(((bw_cap) & WLC_BW_40MHZ_BIT) ? TRUE : FALSE)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_BW_CAP_80MHZ(bw_cap)	(((bw_cap) & WLC_BW_80MHZ_BIT) ? TRUE : FALSE)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WLC_BW_160MHZ_BIT		(1<<3)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WLC_BW_20MHZ_BIT		(1<<0)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WLC_BW_40MHZ_BIT		(1<<1)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WLC_BW_80MHZ_BIT		(1<<2)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WLC_BW_CAP_160MHZ		(WLC_BW_160MHZ_BIT|WLC_BW_80MHZ_BIT| \
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WLC_BW_CAP_20MHZ		(WLC_BW_20MHZ_BIT)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WLC_BW_CAP_40MHZ		(WLC_BW_40MHZ_BIT|WLC_BW_20MHZ_BIT)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WLC_BW_CAP_80MHZ		(WLC_BW_80MHZ_BIT|WLC_BW_40MHZ_BIT|WLC_BW_20MHZ_BIT)
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define	WL_COEX_40MHZ_INTOLERANT	0x02
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_RSPEC_BW_160MHZ      0x00040000
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_RSPEC_BW_20MHZ       0x00010000
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_RSPEC_BW_40MHZ       0x00020000
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_RSPEC_BW_80MHZ       0x00030000
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_STA_CAP_40MHZ		0x0002  /* FALSE:20Mhz, TRUE:20/40MHZ supported */
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_STA_CAP_40MHZ_INTOLERANT	0x4000	/* 40MHz Intolerant */
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:#define WL_STA_CAP_SHORT_GI_20		0x0020	/* 20MHZ short guard interval support */
net/wireless/bcmdhd/include/devctrl_if/wlioctl_defs.h:	WLC_BW_40MHZ_BIT|WLC_BW_20MHZ_BIT)
net/wireless/bcmdhd/include/linux_osl.h:#define OSL_SYSUPTIME()		((uint32)jiffies * (1000 / HZ))
net/wireless/bcmdhd/include/proto/802.11.h:#define	DOT11_OBSS_COEX_20MHZ_WIDTH_REQ	0x04
net/wireless/bcmdhd/include/proto/802.11.h:#define	DOT11_OBSS_COEX_40MHZ_INTOLERANT	0x02
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_OPER_MODE_160MHZ 3
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_OPER_MODE_20MHZ 0
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_OPER_MODE_40MHZ 1
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_OPER_MODE_8080MHZ 3
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_OPER_MODE_80MHZ 2
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_OPER_MODE_CHANNEL_WIDTH_160MHZ(mode) (\
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_OPER_MODE_CHANNEL_WIDTH_20MHZ(mode) (\
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_OPER_MODE_CHANNEL_WIDTH_40MHZ(mode) (\
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_OPER_MODE_CHANNEL_WIDTH_8080MHZ(mode) (\
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_OPER_MODE_CHANNEL_WIDTH_80MHZ(mode) (\
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_VHT_TRANSMIT_PWR_ENVELOPE_IE_LEN_160MHZ	3
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_VHT_TRANSMIT_PWR_ENVELOPE_IE_LEN_40MHZ	1
net/wireless/bcmdhd/include/proto/802.11.h:#define DOT11_VHT_TRANSMIT_PWR_ENVELOPE_IE_LEN_80MHZ	2
net/wireless/bcmdhd/include/proto/802.11.h:#define HT_CAP_40MHZ		0x0002  /* FALSE:20Mhz, TRUE:20/40MHZ supported */
net/wireless/bcmdhd/include/proto/802.11.h:#define HT_CAP_40MHZ_INTOLERANT 0x4000	/* 40MHz Intolerant */
net/wireless/bcmdhd/include/proto/802.11.h:#define HT_CAP_SHORT_GI_20	0x0020	/* 20MHZ short guard interval support */
net/wireless/bcmdhd/include/proto/802.11.h:#define VHT_CAP_INFO_SGI_160MHZ                 0x00000040
net/wireless/bcmdhd/include/proto/802.11.h:#define VHT_CAP_INFO_SGI_80MHZ                  0x00000020
net/wireless/bcmdhd/include/proto/802.11.h:#define VHT_SIGA1_160MHZ_VAL            0x000003
net/wireless/bcmdhd/include/proto/802.11.h:#define VHT_SIGA1_20MHZ_VAL             0x000000
net/wireless/bcmdhd/include/proto/802.11.h:#define VHT_SIGA1_40MHZ_VAL             0x000001
net/wireless/bcmdhd/include/proto/802.11.h:#define VHT_SIGA1_80MHZ_VAL             0x000002
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_2GHZ_20MHZ_CLASS_12		= 81,	/* Ch 1-11			 */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_2GHZ_40MHZ_CLASS_32		= 83,	/* Ch 1-7,     lower */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_2GHZ_40MHZ_CLASS_33		= 84,	/* Ch 5-11,    upper */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_20MHZ_CLASS_1		= 115,	/* Ch 36-48			 */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_20MHZ_CLASS_2_DFS	= 118,	/* Ch 52-64			 */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_20MHZ_CLASS_3		= 124,	/* Ch 149-161		 */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_20MHZ_CLASS_4_DFS	= 121,	/* Ch 100-140		 */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_20MHZ_CLASS_5		= 125,	/* Ch 149-165		 */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_40MHZ_CLASS_22		= 116,	/* Ch 36-44,   lower */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_40MHZ_CLASS_23_DFS 	= 119,	/* Ch 52-60,   lower */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_40MHZ_CLASS_24_DFS	= 122,	/* Ch 100-132, lower */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_40MHZ_CLASS_25		= 126,	/* Ch 149-157, lower */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_40MHZ_CLASS_27		= 117,	/* Ch 40-48,   upper */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_40MHZ_CLASS_28_DFS	= 120,	/* Ch 56-64,   upper */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_40MHZ_CLASS_29_DFS	= 123,	/* Ch 104-136, upper */
net/wireless/bcmdhd/include/proto/802.11.h:	DOT11_5GHZ_40MHZ_CLASS_30		= 127,	/* Ch 153-161, upper */
net/wireless/bcmdhd/include/proto/802.11.h:	((mode) & DOT11_OPER_MODE_CHANNEL_WIDTH_MASK) == DOT11_OPER_MODE_160MHZ)
net/wireless/bcmdhd/include/proto/802.11.h:	((mode) & DOT11_OPER_MODE_CHANNEL_WIDTH_MASK) == DOT11_OPER_MODE_20MHZ)
net/wireless/bcmdhd/include/proto/802.11.h:	((mode) & DOT11_OPER_MODE_CHANNEL_WIDTH_MASK) == DOT11_OPER_MODE_40MHZ)
net/wireless/bcmdhd/include/proto/802.11.h:	((mode) & DOT11_OPER_MODE_CHANNEL_WIDTH_MASK) == DOT11_OPER_MODE_8080MHZ)
net/wireless/bcmdhd/include/proto/802.11.h:	((mode) & DOT11_OPER_MODE_CHANNEL_WIDTH_MASK) == DOT11_OPER_MODE_80MHZ)
net/wireless/bcmdhd/include/proto/wps.h:#define WPS_RFBAND_24GHZ    0x01
net/wireless/bcmdhd/include/proto/wps.h:#define WPS_RFBAND_50GHZ    0x02
net/wireless/bcmdhd/include/sbchipc.h:#define CCTL_4319USB_24MHZ_PLL_SEL	2
net/wireless/bcmdhd/include/sbchipc.h:#define CCTL_4319USB_48MHZ_PLL_SEL	1
net/wireless/bcmdhd/include/sbchipc.h:#define CST4322_XTAL_FREQ_20_40MHZ	0x00000020
net/wireless/bcmdhd/include/sbchipc.h:#define DOT11MAC_880MHZ_CLK_DIVISOR_MASK (0xFF << DOT11MAC_880MHZ_CLK_DIVISOR_SHIFT)
net/wireless/bcmdhd/include/sbchipc.h:#define DOT11MAC_880MHZ_CLK_DIVISOR_SHIFT 8
net/wireless/bcmdhd/include/sbchipc.h:#define DOT11MAC_880MHZ_CLK_DIVISOR_VAL  (0xE << DOT11MAC_880MHZ_CLK_DIVISOR_SHIFT)
net/wireless/bcmdhd/include/sbchipc.h:#define PMU0_PLL0_PC0_DIV_ARM_110MHZ	0
net/wireless/bcmdhd/include/sbchipc.h:#define PMU0_PLL0_PC0_DIV_ARM_58_6MHZ	7
net/wireless/bcmdhd/include/sbchipc.h:#define PMU0_PLL0_PC0_DIV_ARM_62_9MHZ	6
net/wireless/bcmdhd/include/sbchipc.h:#define PMU0_PLL0_PC0_DIV_ARM_67_7MHZ	5
net/wireless/bcmdhd/include/sbchipc.h:#define PMU0_PLL0_PC0_DIV_ARM_73_3MHZ	4
net/wireless/bcmdhd/include/sbchipc.h:#define PMU0_PLL0_PC0_DIV_ARM_80MHZ	3 /* Default */
net/wireless/bcmdhd/include/sbchipc.h:#define PMU0_PLL0_PC0_DIV_ARM_88MHZ	2
net/wireless/bcmdhd/include/sbchipc.h:#define PMU0_PLL0_PC0_DIV_ARM_97_7MHZ	1
net/wireless/bcmdhd/include/sbchipc.h:#define PMU15_ARM_96MHZ			96000000	/* 96 Mhz */
net/wireless/bcmdhd/include/sbchipc.h:#define PMU15_ARM_97MHZ			97000000	/* 97 Mhz */
net/wireless/bcmdhd/include/sbchipc.h:#define PMU15_ARM_98MHZ			98400000	/* 98.4 Mhz */
net/wireless/bcmdhd/include/wlioctl.h:	WL_OTA_TEST_BW_20_IN_40MHZ = 0,	/* 20 in 40 operation */
net/wireless/bcmdhd/include/wlioctl.h:	WL_OTA_TEST_BW_20MHZ = 1,		/* 20 Mhz operation */
net/wireless/bcmdhd/include/wlioctl.h:	WL_OTA_TEST_BW_40MHZ = 2		/* full 40Mhz operation */
net/wireless/bcmdhd/Kconfig:config WIFI_2GHZ_VHT_NO_SUPPORT
net/wireless/bcmdhd/Kconfig:	  This is a configuration for 2GHZ VHT mode.
net/wireless/bcmdhd/siutils.c:		        (ILP_DIV_1MHZ << SYCC_CD_SHIFT));
net/wireless/bcmdhd/siutils_priv.h:#define	ILP_DIV_1MHZ		4		/* ILP = 1 MHz */
net/wireless/bcmdhd/siutils_priv.h:#define	ILP_DIV_5MHZ		0		/* ILP = 5 MHz */
net/wireless/bcmdhd/wl_android.c:				req_buf[channel] = CH20MHZ_CHSPEC(channel);
net/wireless/bcmdhd/wl_android.c:			req_buf[channel] = CH20MHZ_CHSPEC(channel);
net/wireless/bcmdhd/wl_android.c:				req_buf[channel] = CH20MHZ_LCHSPEC(channel);
net/wireless/bcmdhd/wl_cfg80211.c:		band = (channel <= CH_MAX_2G_CHANNEL) ? IEEE80211_BAND_2GHZ : IEEE80211_BAND_5GHZ;
net/wireless/bcmdhd/wl_cfg80211.c:			band = (channel_req <= CH_MAX_2G_CHANNEL) ? NL80211_BAND_2GHZ
net/wireless/bcmdhd/wl_cfg80211.c:			band = IEEE80211_BAND_2GHZ;
net/wireless/bcmdhd/wl_cfg80211.c:			band = IEEE80211_BAND_2GHZ;
net/wireless/bcmdhd/wl_cfg80211.c:	.band = IEEE80211_BAND_2GHZ,
net/wireless/bcmdhd/wl_cfg80211.c:	.band			= IEEE80211_BAND_2GHZ,		\
net/wireless/bcmdhd/wl_cfg80211.c:			band = IEEE80211_BAND_5GHZ;
net/wireless/bcmdhd/wl_cfg80211.c:			band = IEEE80211_BAND_5GHZ;
net/wireless/bcmdhd/wl_cfg80211.c:	.band = IEEE80211_BAND_5GHZ,
net/wireless/bcmdhd/wl_cfg80211.c:	.band			= IEEE80211_BAND_5GHZ,		\
net/wireless/bcmdhd/wl_cfg80211.c:			bands[IEEE80211_BAND_2GHZ] =
net/wireless/bcmdhd/wl_cfg80211.c:			bands[IEEE80211_BAND_5GHZ] =
net/wireless/bcmdhd/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/bcmdhd/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/bcmdhd/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/bcmdhd/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/bcmdhd/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/bcmdhd/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/bcmdhd/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/bcmdhd/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/bcmdhd/wl_cfg80211.c:				channel -= CH_10MHZ_APART;
net/wireless/bcmdhd/wl_cfg80211.c:				channel += CH_10MHZ_APART;
net/wireless/bcmdhd/wl_cfg80211.c:		channel = ieee80211_channel_to_frequency(channel, IEEE80211_BAND_2GHZ);
net/wireless/bcmdhd/wl_cfg80211.c:		channel = ieee80211_channel_to_frequency(channel, IEEE80211_BAND_5GHZ);
net/wireless/bcmdhd/wl_cfg80211.c:			chspec = CH20MHZ_CHSPEC(channel);
net/wireless/bcmdhd/wl_cfg80211.c:			chspec = CH40MHZ_CHSPEC(channel, WL_CHANSPEC_CTL_SB_LOWER);
net/wireless/bcmdhd/wl_cfg80211.c:			chspec = CH40MHZ_CHSPEC(channel, WL_CHANSPEC_CTL_SB_UPPER);
net/wireless/bcmdhd/wl_cfg80211.c:	} else if (chan->band == IEEE80211_BAND_2GHZ)
net/wireless/bcmdhd/wl_cfg80211.c:		else if (chan->band == IEEE80211_BAND_2GHZ)
net/wireless/bcmdhd/wl_cfg80211.c:			else if (WL_BW_CAP_40MHZ(cfg->ioctl_buf[0]))
net/wireless/bcmdhd/wl_cfg80211.c:					if (band == IEEE80211_BAND_2GHZ)
net/wireless/bcmdhd/wl_cfg80211.c:		if (chan->band == IEEE80211_BAND_5GHZ)
net/wireless/bcmdhd/wl_cfg80211.c:	if (chan->band == IEEE80211_BAND_5GHZ) {
net/wireless/bcmdhd/wl_cfg80211.c:			if (request->channels[i]->band == IEEE80211_BAND_2GHZ) {
net/wireless/bcmdhd/wl_cfg80211.c:	if (wiphy->bands[IEEE80211_BAND_2GHZ] == NULL &&
net/wireless/bcmdhd/wl_cfg80211.c:			if (WL_BW_CAP_80MHZ(cfg->ioctl_buf[0]))
net/wireless/bcmdhd/wl_cfg80211.c:			index = IEEE80211_BAND_2GHZ;
net/wireless/bcmdhd/wl_cfg80211.c:			index = IEEE80211_BAND_5GHZ;
net/wireless/bcmdhd/wl_cfg80211.c:				: NL80211_BAND_5GHZ;
net/wireless/bcmdhd/wl_cfg80211.c:			tmp_bw = WLC_BW_CAP_20MHZ;
net/wireless/bcmdhd/wl_cfg80211.c:			tmp_bw = WLC_BW_CAP_40MHZ;
net/wireless/bcmdhd/wl_cfg80211.c:			tmp_bw = WLC_BW_CAP_80MHZ;
net/wireless/bcmdhd/wl_cfg80211.c:				tmp_c -= CH_10MHZ_APART;
net/wireless/bcmdhd/wl_cfg80211.c:				tmp_c -= CH_10MHZ_APART;
net/wireless/bcmdhd/wl_cfg80211.c:				tmp_c += CH_10MHZ_APART;
net/wireless/bcmdhd/wl_cfg80211.c:				tmp_c += CH_10MHZ_APART;
net/wireless/bcmdhd/wl_cfg80211.c:				tmp_c -= (CH_10MHZ_APART + CH_20MHZ_APART);
net/wireless/bcmdhd/wl_cfg80211.c:				tmp_c += (CH_10MHZ_APART + CH_20MHZ_APART);
net/wireless/bcmdhd/wl_cfg80211.c:			unsigned long limit = jiffies + max_wait_timeout * HZ;
net/wireless/bcmdhd/wl_cfg80211.c:	wdev->wiphy->bands[IEEE80211_BAND_2GHZ] = &__wl_band_2ghz;
net/wireless/bcmdhd/wl_cfg80211.c:	wiphy->bands[IEEE80211_BAND_2GHZ] = bands[IEEE80211_BAND_2GHZ];
net/wireless/bcmdhd/wl_cfg80211.c:		wiphy->bands[IEEE80211_BAND_2GHZ] = &__wl_band_2ghz;
net/wireless/bcmdhd/wl_cfg80211.c:	wiphy->bands[IEEE80211_BAND_5GHZ] = bands[IEEE80211_BAND_5GHZ];
net/wireless/bcmdhd/wl_cfg80211.c:		wiphy->bands[IEEE80211_BAND_5GHZ] == NULL) {
net/wireless/brcm80211/brcmfmac/bcmsdh_sdmmc.c:		wait_event_timeout(*wq, false, HZ/100);
net/wireless/brcm80211/brcmfmac/dhd_linux.c:	int timeout = 10 * HZ / 1000;
net/wireless/brcm80211/brcmfmac/dhd_sdio.c:				  jiffies + BRCMF_WD_POLL_MS * HZ / 1000);
net/wireless/brcm80211/brcmfmac/dhd_sdio.c:				jiffies + BRCMF_WD_POLL_MS * HZ / 1000;
net/wireless/brcm80211/brcmfmac/dhd_sdio.c:				jiffies + BRCMF_WD_POLL_MS * HZ / 1000);
net/wireless/brcm80211/brcmfmac/dhd_sdio.c:	wait_event_interruptible_timeout(bus->ctrl_wait, !*lockvar, HZ * 2);
net/wireless/brcm80211/brcmfmac/usb.c:		devinfo->waitdone == true, (ms * HZ / 1000));
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	.band = IEEE80211_BAND_2GHZ,
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	.band			= IEEE80211_BAND_2GHZ,		\
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	.band = IEEE80211_BAND_5GHZ,
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	.band = IEEE80211_BAND_5GHZ,
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	.band			= IEEE80211_BAND_5GHZ,		\
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:		band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	if (ms < 1000 / HZ) {
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	legacy = ffs(mask->control[IEEE80211_BAND_2GHZ].legacy & 0xFFFF);
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:		legacy = ffs(mask->control[IEEE80211_BAND_5GHZ].legacy &
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	mod_timer(&iscan->timer, jiffies + iscan->timer_ms * HZ / 1000);
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	mod_timer(&iscan->timer, jiffies + iscan->timer_ms * HZ / 1000);
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	mod_timer(&iscan->timer, jiffies + iscan->timer_ms * HZ / 1000);
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	wdev->wiphy->bands[IEEE80211_BAND_2GHZ] = &__wl_band_2ghz;
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:	wdev->wiphy->bands[IEEE80211_BAND_5GHZ] = &__wl_band_5ghz_a;	/* Set
net/wireless/brcm80211/brcmfmac/wl_cfg80211.c:		wiphy->bands[IEEE80211_BAND_5GHZ] = &__wl_band_5ghz_n;
net/wireless/brcm80211/brcmsmac/aiutils.c:			       (ILP_DIV_1MHZ << SYCC_CD_SHIFT));
net/wireless/brcm80211/brcmsmac/aiutils.h:#define	ILP_DIV_1MHZ		4	/* ILP = 1 MHz */
net/wireless/brcm80211/brcmsmac/aiutils.h:#define	ILP_DIV_5MHZ		0	/* ILP = 5 MHz */
net/wireless/brcm80211/brcmsmac/ampdu.c:			if (plcp[0] & MIMO_PLCP_40MHZ)
net/wireless/brcm80211/brcmsmac/ampdu.c:				if (txh->FragPLCPFallback[0] & MIMO_PLCP_40MHZ)
net/wireless/brcm80211/brcmsmac/ampdu.c:			is40 = (plcp0 & MIMO_PLCP_40MHZ) ? 1 : 0;
net/wireless/brcm80211/brcmsmac/ampdu.c:			mcs = plcp0 & ~MIMO_PLCP_40MHZ;
net/wireless/brcm80211/brcmsmac/ampdu.c:				   ? PHY_TXC1_BW_20MHZ_UP : PHY_TXC1_BW_20MHZ;
net/wireless/brcm80211/brcmsmac/ampdu.c:					    (PHY_TXC1_BW_40MHZ <<
net/wireless/brcm80211/brcmsmac/ampdu.c:				rspec |= (PHY_TXC1_BW_40MHZ << RSPEC_BW_SHIFT);
net/wireless/brcm80211/brcmsmac/ampdu.c:			rspec |= plcp[0] & ~MIMO_PLCP_40MHZ;
net/wireless/brcm80211/brcmsmac/ampdu.c:				    txh->FragPLCPFallback[0] & ~MIMO_PLCP_40MHZ;
net/wireless/brcm80211/brcmsmac/ampdu.c:	u16 mimo_ctlchbw = PHY_TXC1_BW_20MHZ;
net/wireless/brcm80211/brcmsmac/channel.c:	/* 20MHZ b/w must have no ctl sb, 40 must have a ctl sb */
net/wireless/brcm80211/brcmsmac/channel.c:	 * Copy the 40 MHZ MCS 0-7 CDD value to the 40 MHZ MCS 0-7 SISO
net/wireless/brcm80211/brcmsmac/channel.c:#endif				/* 40 MHZ */
net/wireless/brcm80211/brcmsmac/channel.c:#endif				/* SUPPORT_40MHZ */
net/wireless/brcm80211/brcmsmac/channel.c:#ifdef SUPPORT_40MHZ
net/wireless/brcm80211/brcmsmac/channel.c:#ifdef SUPPORT_40MHZ
net/wireless/brcm80211/brcmsmac/channel.c: * Validate the chanspec for this locale, for 40MHZ we need to also
net/wireless/brcm80211/brcmsmac/channel.c:	 * We know we are now checking a 40MHZ channel, so we should
net/wireless/brcm80211/brcmsmac/channel.h:#define BRCMS_NO_40MHZ		0x08	/* Flag for No MIMO 40MHz */
net/wireless/brcm80211/brcmsmac/d11.h:#define ANTSEL_CLKDIV_4MHZ	6
net/wireless/brcm80211/brcmsmac/d11.h:#define MHF2_NPHY40MHZ_WAR	0x0800
net/wireless/brcm80211/brcmsmac/d11.h:#define MIMO_PLCP_40MHZ		0x80	/* 40 Hz frame */
net/wireless/brcm80211/brcmsmac/d11.h:#define PHY_TXC1_BW_10MHZ		0
net/wireless/brcm80211/brcmsmac/d11.h:#define PHY_TXC1_BW_10MHZ_UP		1
net/wireless/brcm80211/brcmsmac/d11.h:#define PHY_TXC1_BW_20MHZ		2
net/wireless/brcm80211/brcmsmac/d11.h:#define PHY_TXC1_BW_20MHZ_UP		3
net/wireless/brcm80211/brcmsmac/d11.h:#define PHY_TXC1_BW_40MHZ		4
net/wireless/brcm80211/brcmsmac/d11.h:#define PHY_TXC1_BW_40MHZ_DUP		5
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	.band = IEEE80211_BAND_2GHZ,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	.band = IEEE80211_BAND_2GHZ, \
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	.band = IEEE80211_BAND_5GHZ,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	.band = IEEE80211_BAND_5GHZ, \
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(10, 2457, IEEE80211_CHAN_NO_HT40PLUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(11, 2462, IEEE80211_CHAN_NO_HT40PLUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(12, 2467,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(1, 2412, IEEE80211_CHAN_NO_HT40MINUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(13, 2472,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(14, 2484,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(2, 2417, IEEE80211_CHAN_NO_HT40MINUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(3, 2422, IEEE80211_CHAN_NO_HT40MINUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(4, 2427, IEEE80211_CHAN_NO_HT40MINUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(5, 2432, 0),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(6, 2437, 0),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(7, 2442, 0),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(8, 2447, IEEE80211_CHAN_NO_HT40PLUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN2GHZ(9, 2452, IEEE80211_CHAN_NO_HT40PLUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(100,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(104,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(108,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(112,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(116,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(120,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(124,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(128,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(132,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(136,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(140,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(149, IEEE80211_CHAN_NO_HT40MINUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(153, IEEE80211_CHAN_NO_HT40PLUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(157, IEEE80211_CHAN_NO_HT40MINUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(161, IEEE80211_CHAN_NO_HT40PLUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(165, IEEE80211_CHAN_NO_HT40PLUS | IEEE80211_CHAN_NO_HT40MINUS)
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(36, IEEE80211_CHAN_NO_HT40MINUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(40, IEEE80211_CHAN_NO_HT40PLUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(44, IEEE80211_CHAN_NO_HT40MINUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(48, IEEE80211_CHAN_NO_HT40PLUS),
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(52,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(56,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(60,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	CHAN5GHZ(64,
net/wireless/brcm80211/brcmsmac/mac80211_if.c:#define CHAN2GHZ(channel, freqency, chflags)  { \
net/wireless/brcm80211/brcmsmac/mac80211_if.c:#define CHAN5GHZ(channel, chflags)  { \
net/wireless/brcm80211/brcmsmac/mac80211_if.c:		hw->wiphy->bands[IEEE80211_BAND_2GHZ] = band;
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	hw->wiphy->bands[IEEE80211_BAND_2GHZ] = NULL;
net/wireless/brcm80211/brcmsmac/mac80211_if.c:			hw->wiphy->bands[IEEE80211_BAND_5GHZ] = band;
net/wireless/brcm80211/brcmsmac/mac80211_if.c:	hw->wiphy->bands[IEEE80211_BAND_5GHZ] = NULL;
net/wireless/brcm80211/brcmsmac/main.c:				   ANTSEL_CLKDIV_4MHZ);
net/wireless/brcm80211/brcmsmac/main.c:			bw = PHY_TXC1_BW_20MHZ;
net/wireless/brcm80211/brcmsmac/main.c:		bw = PHY_TXC1_BW_20MHZ;
net/wireless/brcm80211/brcmsmac/main.c:			if (brcms_chspec_bw(wlc->chanspec) == BRCMS_40_MHZ) {
net/wireless/brcm80211/brcmsmac/main.c:		if (bw < PHY_TXC1_BW_20MHZ) {
net/wireless/brcm80211/brcmsmac/main.c:#ifdef SUPPORT_40MHZ
net/wireless/brcm80211/brcmsmac/main.c:		if (rx_status->band == IEEE80211_BAND_5GHZ)
net/wireless/brcm80211/brcmsmac/main.c:			 * Is the phy configured to use 40MHZ frames? If
net/wireless/brcm80211/brcmsmac/main.c:		mhfs[MHF2] |= MHF2_NPHY40MHZ_WAR;
net/wireless/brcm80211/brcmsmac/main.c:				mimo_txbw = PHY_TXC1_BW_20MHZ;
net/wireless/brcm80211/brcmsmac/main.c:						mimo_txbw = PHY_TXC1_BW_40MHZ;
net/wireless/brcm80211/brcmsmac/main.c:				   ? PHY_TXC1_BW_20MHZ_UP : PHY_TXC1_BW_20MHZ;
net/wireless/brcm80211/brcmsmac/main.c:						    PHY_TXC1_BW_40MHZ_DUP;
net/wireless/brcm80211/brcmsmac/main.c:		plcp[0] |= MIMO_PLCP_40MHZ;
net/wireless/brcm80211/brcmsmac/main.c:	return BRCMS_10_MHZ;
net/wireless/brcm80211/brcmsmac/main.c:		return BRCMS_20_MHZ;
net/wireless/brcm80211/brcmsmac/main.c:		return BRCMS_40_MHZ;
net/wireless/brcm80211/brcmsmac/main.c:			rspec[k] |= (PHY_TXC1_BW_20MHZ << RSPEC_BW_SHIFT);
net/wireless/brcm80211/brcmsmac/main.c:			rts_rspec |= (PHY_TXC1_BW_40MHZ_DUP << RSPEC_BW_SHIFT);
net/wireless/brcm80211/brcmsmac/main.c:		rx_status->band = IEEE80211_BAND_2GHZ;
net/wireless/brcm80211/brcmsmac/main.c:		rx_status->band = IEEE80211_BAND_5GHZ;
net/wireless/brcm80211/brcmsmac/main.c:			rx_status->flag |= RX_FLAG_40MHZ;
net/wireless/brcm80211/brcmsmac/main.c:	u16 mimo_ctlchbw = PHY_TXC1_BW_20MHZ;
net/wireless/brcm80211/brcmsmac/main.h: * cck_40txbw: 11N, cck tx b/w override when in 40MHZ mode.
net/wireless/brcm80211/brcmsmac/main.h: * mimo_40txbw: 11N, mimo tx b/w override when in 40MHZ mode.
net/wireless/brcm80211/brcmsmac/main.h: * ofdm_40txbw: 11N, ofdm tx b/w override when in 40MHZ mode.
net/wireless/brcm80211/brcmsmac/phy/phy_cmn.c:				    channel + CH_10MHZ_APART)
net/wireless/brcm80211/brcmsmac/phy/phy_lcn.c:	d15 = (pi->xtalfreq * fcal_div * 4 / 5) / PLL_2064_MHZ - 1;
net/wireless/brcm80211/brcmsmac/phy/phy_lcn.c:#define PLL_2064_MHZ		1000000
net/wireless/brcm80211/brcmsmac/phy/phy_lcn.c:	div_frac = ((fvco3 * (PLL_2064_MHZ >> 4)) % fref3) << 4;
net/wireless/brcm80211/brcmsmac/phy/phy_lcn.c:	div_int = ((fvco3 * (PLL_2064_MHZ >> 4)) / fref3) << 4;
net/wireless/brcm80211/brcmsmac/phy/phy_lcn.c:	qFcal = pi->xtalfreq * fcal_div / PLL_2064_MHZ;
net/wireless/brcm80211/brcmsmac/phy/phy_lcn.c:	qFref = wlc_lcnphy_qdiv_roundup(fpfd, PLL_2064_MHZ, 16);
net/wireless/brcm80211/brcmsmac/phy/phy_lcn.c:	qFxtal = wlc_lcnphy_qdiv_roundup(pi->xtalfreq, PLL_2064_MHZ, 16);
net/wireless/brcm80211/brcmsmac/phy/phy_n.c:#define NPHY_ACI_40MHZ_CHANNEL_DELTA 6
net/wireless/brcm80211/brcmsmac/phy/phy_n.c:#define NPHY_ACI_40MHZ_CHANNEL_DELTA_GE_REV3 6
net/wireless/brcm80211/brcmsmac/phy/phy_n.c:#define NPHY_ACI_40MHZ_CHANNEL_SKIP 5
net/wireless/brcm80211/brcmsmac/phy/phy_n.c:#define NPHY_ACI_40MHZ_CHANNEL_SKIP_GE_REV3 5
net/wireless/brcm80211/brcmsmac/phy_shim.h:#define FRA_ERR_20MHZ	60
net/wireless/brcm80211/brcmsmac/phy_shim.h:#define FRA_ERR_40MHZ	120
net/wireless/brcm80211/brcmsmac/phy_shim.h:#define FRA_T1_20MHZ	52770
net/wireless/brcm80211/brcmsmac/phy_shim.h:#define FRA_T1_40MHZ	105541
net/wireless/brcm80211/brcmsmac/phy_shim.h:#define FRA_T2_20MHZ	61538
net/wireless/brcm80211/brcmsmac/phy_shim.h:#define FRA_T2_40MHZ	123077
net/wireless/brcm80211/brcmsmac/phy_shim.h:#define FRA_T3_20MHZ	66002
net/wireless/brcm80211/brcmsmac/phy_shim.h:#define FRA_T3_40MHZ	132004
net/wireless/brcm80211/brcmsmac/pmu.c:		alp_hz = (ilp_ctr * EXT_ILP_HZ) / 4;
net/wireless/brcm80211/brcmsmac/pmu.c:#define EXT_ILP_HZ 32768
net/wireless/brcm80211/brcmsmac/pub.h:#define BRCMS_10_MHZ	10	/* 10Mhz nphy channel bandwidth */
net/wireless/brcm80211/brcmsmac/pub.h:#define BRCMS_20_MHZ	20	/* 20Mhz nphy channel bandwidth */
net/wireless/brcm80211/brcmsmac/pub.h:#define BRCMS_40_MHZ	40	/* 40Mhz nphy channel bandwidth */
net/wireless/brcm80211/brcmsmac/rate.c:	if (bw == BRCMS_40_MHZ)
net/wireless/brcm80211/brcmsmac/rate.c:			if (plcp[0] & MIMO_PLCP_40MHZ) {
net/wireless/brcm80211/brcmsmac/rate.c:			rs_dflt = (bw == BRCMS_20_MHZ ?
net/wireless/brcm80211/brcmsmac/rate.c:			rs_dflt = (bw == BRCMS_20_MHZ ?
net/wireless/brcm80211/brcmsmac/rate.c:				rspec |= (PHY_TXC1_BW_40MHZ << RSPEC_BW_SHIFT);
net/wireless/brcm80211/brcmsmac/rate.c:	u32 rspec = PHY_TXC1_BW_20MHZ << RSPEC_BW_SHIFT;
net/wireless/brcm80211/brcmsmac/rate.h:	return bw == PHY_TXC1_BW_40MHZ || bw == PHY_TXC1_BW_40MHZ_DUP;
net/wireless/brcm80211/include/brcmu_wifi.h:	       channel + CH_10MHZ_APART : 0;
net/wireless/brcm80211/include/brcmu_wifi.h:	       channel + CH_20MHZ_APART : 0;
net/wireless/brcm80211/include/brcmu_wifi.h:#define BRCM_2G_25MHZ_OFFSET		5	/* 2.4GHz band channel offset */
net/wireless/brcm80211/include/brcmu_wifi.h:#define CH_10MHZ_APART			2
net/wireless/brcm80211/include/brcmu_wifi.h:#define CH_20MHZ_APART			4
net/wireless/brcm80211/include/brcmu_wifi.h:#define CH_5MHZ_APART			1 /* 2G band channels are 5 Mhz apart */
net/wireless/brcm80211/include/brcmu_wifi.h:	return channel > CH_10MHZ_APART ? (channel - CH_10MHZ_APART) : 0;
net/wireless/brcm80211/include/brcmu_wifi.h:	return (channel < (MAXCHANNEL - CH_10MHZ_APART)) ?
net/wireless/brcm80211/include/brcmu_wifi.h:	return channel < (MAXCHANNEL - CH_20MHZ_APART) ?
net/wireless/hostap/hostap_80211_rx.c:						 IEEE80211_CHAN_2GHZ);
net/wireless/hostap/hostap_80211_rx.c:		if (!time_after(jiffies, bss->last_update + 60 * HZ))
net/wireless/hostap/hostap_80211_rx.c:		    time_after(jiffies, entry->first_frag_time + 2 * HZ)) {
net/wireless/hostap/hostap_ap.c:			       (10 * sta->listen_interval * HZ) / 1024)) {
net/wireless/hostap/hostap_ap.c:		GET_INT_PARM(ap_max_inactivity, local->card_idx) * HZ;
net/wireless/hostap/hostap_ap.c:		next_time = jiffies + HZ;
net/wireless/hostap/hostap_ap.c:	param->u.get_info_sta.inactive_sec = (jiffies - sta->last_rx) / HZ;
net/wireless/hostap/hostap_ap.c:	p += sprintf(p, "max_inactivity=%u\n", ap->max_inactivity / HZ);
net/wireless/hostap/hostap_ap.h:#define AP_DEAUTH_DELAY (HZ)
net/wireless/hostap/hostap_ap.h:#define AP_DISASSOC_DELAY (HZ)
net/wireless/hostap/hostap_hw.c:#define HFA384X_ALLOC_COMPL_TIMEOUT (HZ / 20) /* 50 ms */
net/wireless/hostap/hostap_hw.c:#define HFA384X_INIT_TIMEOUT (HZ / 2) /* 500 ms */
net/wireless/hostap/hostap_hw.c:	if ((!last_inquire || time_after(jiffies, last_inquire + 10 * HZ)) &&
net/wireless/hostap/hostap_hw.c:	if (!last_inquire || time_after(jiffies, last_inquire + HZ)) {
net/wireless/hostap/hostap_hw.c:		if (time_after(jiffies, last_magic_err + 10 * HZ)) {
net/wireless/hostap/hostap_hw.c:	if (time_after(jiffies, local->last_tick_timer + 5 * HZ) &&
net/wireless/hostap/hostap_hw.c:	if (time_before_eq(jiffies, last_reset + HZ))
net/wireless/hostap/hostap_hw.c:	       (jiffies - start) * 1000 / HZ);
net/wireless/hostap/hostap_hw.c:			local->passive_scan_interval * HZ;
net/wireless/hostap/hostap_hw.c:			local->passive_scan_timer.expires = jiffies + HZ / 10;
net/wireless/hostap/hostap_hw.c:		local->passive_scan_timer.expires = jiffies + HZ / 10;
net/wireless/hostap/hostap_hw.c:	local->tick_timer.expires = jiffies + 2 * HZ;
net/wireless/hostap/hostap_hw.c:	local->tick_timer.expires = jiffies + 2 * HZ;
net/wireless/hostap/hostap_hw.c:		res = schedule_timeout(2 * HZ);
net/wireless/hostap/hostap_hw.c:	     time_after(jiffies, local->last_comms_qual_update + 10 * HZ)) &&
net/wireless/hostap/hostap_info.c:	    time_before(jiffies, local->last_join_time + 10 * HZ)) {
net/wireless/hostap/hostap_ioctl.c:			local->ap->max_inactivity = value * HZ;
net/wireless/hostap/hostap_ioctl.c:				local->passive_scan_interval * HZ;
net/wireless/hostap/hostap_ioctl.c:			*param = local->ap->max_inactivity / HZ;
net/wireless/hostap/hostap_ioctl.c:			schedule_timeout(HZ);
net/wireless/hostap/hostap_ioctl.c:	    time_before(jiffies, local->scan_timestamp + 3 * HZ)) {
net/wireless/hostap/hostap_main.c:#define TX_TIMEOUT (2 * HZ)
net/wireless/ipw2x00/ipw2100.c:			       1000 * (HOST_COMPLETE_TIMEOUT / HZ));
net/wireless/ipw2x00/ipw2100.c:		bg_band->band = IEEE80211_BAND_2GHZ;
net/wireless/ipw2x00/ipw2100.c:			bg_band->channels[i].band = IEEE80211_BAND_2GHZ;
net/wireless/ipw2x00/ipw2100.c:#define HOST_COMPLETE_TIMEOUT (2 * HZ)
net/wireless/ipw2x00/ipw2100.c:#define HW_PHY_OFF_LOOP_DELAY (HZ / 5000)
net/wireless/ipw2x00/ipw2100.c:#define MAC_ASSOCIATION_READ_DELAY (HZ)
net/wireless/ipw2x00/ipw2100.c:	dev->watchdog_timeo = 3 * HZ;
net/wireless/ipw2x00/ipw2100.c:	mod_delayed_work(system_wq, &priv->rf_kill, round_jiffies_relative(HZ));
net/wireless/ipw2x00/ipw2100.c:	priv->ieee->freq_band = LIBIPW_24GHZ_BAND;
net/wireless/ipw2x00/ipw2100.c:					      priv->reset_backoff * HZ);
net/wireless/ipw2x00/ipw2100.c:					 round_jiffies_relative(HZ));
net/wireless/ipw2x00/ipw2100.c:					      round_jiffies_relative(HZ));
net/wireless/ipw2x00/ipw2100.c:					      round_jiffies_relative(HZ));
net/wireless/ipw2x00/ipw2100.c:		schedule_delayed_work(&priv->hang_check, HZ / 2);
net/wireless/ipw2x00/ipw2100.c:		schedule_delayed_work(&priv->hang_check, HZ / 2);
net/wireless/ipw2x00/ipw2100.c:	schedule_delayed_work(&priv->wx_event_work, HZ / 10);
net/wireless/ipw2x00/ipw2100.c:		stats.freq = LIBIPW_24GHZ_BAND;
net/wireless/ipw2x00/ipw2100.c:		wdev->wiphy->bands[IEEE80211_BAND_2GHZ] = bg_band;
net/wireless/ipw2x00/ipw2200.c:		a_band->band = IEEE80211_BAND_5GHZ;
net/wireless/ipw2x00/ipw2200.c:			a_band->channels[i].band = IEEE80211_BAND_5GHZ;
net/wireless/ipw2x00/ipw2200.c:		band = LIBIPW_24GHZ_BAND;
net/wireless/ipw2x00/ipw2200.c:		band |= LIBIPW_24GHZ_BAND;
net/wireless/ipw2x00/ipw2200.c:		band |= LIBIPW_24GHZ_BAND;
net/wireless/ipw2x00/ipw2200.c:			band |= LIBIPW_52GHZ_BAND;
net/wireless/ipw2x00/ipw2200.c:		band = LIBIPW_52GHZ_BAND | LIBIPW_24GHZ_BAND;
net/wireless/ipw2x00/ipw2200.c:		bg_band->band = IEEE80211_BAND_2GHZ;
net/wireless/ipw2x00/ipw2200.c:			bg_band->channels[i].band = IEEE80211_BAND_2GHZ;
net/wireless/ipw2x00/ipw2200.c:		case LIBIPW_24GHZ_BAND:
net/wireless/ipw2x00/ipw2200.c:		case LIBIPW_24GHZ_BAND:
net/wireless/ipw2x00/ipw2200.c:	case LIBIPW_24GHZ_BAND:
net/wireless/ipw2x00/ipw2200.c:		case LIBIPW_52GHZ_BAND:
net/wireless/ipw2x00/ipw2200.c:		case LIBIPW_52GHZ_BAND:
net/wireless/ipw2x00/ipw2200.c:	case LIBIPW_52GHZ_BAND:
net/wireless/ipw2x00/ipw2200.c:	case LIBIPW_52GHZ_BAND:
net/wireless/ipw2x00/ipw2200.c:	case LIBIPW_52GHZ_BAND:	/* A only */
net/wireless/ipw2x00/ipw2200.c:		    cpu_to_le16((IEEE80211_CHAN_CCK | IEEE80211_CHAN_2GHZ));
net/wireless/ipw2x00/ipw2200.c:		    cpu_to_le16((IEEE80211_CHAN_CCK | IEEE80211_CHAN_2GHZ));
net/wireless/ipw2x00/ipw2200.c:		    cpu_to_le16(IEEE80211_CHAN_OFDM | IEEE80211_CHAN_2GHZ);
net/wireless/ipw2x00/ipw2200.c:		    cpu_to_le16(IEEE80211_CHAN_OFDM | IEEE80211_CHAN_2GHZ);
net/wireless/ipw2x00/ipw2200.c:		    cpu_to_le16((IEEE80211_CHAN_OFDM | IEEE80211_CHAN_5GHZ));
net/wireless/ipw2x00/ipw2200.c:		    cpu_to_le16((IEEE80211_CHAN_OFDM | IEEE80211_CHAN_5GHZ));
net/wireless/ipw2x00/ipw2200.c:#define HOST_COMPLETE_TIMEOUT HZ
net/wireless/ipw2x00/ipw2200.c:#define IPW_PACKET_RETRY_TIME HZ
net/wireless/ipw2x00/ipw2200.c:#define IPW_SCAN_CHECK_WATCHDOG	(5 * HZ)
net/wireless/ipw2x00/ipw2200.c:#define IPW_STATS_INTERVAL (2 * HZ)
net/wireless/ipw2x00/ipw2200.c:		flags = (band == LIBIPW_24GHZ_BAND) ?
net/wireless/ipw2x00/ipw2200.c:		    (HZ * le16_to_cpu(priv->assoc_request.beacon_interval)) /
net/wireless/ipw2x00/ipw2200.c:				 IEEE80211_CHAN_2GHZ);
net/wireless/ipw2x00/ipw2200.c:					     IEEE80211_CHAN_2GHZ);
net/wireless/ipw2x00/ipw2200.c:					     IEEE80211_CHAN_5GHZ);
net/wireless/ipw2x00/ipw2200.c:	if (priv->ieee->freq_band & LIBIPW_24GHZ_BAND) {
net/wireless/ipw2x00/ipw2200.c:	if (priv->ieee->freq_band & LIBIPW_52GHZ_BAND) {
net/wireless/ipw2x00/ipw2200.c:					    LIBIPW_24GHZ_BAND :
net/wireless/ipw2x00/ipw2200.c:					    LIBIPW_52GHZ_BAND,
net/wireless/ipw2x00/ipw2200.c:					      round_jiffies_relative(2 * HZ));
net/wireless/ipw2x00/ipw2200.c:						      round_jiffies_relative(HZ));
net/wireless/ipw2x00/ipw2200.c:		schedule_delayed_work(&priv->request_scan, HZ);
net/wireless/ipw2x00/ipw2200.c:			schedule_delayed_work(&priv->rf_kill, 2 * HZ);
net/wireless/ipw2x00/ipw2200.c:		schedule_delayed_work(&priv->rf_kill, 2 * HZ);
net/wireless/ipw2x00/ipw2200.c:		schedule_delayed_work(&priv->rf_kill, 2 * HZ);
net/wireless/ipw2x00/ipw2200.c:		schedule_delayed_work(&priv->scan_check, HZ);
net/wireless/ipw2x00/ipw2200.c:	    time_after(network->last_associate + (HZ * 3UL), jiffies)) {
net/wireless/ipw2x00/ipw2200.c:			u8 channels[LIBIPW_24GHZ_CHANNELS] = {
net/wireless/ipw2x00/ipw2200.c:		wdev->wiphy->bands[IEEE80211_BAND_2GHZ] = bg_band;
net/wireless/ipw2x00/ipw2200.c:		wdev->wiphy->bands[IEEE80211_BAND_5GHZ] = a_band;
net/wireless/ipw2x00/ipw2200.h:#define SCAN_ASSOCIATED_INTERVAL (HZ)
net/wireless/ipw2x00/ipw2200.h:#define SCAN_INTERVAL (HZ / 10)
net/wireless/ipw2x00/libipw_geo.c:	if (channel <= LIBIPW_24GHZ_CHANNELS)
net/wireless/ipw2x00/libipw_geo.c:	if (channel <= LIBIPW_24GHZ_CHANNELS)
net/wireless/ipw2x00/libipw_geo.c:	if (ieee->freq_band & LIBIPW_24GHZ_BAND)
net/wireless/ipw2x00/libipw_geo.c:	if (ieee->freq_band & LIBIPW_24GHZ_BAND)
net/wireless/ipw2x00/libipw_geo.c:	if (ieee->freq_band & LIBIPW_24GHZ_BAND)
net/wireless/ipw2x00/libipw_geo.c:	if (ieee->freq_band & LIBIPW_52GHZ_BAND)
net/wireless/ipw2x00/libipw_geo.c:	if (ieee->freq_band & LIBIPW_52GHZ_BAND)
net/wireless/ipw2x00/libipw_geo.c:	if (ieee->freq_band & LIBIPW_52GHZ_BAND)
net/wireless/ipw2x00/libipw_geo.c:				return LIBIPW_24GHZ_BAND;
net/wireless/ipw2x00/libipw_geo.c:				return LIBIPW_52GHZ_BAND;
net/wireless/ipw2x00/libipw.h:#define DEFAULT_MAX_SCAN_AGE (15 * HZ)
net/wireless/ipw2x00/libipw.h:#define LIBIPW_24GHZ_BAND     (1<<0)
net/wireless/ipw2x00/libipw.h:#define LIBIPW_24GHZ_CHANNELS (LIBIPW_24GHZ_MAX_CHANNEL - \
net/wireless/ipw2x00/libipw.h:#define LIBIPW_24GHZ_MAX_CHANNEL 14
net/wireless/ipw2x00/libipw.h:#define LIBIPW_24GHZ_MIN_CHANNEL 1
net/wireless/ipw2x00/libipw.h:#define LIBIPW_52GHZ_BAND     (1<<1)
net/wireless/ipw2x00/libipw.h:#define LIBIPW_52GHZ_CHANNELS (LIBIPW_52GHZ_MAX_CHANNEL - \
net/wireless/ipw2x00/libipw.h:#define LIBIPW_52GHZ_MAX_CHANNEL 165
net/wireless/ipw2x00/libipw.h:#define LIBIPW_52GHZ_MIN_CHANNEL 34
net/wireless/ipw2x00/libipw.h:	    (ieee->freq_band & LIBIPW_24GHZ_BAND))
net/wireless/ipw2x00/libipw.h:	    (ieee->freq_band & LIBIPW_24GHZ_BAND))
net/wireless/ipw2x00/libipw.h:	    (ieee->freq_band & LIBIPW_52GHZ_BAND))
net/wireless/ipw2x00/libipw.h:				  LIBIPW_24GHZ_MIN_CHANNEL + 1)
net/wireless/ipw2x00/libipw.h:				  LIBIPW_52GHZ_MIN_CHANNEL + 1)
net/wireless/ipw2x00/libipw.h:	struct libipw_channel a[LIBIPW_52GHZ_CHANNELS];
net/wireless/ipw2x00/libipw.h:	struct libipw_channel bg[LIBIPW_24GHZ_CHANNELS];
net/wireless/ipw2x00/libipw_rx.c:	if (stats->freq == LIBIPW_52GHZ_BAND)
net/wireless/ipw2x00/libipw_rx.c:	if (stats->freq == LIBIPW_52GHZ_BAND)
net/wireless/ipw2x00/libipw_rx.c:	if (stats->freq == LIBIPW_52GHZ_BAND) {
net/wireless/ipw2x00/libipw_rx.c:	if (stats->freq == LIBIPW_52GHZ_BAND) {
net/wireless/ipw2x00/libipw_rx.c:		    time_after(jiffies, entry->first_frag_time + 2 * HZ)) {
net/wireless/iwlegacy/3945.c:	case IEEE80211_BAND_2GHZ:
net/wireless/iwlegacy/3945.c:	case IEEE80211_BAND_2GHZ:
net/wireless/iwlegacy/3945.c:	case IEEE80211_BAND_5GHZ:
net/wireless/iwlegacy/3945.c:	case IEEE80211_BAND_5GHZ:
net/wireless/iwlegacy/3945.c:#define IL_DELAY_NEXT_SCAN_AFTER_ASSOC (HZ*6)
net/wireless/iwlegacy/3945.c:	    IEEE80211_BAND_5GHZ;
net/wireless/iwlegacy/3945.c:				 IEEE80211_BAND_5GHZ) ? RATE_6M_PLCP :
net/wireless/iwlegacy/3945.c:	if (info->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/3945.c:	if (rx_status.band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/3945.c:	     phy_flags & RX_RES_PHY_FLAGS_BAND_24_MSK) ? IEEE80211_BAND_2GHZ :
net/wireless/iwlegacy/3945.c:			   REG_RECALIB_PERIOD * HZ);
net/wireless/iwlegacy/3945.c:	txpower.band = (il->band == IEEE80211_BAND_5GHZ) ? 0 : 1;
net/wireless/iwlegacy/3945-mac.c:		band = IEEE80211_BAND_2GHZ;
net/wireless/iwlegacy/3945-mac.c:		band = IEEE80211_BAND_5GHZ;
net/wireless/iwlegacy/3945-mac.c:	case IEEE80211_BAND_2GHZ:
net/wireless/iwlegacy/3945-mac.c:	case IEEE80211_BAND_5GHZ:
net/wireless/iwlegacy/3945-mac.c:#define UCODE_READY_TIMEOUT	(2 * HZ)
net/wireless/iwlegacy/3945-mac.c:		if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/3945-mac.c:	if (il->bands[IEEE80211_BAND_2GHZ].n_channels)
net/wireless/iwlegacy/3945-mac.c:	if (il->bands[IEEE80211_BAND_5GHZ].n_channels)
net/wireless/iwlegacy/3945-mac.c:	il->band = IEEE80211_BAND_2GHZ;
net/wireless/iwlegacy/3945-mac.c:		    &il->bands[IEEE80211_BAND_2GHZ];
net/wireless/iwlegacy/3945-mac.c:		    &il->bands[IEEE80211_BAND_5GHZ];
net/wireless/iwlegacy/3945-mac.c:		il->hw->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/iwlegacy/3945-mac.c:		il->hw->wiphy->bands[IEEE80211_BAND_5GHZ] =
net/wireless/iwlegacy/3945-mac.c:	il_set_rxon_channel(il, &il->bands[IEEE80211_BAND_2GHZ].channels[5]);
net/wireless/iwlegacy/3945-mac.c:	queue_delayed_work(il->workqueue, &il->_3945.rfkill_poll, 2 * HZ);
net/wireless/iwlegacy/3945-mac.c:			   round_jiffies_relative(2 * HZ));
net/wireless/iwlegacy/3945-mac.c:			   round_jiffies_relative(2 * HZ));
net/wireless/iwlegacy/3945-rs.c:	case IEEE80211_BAND_2GHZ:
net/wireless/iwlegacy/3945-rs.c:	case IEEE80211_BAND_2GHZ:
net/wireless/iwlegacy/3945-rs.c:	case IEEE80211_BAND_5GHZ:
net/wireless/iwlegacy/3945-rs.c:	case IEEE80211_BAND_5GHZ:
net/wireless/iwlegacy/3945-rs.c:#define RATE_FLUSH		(3*HZ)
net/wireless/iwlegacy/3945-rs.c:#define RATE_WIN_FLUSH		(HZ/2)
net/wireless/iwlegacy/3945-rs.c:	if (sband->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/3945-rs.c:	if (sband->band == IEEE80211_BAND_5GHZ) {
net/wireless/iwlegacy/3945-rs.c:	if (sband->band == IEEE80211_BAND_5GHZ) {
net/wireless/iwlegacy/3945-rs.c:	if (sband->band == IEEE80211_BAND_5GHZ && max_rate_idx != -1)
net/wireless/iwlegacy/3945-rs.c:	if (unlikely(band == IEEE80211_BAND_5GHZ)) {
net/wireless/iwlegacy/4965.c:	band = (il->band == IEEE80211_BAND_2GHZ);
net/wireless/iwlegacy/4965.c:	band = il->band == IEEE80211_BAND_2GHZ;
net/wireless/iwlegacy/4965.c:			return MIN_TX_GAIN_IDX_52GHZ_EXT;
net/wireless/iwlegacy/4965.c:	.scan_rx_antennas[IEEE80211_BAND_5GHZ] = ANT_BC,
net/wireless/iwlegacy/4965.h:#define MIN_TX_GAIN_IDX_52GHZ_EXT	(-9)	/* highest gain, lowest idx, 5 */
net/wireless/iwlegacy/4965-mac.c:	case IEEE80211_BAND_2GHZ:
net/wireless/iwlegacy/4965-mac.c:	case IEEE80211_BAND_5GHZ:
net/wireless/iwlegacy/4965-mac.c:#define UCODE_READY_TIMEOUT	(4 * HZ)
net/wireless/iwlegacy/4965-mac.c:	/* For 5 GHZ band, remap mac80211 rate indices into driver indices */
net/wireless/iwlegacy/4965-mac.c:	    IEEE80211_BAND_5GHZ;
net/wireless/iwlegacy/4965-mac.c:		if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-mac.c:		if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-mac.c:	if (il->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-mac.c:	if (il->bands[IEEE80211_BAND_2GHZ].n_channels)
net/wireless/iwlegacy/4965-mac.c:	if (il->bands[IEEE80211_BAND_5GHZ].n_channels)
net/wireless/iwlegacy/4965-mac.c:	if (info->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-mac.c:	il->band = IEEE80211_BAND_2GHZ;
net/wireless/iwlegacy/4965-mac.c:		    &il->bands[IEEE80211_BAND_2GHZ];
net/wireless/iwlegacy/4965-mac.c:		    &il->bands[IEEE80211_BAND_5GHZ];
net/wireless/iwlegacy/4965-mac.c:	il->hw_params.ht40_channel = BIT(IEEE80211_BAND_5GHZ);
net/wireless/iwlegacy/4965-mac.c:		il->hw->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/iwlegacy/4965-mac.c:		il->hw->wiphy->bands[IEEE80211_BAND_5GHZ] =
net/wireless/iwlegacy/4965-mac.c:	     phy_flags & RX_RES_PHY_FLAGS_BAND_24_MSK) ? IEEE80211_BAND_2GHZ :
net/wireless/iwlegacy/4965-mac.c:		r->flags |= IEEE80211_TX_RC_40_MHZ_WIDTH;
net/wireless/iwlegacy/4965-mac.c:		rx_status.flag |= RX_FLAG_40MHZ;
net/wireless/iwlegacy/4965-rs.c:#define RATE_SCALE_FLUSH_INTVL   (3*HZ)
net/wireless/iwlegacy/4965-rs.c:		else if (sband->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-rs.c:			    IEEE80211_TX_RC_40_MHZ_WIDTH;
net/wireless/iwlegacy/4965-rs.c:			if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-rs.c:		if (il->band == IEEE80211_BAND_2GHZ)
net/wireless/iwlegacy/4965-rs.c:	if (il->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-rs.c:		if (lq_sta->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-rs.c:		if (lq_sta->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-rs.c:		if (lq_sta->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-rs.c:		if (sband->band == IEEE80211_BAND_5GHZ &&
net/wireless/iwlegacy/4965-rs.c:	if (sband->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/4965-rs.c:		    (sband->band == IEEE80211_BAND_5GHZ &&
net/wireless/iwlegacy/4965-rs.c:	    tbl_type.is_ht40 != !!(mac_flags & IEEE80211_TX_RC_40_MHZ_WIDTH) ||
net/wireless/iwlegacy/common.c:			     1) ? IEEE80211_BAND_2GHZ : IEEE80211_BAND_5GHZ;
net/wireless/iwlegacy/common.c:		    (band == 6) ? IEEE80211_BAND_2GHZ : IEEE80211_BAND_5GHZ;
net/wireless/iwlegacy/common.c:	case IEEE80211_BAND_2GHZ:
net/wireless/iwlegacy/common.c:	case IEEE80211_BAND_5GHZ:
net/wireless/iwlegacy/common.c:#define HOST_COMPLETE_TIMEOUT (HZ / 2)
net/wireless/iwlegacy/common.c:#define IL_ACTIVE_DWELL_FACTOR_24GHZ (3)
net/wireless/iwlegacy/common.c:#define IL_ACTIVE_DWELL_FACTOR_52GHZ (2)
net/wireless/iwlegacy/common.c:#define MAX_BIT_RATE_20_MHZ 72	/* Mbps */
net/wireless/iwlegacy/common.c:#define MAX_BIT_RATE_40_MHZ 150	/* Mbps */
net/wireless/iwlegacy/common.c:#define STA_WAIT_TIMEOUT (HZ/2)
net/wireless/iwlegacy/common.c:	     IEEE80211_BAND_2GHZ) ? IL_PASSIVE_DWELL_BASE +
net/wireless/iwlegacy/common.c:	if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/common.c:	if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/common.c:	if (band == IEEE80211_BAND_5GHZ) {
net/wireless/iwlegacy/common.c:	if (band == IEEE80211_BAND_5GHZ) {
net/wireless/iwlegacy/common.c:		if (bss_conf->use_cts_prot && il->band != IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/common.c:	if (il->bands[IEEE80211_BAND_2GHZ].n_bitrates ||
net/wireless/iwlegacy/common.c:	if (il->bands[IEEE80211_BAND_5GHZ].n_channels == 0 &&
net/wireless/iwlegacy/common.c:		if (il->ht.protection == IEEE80211_HT_OP_MODE_PROTECTION_20MHZ) {
net/wireless/iwlegacy/common.c:	if (!il->scan_tx_ant[IEEE80211_BAND_2GHZ])
net/wireless/iwlegacy/common.c:	if (!il->scan_tx_ant[IEEE80211_BAND_5GHZ])
net/wireless/iwlegacy/common.c:		    IL_ACTIVE_DWELL_FACTOR_24GHZ * (n_probes + 1);
net/wireless/iwlegacy/common.c:		    IL_ACTIVE_DWELL_FACTOR_52GHZ * (n_probes + 1);
net/wireless/iwlegacy/common.c:		il->bands[IEEE80211_BAND_2GHZ].n_channels,
net/wireless/iwlegacy/common.c:	    il->bands[IEEE80211_BAND_5GHZ].n_bitrates) {
net/wireless/iwlegacy/common.c:		il->bands[IEEE80211_BAND_5GHZ].n_channels);
net/wireless/iwlegacy/common.c:		il_init_ht_hw_capab(il, &sband->ht_cap, IEEE80211_BAND_2GHZ);
net/wireless/iwlegacy/common.c:		il_init_ht_hw_capab(il, &sband->ht_cap, IEEE80211_BAND_5GHZ);
net/wireless/iwlegacy/common.c:	       (il->scan_band == IEEE80211_BAND_2GHZ) ? "2.4" : "5.2",
net/wireless/iwlegacy/common.c:		il->scan_tx_ant[IEEE80211_BAND_2GHZ] = ant_idx;
net/wireless/iwlegacy/common.c:		il->scan_tx_ant[IEEE80211_BAND_5GHZ] = ant_idx;
net/wireless/iwlegacy/common.c:	max_bit_rate = MAX_BIT_RATE_20_MHZ;
net/wireless/iwlegacy/common.c:		max_bit_rate = MAX_BIT_RATE_40_MHZ;
net/wireless/iwlegacy/common.c:	rate = (il->band == IEEE80211_BAND_5GHZ) ? RATE_6M_PLCP : RATE_1M_PLCP;
net/wireless/iwlegacy/common.c:	sband = &il->bands[IEEE80211_BAND_2GHZ];
net/wireless/iwlegacy/common.c:	sband = &il->bands[IEEE80211_BAND_5GHZ];
net/wireless/iwlegacy/common.h: * BIT(IEEE80211_BAND_5GHZ) BIT(IEEE80211_BAND_5GHZ)
net/wireless/iwlegacy/common.h:#define IL_DELAY_NEXT_FORCE_FW_RELOAD (HZ*5)
net/wireless/iwlegacy/common.h:#define IL_OPERATION_MODE_20MHZ    3
net/wireless/iwlegacy/common.h:#define IL_SCAN_CHECK_WATCHDOG		(HZ * 7)
net/wireless/iwlegacy/common.h:	return ch_info->band == IEEE80211_BAND_5GHZ;
net/wireless/iwlegacy/debug.c:	supp_band = il_get_hw_mode(il, IEEE80211_BAND_2GHZ);
net/wireless/iwlegacy/debug.c:	supp_band = il_get_hw_mode(il, IEEE80211_BAND_5GHZ);
net/wireless/iwlwifi/iwl-1000.c:	hw_params(priv).ht40_channel =  BIT(IEEE80211_BAND_2GHZ);
net/wireless/iwlwifi/iwl-2000.c:	hw_params(priv).ht40_channel =  BIT(IEEE80211_BAND_2GHZ);
net/wireless/iwlwifi/iwl-5000.c:					BIT(IEEE80211_BAND_5GHZ);
net/wireless/iwlwifi/iwl-5000.c:					BIT(IEEE80211_BAND_5GHZ);
net/wireless/iwlwifi/iwl-5000.c:	cmd.band = priv->band == IEEE80211_BAND_2GHZ;
net/wireless/iwlwifi/iwl-5000.c:	hw_params(priv).ht40_channel =  BIT(IEEE80211_BAND_2GHZ) |
net/wireless/iwlwifi/iwl-5000.c:	hw_params(priv).ht40_channel =  BIT(IEEE80211_BAND_2GHZ) |
net/wireless/iwlwifi/iwl-6000.c:					BIT(IEEE80211_BAND_5GHZ);
net/wireless/iwlwifi/iwl-6000.c:	cmd->band = priv->band == IEEE80211_BAND_2GHZ;
net/wireless/iwlwifi/iwl-6000.c:	hw_params(priv).ht40_channel =  BIT(IEEE80211_BAND_2GHZ) |
net/wireless/iwlwifi/iwl-agn.c:	if (info->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn.c:	priv->band = IEEE80211_BAND_2GHZ;
net/wireless/iwlwifi/iwl-agn-lib.c:		if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn-lib.c:	if (priv->band == IEEE80211_BAND_2GHZ &&
net/wireless/iwlwifi/iwl-agn-rs.c:#define IWL_RATE_SCALE_FLUSH_INTVL   (3*HZ)
net/wireless/iwlwifi/iwl-agn-rs.c:		else if (sband->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn-rs.c:			if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn-rs.c:		if (lq_sta->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn-rs.c:		if (lq_sta->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn-rs.c:		if (lq_sta->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn-rs.c:		if (priv->band == IEEE80211_BAND_2GHZ)
net/wireless/iwlwifi/iwl-agn-rs.c:	if (priv->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn-rs.c:		if ((sband->band == IEEE80211_BAND_5GHZ) &&
net/wireless/iwlwifi/iwl-agn-rs.c:	if (sband->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn-rs.c:			info->control.rates[0].flags |= IEEE80211_TX_RC_40_MHZ_WIDTH;
net/wireless/iwlwifi/iwl-agn-rs.c:				((sband->band == IEEE80211_BAND_5GHZ) &&
net/wireless/iwlwifi/iwl-agn-rs.c:	    (tbl_type.is_ht40 != !!(mac_flags & IEEE80211_TX_RC_40_MHZ_WIDTH)) ||
net/wireless/iwlwifi/iwl-agn-rx.c:				IEEE80211_BAND_2GHZ : IEEE80211_BAND_5GHZ;
net/wireless/iwlwifi/iwl-agn-rx.c:		rx_status.flag |= RX_FLAG_40MHZ;
net/wireless/iwlwifi/iwl-agn-rxon.c:					    &disable_wait, HZ);
net/wireless/iwlwifi/iwl-agn-rxon.c:	if (bss_conf->use_cts_prot && (priv->band != IEEE80211_BAND_5GHZ))
net/wireless/iwlwifi/iwl-agn-sta.c:#define STA_WAIT_TIMEOUT (HZ/2)
net/wireless/iwlwifi/iwl-agn-sta.c:	if (priv->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn-tt.c:			  jiffies + CT_KILL_EXIT_DURATION * HZ);
net/wireless/iwlwifi/iwl-agn-tt.c:			  jiffies + CT_KILL_EXIT_DURATION * HZ);
net/wireless/iwlwifi/iwl-agn-tx.c:	else if (info->band == IEEE80211_BAND_2GHZ &&
net/wireless/iwlwifi/iwl-agn-tx.c:	/* For 5 GHZ band, remap mac80211 rate indices into driver indices */
net/wireless/iwlwifi/iwl-agn-tx.c:	if (info->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-agn-tx.c:		r->flags |= IEEE80211_TX_RC_40_MHZ_WIDTH;
net/wireless/iwlwifi/iwl-core.c:#define MAX_BIT_RATE_20_MHZ 72 /* Mbps */
net/wireless/iwlwifi/iwl-core.c:#define MAX_BIT_RATE_40_MHZ 150 /* Mbps */
net/wireless/iwlwifi/iwl-core.c:	     hw_params(priv).sku & EEPROM_SKU_CAP_BAND_52GHZ) {
net/wireless/iwlwifi/iwl-core.c:		hw_params(priv).sku &= ~EEPROM_SKU_CAP_BAND_52GHZ;
net/wireless/iwlwifi/iwl-core.c:					 IEEE80211_BAND_2GHZ);
net/wireless/iwlwifi/iwl-core.c:					 IEEE80211_BAND_5GHZ);
net/wireless/iwlwifi/iwl-core.c:	if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-core.c:	if (band == IEEE80211_BAND_5GHZ) {
net/wireless/iwlwifi/iwl-core.c:	if (band == IEEE80211_BAND_5GHZ) {
net/wireless/iwlwifi/iwl-core.c:		if (ctx->ht.protection == IEEE80211_HT_OP_MODE_PROTECTION_20MHZ) {
net/wireless/iwlwifi/iwl-core.c:	if (priv->bands[IEEE80211_BAND_2GHZ].n_bitrates ||
net/wireless/iwlwifi/iwl-core.c:	if ((priv->bands[IEEE80211_BAND_5GHZ].n_channels == 0) &&
net/wireless/iwlwifi/iwl-core.c:	max_bit_rate = MAX_BIT_RATE_20_MHZ;
net/wireless/iwlwifi/iwl-core.c:		max_bit_rate = MAX_BIT_RATE_40_MHZ;
net/wireless/iwlwifi/iwl-core.c:		   priv->bands[IEEE80211_BAND_2GHZ].n_channels,
net/wireless/iwlwifi/iwl-core.c:	    priv->bands[IEEE80211_BAND_5GHZ].n_bitrates) {
net/wireless/iwlwifi/iwl-core.c:		   priv->bands[IEEE80211_BAND_5GHZ].n_channels);
net/wireless/iwlwifi/iwl-core.c:	sband = &priv->bands[IEEE80211_BAND_2GHZ];
net/wireless/iwlwifi/iwl-core.c:	sband = &priv->bands[IEEE80211_BAND_5GHZ];
net/wireless/iwlwifi/iwl-core.h:#define IWL_SCAN_CHECK_WATCHDOG		(HZ * 7)
net/wireless/iwlwifi/iwl-debugfs.c:	supp_band = iwl_get_hw_mode(priv, IEEE80211_BAND_2GHZ);
net/wireless/iwlwifi/iwl-debugfs.c:	supp_band = iwl_get_hw_mode(priv, IEEE80211_BAND_5GHZ);
net/wireless/iwlwifi/iwl-dev.h:#define IWL_DELAY_NEXT_FORCE_FW_RELOAD (HZ*5)
net/wireless/iwlwifi/iwl-dev.h:#define IWL_DELAY_NEXT_FORCE_RF_RESET  (HZ*3)
net/wireless/iwlwifi/iwl-dev.h:#define IWL_OPERATION_MODE_20MHZ    3
net/wireless/iwlwifi/iwl-dev.h:	return ch_info->band == IEEE80211_BAND_2GHZ;
net/wireless/iwlwifi/iwl-dev.h:	return ch_info->band == IEEE80211_BAND_5GHZ;
net/wireless/iwlwifi/iwl-eeprom.c:			(band == 6) ? IEEE80211_BAND_2GHZ : IEEE80211_BAND_5GHZ;
net/wireless/iwlwifi/iwl-eeprom.c:	bool is_ht40 = txp->flags & IWL_EEPROM_ENH_TXP_FL_40MHZ;
net/wireless/iwlwifi/iwl-eeprom.c:	case IEEE80211_BAND_2GHZ:
net/wireless/iwlwifi/iwl-eeprom.c:	case IEEE80211_BAND_5GHZ:
net/wireless/iwlwifi/iwl-eeprom.c:			ch_info->band = (band == 1) ? IEEE80211_BAND_2GHZ :
net/wireless/iwlwifi/iwl-eeprom.c:			    IEEE80211_BAND_5GHZ;
net/wireless/iwlwifi/iwl-eeprom.c:		IEEE80211_BAND_5GHZ : IEEE80211_BAND_2GHZ;
net/wireless/iwlwifi/iwl-eeprom.c:				 TXP_CHECK_AND_PRINT(40MHZ),
net/wireless/iwlwifi/iwl-eeprom.h:#define EEPROM_SKU_CAP_BAND_24GHZ			(1 << 4)
net/wireless/iwlwifi/iwl-eeprom.h:#define EEPROM_SKU_CAP_BAND_52GHZ			(1 << 5)
net/wireless/iwlwifi/iwl-eeprom.h:	IWL_EEPROM_ENH_TXP_FL_40MHZ		= BIT(3),
net/wireless/iwlwifi/iwl-mac80211.c:	if (priv->bands[IEEE80211_BAND_2GHZ].n_channels)
net/wireless/iwlwifi/iwl-mac80211.c:	if (priv->bands[IEEE80211_BAND_5GHZ].n_channels)
net/wireless/iwlwifi/iwl-mac80211.c:			&priv->bands[IEEE80211_BAND_2GHZ];
net/wireless/iwlwifi/iwl-mac80211.c:			&priv->bands[IEEE80211_BAND_5GHZ];
net/wireless/iwlwifi/iwl-mac80211.c:		priv->hw->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/iwlwifi/iwl-mac80211.c:		priv->hw->wiphy->bands[IEEE80211_BAND_5GHZ] =
net/wireless/iwlwifi/iwl-scan.c:	case IEEE80211_BAND_2GHZ:
net/wireless/iwlwifi/iwl-scan.c:	case IEEE80211_BAND_5GHZ:
net/wireless/iwlwifi/iwl-scan.c:#define IWL_ACTIVE_DWELL_FACTOR_24GHZ (3)
net/wireless/iwlwifi/iwl-scan.c:#define IWL_ACTIVE_DWELL_FACTOR_52GHZ (2)
net/wireless/iwlwifi/iwl-scan.c:	if (band == IEEE80211_BAND_2GHZ &&
net/wireless/iwlwifi/iwl-scan.c:		if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-scan.c:		if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-scan.c:	if (band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-scan.c:			if (priv->hw_roc_channel->band == IEEE80211_BAND_5GHZ)
net/wireless/iwlwifi/iwl-scan.c:	if (!priv->scan_tx_ant[IEEE80211_BAND_2GHZ])
net/wireless/iwlwifi/iwl-scan.c:	if (!priv->scan_tx_ant[IEEE80211_BAND_5GHZ])
net/wireless/iwlwifi/iwl-scan.c:			IWL_ACTIVE_DWELL_FACTOR_24GHZ * (n_probes + 1);
net/wireless/iwlwifi/iwl-scan.c:			IWL_ACTIVE_DWELL_FACTOR_52GHZ * (n_probes + 1);
net/wireless/iwlwifi/iwl-scan.c:		       (priv->scan_band == IEEE80211_BAND_2GHZ) ? "2.4" : "5.2",
net/wireless/iwlwifi/iwl-scan.c:		priv->scan_tx_ant[IEEE80211_BAND_2GHZ] = ant_idx;
net/wireless/iwlwifi/iwl-scan.c:		priv->scan_tx_ant[IEEE80211_BAND_5GHZ] = ant_idx;
net/wireless/iwlwifi/iwl-scan.c:		schedule_delayed_work(&priv->hw_roc_disable_work, 10 * HZ);
net/wireless/iwlwifi/iwl-scan.c:		schedule_delayed_work(&priv->hw_roc_disable_work, 10 * HZ);
net/wireless/iwlwifi/iwl-scan.c:	u16 passive = (band == IEEE80211_BAND_2GHZ) ?
net/wireless/iwlwifi/iwl-testmode.c:	ret = iwl_wait_notification(&priv->notif_wait, &calib_wait, 2 * HZ);
net/wireless/iwlwifi/iwl-trans-pcie.c:				 trans_pcie->ucode_write_complete, 5 * HZ);
net/wireless/iwlwifi/iwl-trans-pcie-tx.c:#define HOST_COMPLETE_TIMEOUT (2 * HZ)
net/wireless/iwlwifi/iwl-ucode.c:#define UCODE_ALIVE_TIMEOUT	HZ
net/wireless/iwlwifi/iwl-ucode.c:#define UCODE_CALIB_TIMEOUT	(2*HZ)
net/wireless/iwmc3200wifi/cfg80211.c:	.band			= IEEE80211_BAND_2GHZ,		\
net/wireless/iwmc3200wifi/cfg80211.c:	.band			= IEEE80211_BAND_5GHZ,		\
net/wireless/iwmc3200wifi/cfg80211.c:			band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/iwmc3200wifi/cfg80211.c:			band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/iwmc3200wifi/cfg80211.c:		else if (umac_bss->band == UMAC_BAND_5GHZ)
net/wireless/iwmc3200wifi/cfg80211.c:		if (umac_bss->band == UMAC_BAND_2GHZ)
net/wireless/iwmc3200wifi/cfg80211.c:	wdev->wiphy->bands[IEEE80211_BAND_2GHZ] = &iwm_band_2ghz;
net/wireless/iwmc3200wifi/cfg80211.c:	wdev->wiphy->bands[IEEE80211_BAND_5GHZ] = &iwm_band_5ghz;
net/wireless/iwmc3200wifi/commands.c:					       2 * HZ);
net/wireless/iwmc3200wifi/commands.c:				   3 * HZ);
net/wireless/iwmc3200wifi/commands.c:	ch_list->ch[0].band = UMAC_BAND_2GHZ;
net/wireless/iwmc3200wifi/commands.c:	ch_list->ch[0].type = UMAC_CHANNEL_WIDTH_20MHZ;
net/wireless/iwmc3200wifi/commands.c:	ch_list->ch[1].band = UMAC_BAND_5GHZ;
net/wireless/iwmc3200wifi/commands.c:	ch_list->ch[1].type = UMAC_CHANNEL_WIDTH_20MHZ;
net/wireless/iwmc3200wifi/commands.c:	ch_list->ch[2].band = UMAC_BAND_2GHZ;
net/wireless/iwmc3200wifi/commands.c:	ch_list->ch[2].type = UMAC_CHANNEL_WIDTH_20MHZ;
net/wireless/iwmc3200wifi/commands.c:	ch_list->ch[3].band = UMAC_BAND_5GHZ;
net/wireless/iwmc3200wifi/commands.c:	ch_list->ch[3].type = UMAC_CHANNEL_WIDTH_20MHZ;
net/wireless/iwmc3200wifi/commands.c:				(iwm->umac_profile_active == 0), 5 * HZ);
net/wireless/iwmc3200wifi/eeprom.c:	band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/iwmc3200wifi/eeprom.c:	band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/iwmc3200wifi/eeprom.c:	if (sku_cap & IWM_EEPROM_SKU_CAP_BAND_24GHZ)
net/wireless/iwmc3200wifi/eeprom.c:	if (sku_cap & IWM_EEPROM_SKU_CAP_BAND_52GHZ)
net/wireless/iwmc3200wifi/eeprom.c:				       IWM_SRC_UMAC, 2*HZ);
net/wireless/iwmc3200wifi/eeprom.h:#define IWM_EEPROM_SKU_CAP_BAND_24GHZ           (1 << 4)
net/wireless/iwmc3200wifi/eeprom.h:#define IWM_EEPROM_SKU_CAP_BAND_52GHZ           (1 << 5)
net/wireless/iwmc3200wifi/iwm.h:#define IWM_WATCHDOG_PERIOD	(6 * HZ)
net/wireless/iwmc3200wifi/main.c:	.ibss_band		= UMAC_BAND_2GHZ,
net/wireless/iwmc3200wifi/main.c:				      IWM_SRC_UDMA, 2 * HZ);
net/wireless/iwmc3200wifi/main.c:				   IWM_SRC_UDMA, 2 * HZ);
net/wireless/iwmc3200wifi/main.c:		schedule_timeout_uninterruptible(10 * HZ);
net/wireless/iwmc3200wifi/rx.c:		band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/iwmc3200wifi/rx.c:	band = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/iwmc3200wifi/rx.c:		band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/iwmc3200wifi/rx.c:	band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/iwmc3200wifi/rx.c:				complete->band == UMAC_BAND_2GHZ ?
net/wireless/iwmc3200wifi/rx.c:#define CT_KILL_DELAY (30 * HZ)
net/wireless/iwmc3200wifi/rx.c:#define IWM_DISCONNECT_INTERVAL	(5 * HZ)
net/wireless/iwmc3200wifi/rx.c:#define IWM_STATS_UPDATE_INTERVAL		(2 * HZ)
net/wireless/iwmc3200wifi/rx.c:	else if (umac_bss->band == UMAC_BAND_5GHZ)
net/wireless/iwmc3200wifi/rx.c:					IEEE80211_BAND_2GHZ :
net/wireless/iwmc3200wifi/rx.c:					IEEE80211_BAND_5GHZ));
net/wireless/iwmc3200wifi/rx.c:	if (umac_bss->band == UMAC_BAND_2GHZ)
net/wireless/iwmc3200wifi/umac.h:#define SCAN_COMPLETE_TIMEOUT  (3 * HZ)
net/wireless/iwmc3200wifi/umac.h:#define UMAC_BAND_2GHZ 0
net/wireless/iwmc3200wifi/umac.h:#define UMAC_BAND_5GHZ 1
net/wireless/iwmc3200wifi/umac.h:#define UMAC_CHANNEL_WIDTH_20MHZ 0
net/wireless/iwmc3200wifi/umac.h:#define UMAC_CHANNEL_WIDTH_40MHZ 1
net/wireless/iwmc3200wifi/umac.h:#define WAIT_NOTIF_TIMEOUT     (2 * HZ)
net/wireless/libertas/cfg.c:						 (15 * HZ));
net/wireless/libertas/cfg.c:						 (15 * HZ));
net/wireless/libertas/cfg.c:	.band             = IEEE80211_BAND_2GHZ, \
net/wireless/libertas/cfg.c:							IEEE80211_BAND_2GHZ);
net/wireless/libertas/cfg.c:	wdev->wiphy->bands[IEEE80211_BAND_2GHZ] = &lbs_band_2ghz;
net/wireless/libertas/cmd.c:						(10 * HZ))) {
net/wireless/libertas/cmd.c:	int timeo = 3 * HZ;
net/wireless/libertas/cmd.c:					!priv->is_deep_sleep, (10 * HZ))) {
net/wireless/libertas/cmd.c:		timeo = 5 * HZ;
net/wireless/libertas/cmd.c:		timeo = HZ/4;
net/wireless/libertas/if_sdio.c:	timeout = jiffies + HZ;
net/wireless/libertas/if_sdio.c:	timeout = jiffies + HZ;
net/wireless/libertas/if_sdio.c:	timeout = jiffies + HZ;
net/wireless/libertas/if_spi.c:	unsigned long timeout = jiffies + 5*HZ;
net/wireless/libertas/if_usb.c:	mod_timer(&cardp->fw_timeout, jiffies + (HZ*5));
net/wireless/libertas/main.c:	dev->watchdog_timeo = 5 * HZ;
net/wireless/libertas/main.c:					  jiffies + (HZ * 5));
net/wireless/libertas/main.c:			jiffies + (priv->auto_deep_sleep_timeout * HZ)/1000);
net/wireless/libertas/main.c:				(priv->auto_deep_sleep_timeout * HZ)/1000);
net/wireless/libertas_tf/cmd.c:	int timeo = 5 * HZ;
net/wireless/libertas_tf/cmd.c:		timeo = HZ;
net/wireless/libertas_tf/if_usb.c:	mod_timer(&cardp->fw_timeout, jiffies + (HZ/5));
net/wireless/libertas_tf/main.c:	hw->wiphy->bands[IEEE80211_BAND_2GHZ] = &priv->band;
net/wireless/libertas_tf/main.c:	stats.band = IEEE80211_BAND_2GHZ;
net/wireless/libertas/types.h:#define TLV_TYPE_POWER_TBL_2_4GHZ   (PROPRIETARY_TLV_BASE_ID + 12)
net/wireless/libertas/types.h:#define TLV_TYPE_POWER_TBL_5GHZ     (PROPRIETARY_TLV_BASE_ID + 13)
net/wireless/mac80211_hwsim.c:	.band = IEEE80211_BAND_2GHZ, \
net/wireless/mac80211_hwsim.c:	.band = IEEE80211_BAND_5GHZ, \
net/wireless/mac80211_hwsim.c:			case IEEE80211_BAND_2GHZ:
net/wireless/mac80211_hwsim.c:			case IEEE80211_BAND_5GHZ:
net/wireless/mac80211_hwsim.c:		data->beacon_int = 1024 * info->beacon_int / 1000 * HZ / 1000;
net/wireless/mac80211_hwsim.c:	flags = IEEE80211_CHAN_2GHZ;
net/wireless/mac80211_hwsim.c:	flags = IEEE80211_CHAN_2GHZ;
net/wireless/mac80211_hwsim.c:		for (band = IEEE80211_BAND_2GHZ; band < IEEE80211_NUM_BANDS; band++) {
net/wireless/mac80211_hwsim.c:	ieee80211_queue_delayed_work(hw, &hsd->w, 2 * HZ);
net/wireless/mac80211_hwsim.c:	if (info->control.rates[0].flags & IEEE80211_TX_RC_40_MHZ_WIDTH)
net/wireless/mac80211_hwsim.c:		rx_status.flag |= RX_FLAG_40MHZ;
net/wireless/mwifiex/11n_rxreorder.c:		  jiffies + (MIN_FLUSH_TIMER_MS * win_size * HZ) / 1000);
net/wireless/mwifiex/cfg80211.c:	ht_info = &wdev->wiphy->bands[IEEE80211_BAND_2GHZ]->ht_cap;
net/wireless/mwifiex/cfg80211.c:		ht_info = &wdev->wiphy->bands[IEEE80211_BAND_5GHZ]->ht_cap;
net/wireless/mwifiex/cfg80211.c:		if (chan->band == IEEE80211_BAND_2GHZ) {
net/wireless/mwifiex/cfg80211.c:		if (mask->control[IEEE80211_BAND_2GHZ].legacy % index)
net/wireless/mwifiex/cfg80211.c:	if (mask->control[IEEE80211_BAND_2GHZ].legacy < index) {
net/wireless/mwifiex/cfg80211.c:			sinfo->txrate.flags |= RATE_INFO_FLAGS_40_MHZ_WIDTH;
net/wireless/mwifiex/cfg80211.c:	wdev->wiphy->bands[IEEE80211_BAND_2GHZ] = &mwifiex_band_2ghz;
net/wireless/mwifiex/cfg80211.c:		wdev->wiphy->bands[IEEE80211_BAND_5GHZ] = &mwifiex_band_5ghz;
net/wireless/mwifiex/cfg80211.c:		wdev->wiphy->bands[IEEE80211_BAND_5GHZ] = NULL;
net/wireless/mwifiex/cfp.c:		sband = priv->wdev->wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/mwifiex/cfp.c:		sband = priv->wdev->wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/mwifiex/cmdevt.c:		  jiffies + (MWIFIEX_TIMER_10S * HZ) / 1000);
net/wireless/mwifiex/main.h:#define MWIFIEX_DEFAULT_WATCHDOG_TIMEOUT	(5 * HZ)
net/wireless/mwl8k.c:			ap_legacy_rates = ap->supp_rates[IEEE80211_BAND_2GHZ];
net/wireless/mwl8k.c:				ap->supp_rates[IEEE80211_BAND_5GHZ] << 5;
net/wireless/mwl8k.c:		case IEEE80211_HT_OP_MODE_PROTECTION_20MHZ:
net/wireless/mwl8k.c:#define MWL8K_8366_AP_RATE_INFO_40MHZ		0x40
net/wireless/mwl8k.c:#define MWL8K_CAP_2GHZ4			0x00000001
net/wireless/mwl8k.c:#define MWL8K_CAP_40MHZ			0x00000100
net/wireless/mwl8k.c:#define MWL8K_CAP_5GHZ			0x00000004
net/wireless/mwl8k.c:#define MWL8K_CAP_SHORTGI_20MHZ		0x00200000
net/wireless/mwl8k.c:#define MWL8K_CAP_SHORTGI_40MHZ		0x00400000
net/wireless/mwl8k.c:#define MWL8K_FRAME_PROT_11N_HT_40MHZ_ONLY		0x02
net/wireless/mwl8k.c:#define MWL8K_STA_RATE_INFO_40MHZ		0x0004
net/wireless/mwl8k.c:	else if (channel->band == IEEE80211_BAND_5GHZ)
net/wireless/mwl8k.c:	else if (channel->band == IEEE80211_BAND_5GHZ)
net/wireless/mwl8k.c:	hw->wiphy->bands[IEEE80211_BAND_2GHZ] = &priv->band_24;
net/wireless/mwl8k.c:	hw->wiphy->bands[IEEE80211_BAND_5GHZ] = &priv->band_50;
net/wireless/mwl8k.c:	if (cap & MWL8K_CAP_40MHZ)
net/wireless/mwl8k.c:	if (cap & MWL8K_CAP_SHORTGI_20MHZ)
net/wireless/mwl8k.c:	if (cap & MWL8K_CAP_SHORTGI_40MHZ)
net/wireless/mwl8k.c:	if ((caps & MWL8K_CAP_2GHZ4) || !(caps & MWL8K_CAP_BAND_MASK)) {
net/wireless/mwl8k.c:	if (caps & MWL8K_CAP_5GHZ) {
net/wireless/mwl8k.c:	if (channel->band == IEEE80211_BAND_2GHZ)
net/wireless/mwl8k.c:	if (channel->band == IEEE80211_BAND_2GHZ)
net/wireless/mwl8k.c:		if (hw->conf.channel->band == IEEE80211_BAND_2GHZ)
net/wireless/mwl8k.c:		if (hw->conf.channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/mwl8k.c:	if (hw->conf.channel->band == IEEE80211_BAND_2GHZ)
net/wireless/mwl8k.c:	if (hw->conf.channel->band == IEEE80211_BAND_2GHZ)
net/wireless/mwl8k.c:	if (jiffies - tx_stats->start_time > HZ) {
net/wireless/mwl8k.c:	if (rate_info & MWL8K_STA_RATE_INFO_40MHZ)
net/wireless/mwl8k.c:		if (rxd->rate & MWL8K_8366_AP_RATE_INFO_40MHZ)
net/wireless/mwl8k.c:	priv->band_24.band = IEEE80211_BAND_2GHZ;
net/wireless/mwl8k.c:	priv->band_50.band = IEEE80211_BAND_5GHZ;
net/wireless/mwl8k.c:			prot_mode = MWL8K_FRAME_PROT_11N_HT_40MHZ_ONLY;
net/wireless/mwl8k.c:		rates = sta->supp_rates[IEEE80211_BAND_2GHZ];
net/wireless/mwl8k.c:		rates = sta->supp_rates[IEEE80211_BAND_2GHZ];
net/wireless/mwl8k.c:		rates = sta->supp_rates[IEEE80211_BAND_5GHZ] << 5;
net/wireless/mwl8k.c:		rates = sta->supp_rates[IEEE80211_BAND_5GHZ] << 5;
net/wireless/mwl8k.c:		status->band = IEEE80211_BAND_2GHZ;
net/wireless/mwl8k.c:		status->band = IEEE80211_BAND_2GHZ;
net/wireless/mwl8k.c:		status->band = IEEE80211_BAND_5GHZ;
net/wireless/mwl8k.c:		status->band = IEEE80211_BAND_5GHZ;
net/wireless/mwl8k.c:			status->flag |= RX_FLAG_40MHZ;
net/wireless/mwl8k.c:		status->flag |= RX_FLAG_40MHZ;
net/wireless/orinoco/cfg.c:	if (chan->band != IEEE80211_BAND_2GHZ)
net/wireless/orinoco/cfg.c:	wiphy->bands[IEEE80211_BAND_2GHZ] = &priv->band;
net/wireless/orinoco/hermes_rid.h:#define HERMES_RID_CNFSCANCHANNELS2GHZ		0xFCC2
net/wireless/orinoco/hw.c:						HERMES_RID_CNFSCANCHANNELS2GHZ,
net/wireless/orinoco/main.c:#define MAX_IRQLOOPS_PER_JIFFY	(20000 / HZ)	/* Based on a guestimate of
net/wireless/orinoco/main.c:	dev->watchdog_timeo = HZ; /* 1 second timeout */
net/wireless/orinoco/orinoco_pci.c:	timeout = jiffies + (HERMES_PCI_COR_BUSYT * HZ / 1000);
net/wireless/orinoco/orinoco_plx.c:	timeout = jiffies + (PLX_RESET_TIME * HZ / 1000);
net/wireless/orinoco/orinoco_tmd.c:	timeout = jiffies + (TMD_RESET_TIME * HZ / 1000);
net/wireless/orinoco/orinoco_usb.c:#define DEF_TIMEOUT			(3 * HZ)
net/wireless/orinoco/orinoco_usb.c:			int msecs = DEF_TIMEOUT * (1000 / HZ);
net/wireless/p54/eeprom.c:			  (band == IEEE80211_BAND_2GHZ) ? 2 : 5);
net/wireless/p54/eeprom.c:			case IEEE80211_BAND_2GHZ:
net/wireless/p54/eeprom.c:	case IEEE80211_BAND_2GHZ:
net/wireless/p54/eeprom.c:			case IEEE80211_BAND_5GHZ:
net/wireless/p54/eeprom.c:	case IEEE80211_BAND_5GHZ:
net/wireless/p54/eeprom.c:		dev->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/p54/eeprom.c:		dev->wiphy->bands[IEEE80211_BAND_5GHZ] =
net/wireless/p54/eeprom.c:	if (!(synth & PDR_SYNTH_24_GHZ_DISABLED))
net/wireless/p54/eeprom.c:	if (!(synth & PDR_SYNTH_5_GHZ_DISABLED))
net/wireless/p54/eeprom.c:			priv->band_table[IEEE80211_BAND_2GHZ];
net/wireless/p54/eeprom.c:			priv->band_table[IEEE80211_BAND_5GHZ];
net/wireless/p54/eeprom.c:		return IEEE80211_BAND_2GHZ;
net/wireless/p54/eeprom.c:		return IEEE80211_BAND_5GHZ;
net/wireless/p54/eeprom.h:#define PDR_COUNTRY_CERT_BAND_2GHZ	0x00
net/wireless/p54/eeprom.h:#define PDR_COUNTRY_CERT_BAND_5GHZ	0x40
net/wireless/p54/eeprom.h:#define PDR_SYNTH_24_GHZ_DISABLED	0x0040
net/wireless/p54/eeprom.h:#define PDR_SYNTH_24_GHZ_MASK		0x0040
net/wireless/p54/eeprom.h:#define PDR_SYNTH_5_GHZ_DISABLED	0x0080
net/wireless/p54/eeprom.h:#define PDR_SYNTH_5_GHZ_MASK		0x0080
net/wireless/p54/fwio.c:	     &priv->eeprom_comp, HZ)) {
net/wireless/p54/led.c:		ieee80211_queue_delayed_work(priv->hw, &priv->led_work, HZ/10);
net/wireless/p54/main.c:		if (dev->conf.channel->band == IEEE80211_BAND_5GHZ)
net/wireless/p54/main.c:	ret = wait_for_completion_interruptible_timeout(&priv->stat_comp, HZ);
net/wireless/p54/main.c:		wait_for_completion_interruptible_timeout(&priv->beacon_comp, HZ);
net/wireless/p54/p54pci.c:	if (!wait_for_completion_interruptible_timeout(&priv->boot_comp, HZ)) {
net/wireless/p54/txrx.c:		if (info->band == IEEE80211_BAND_5GHZ)
net/wireless/p54/txrx.c:	if (priv->hw->conf.channel->band == IEEE80211_BAND_5GHZ)
net/wireless/prism54/isl_ioctl.c:	case INL_PHYCAP_2400MHZ:
net/wireless/prism54/isl_ioctl.c:	case INL_PHYCAP_5000MHZ:
net/wireless/prism54/isl_ioctl.c:		if (!time_after(jiffies, bss->last_update + 60 * HZ))
net/wireless/prism54/isl_ioctl.c:	 * (max 1 HZ) */
net/wireless/prism54/isl_ioctl.c:	    time_after(jiffies, priv->stats_timestamp + 1 * HZ)) {
net/wireless/prism54/isl_oid.h:	INL_PHYCAP_2400MHZ = 1,
net/wireless/prism54/isl_oid.h:	INL_PHYCAP_5000MHZ = 2,
net/wireless/prism54/islpci_dev.c:		remaining = schedule_timeout_uninterruptible(HZ);
net/wireless/prism54/islpci_dev.h:#define ISLPCI_TX_TIMEOUT               (2*HZ)
net/wireless/ray_cs.c:		local->timer.expires = jiffies + HZ * 2;
net/wireless/ray_cs.c:	local->timer.expires = jiffies + HZ / 2;
net/wireless/ray_cs.c:	local->timer.expires = jiffies + HZ * 2;
net/wireless/ray_cs.c:				local->timer.expires = jiffies + HZ * 5;
net/wireless/rndis_wlan.c:#define DEVICE_POLLER_JIFFIES (HZ)
net/wireless/rndis_wlan.c:#define SCAN_DELAY_JIFFIES (6 * HZ)
net/wireless/rndis_wlan.c:			delay = HZ;
net/wireless/rndis_wlan.c:	if (update_jiffies >= HZ)
net/wireless/rndis_wlan.c:			KHZ_TO_MHZ(le32_to_cpu(bssid->config.ds_config)));
net/wireless/rndis_wlan.c:				KHZ_TO_MHZ(le32_to_cpu(config.ds_config)));
net/wireless/rndis_wlan.c:	wiphy->bands[IEEE80211_BAND_2GHZ] = &priv->band;
net/wireless/rt2x00/rt2400pci.c:	spec->supported_bands = SUPPORT_BAND_2GHZ;
net/wireless/rt2x00/rt2500pci.c:	spec->supported_bands = SUPPORT_BAND_2GHZ;
net/wireless/rt2x00/rt2500pci.c:		spec->supported_bands |= SUPPORT_BAND_5GHZ;
net/wireless/rt2x00/rt2500usb.c:	spec->supported_bands = SUPPORT_BAND_2GHZ;
net/wireless/rt2x00/rt2500usb.c:		spec->supported_bands |= SUPPORT_BAND_5GHZ;
net/wireless/rt2x00/rt2800.h:#define EEPROM_EIRP_MAX_TX_POWER_2GHZ	FIELD16(0x00ff)
net/wireless/rt2x00/rt2800.h:#define EEPROM_EIRP_MAX_TX_POWER_5GHZ	FIELD16(0xff00)
net/wireless/rt2x00/rt2800.h: * EEPROM TXpower delta: 20MHZ AND 40 MHZ use different power.
net/wireless/rt2x00/rt2800.h: * This is delta in 40MHZ.
net/wireless/rt2x00/rt2800lib.c:	case IEEE80211_HT_OP_MODE_PROTECTION_20MHZ:
net/wireless/rt2x00/rt2800lib.c:						 EEPROM_EIRP_MAX_TX_POWER_2GHZ);
net/wireless/rt2x00/rt2800lib.c:						 EEPROM_EIRP_MAX_TX_POWER_5GHZ);
net/wireless/rt2x00/rt2800lib.c:	    (enabled && led->rt2x00dev->curr_band == IEEE80211_BAND_2GHZ);
net/wireless/rt2x00/rt2800lib.c:		if (band == IEEE80211_BAND_2GHZ)
net/wireless/rt2x00/rt2800lib.c:	if (band == IEEE80211_BAND_2GHZ) {
net/wireless/rt2x00/rt2800lib.c:	if (!((band == IEEE80211_BAND_5GHZ) && is_rate_b))
net/wireless/rt2x00/rt2800lib.c:	if (rt2x00dev->curr_band == IEEE80211_BAND_2GHZ) {
net/wireless/rt2x00/rt2800lib.c:	if (rt2x00dev->curr_band == IEEE80211_BAND_2GHZ) {
net/wireless/rt2x00/rt2800lib.c:	if (rt2x00dev->curr_band == IEEE80211_BAND_2GHZ) {
net/wireless/rt2x00/rt2800lib.c:	if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ) {
net/wireless/rt2x00/rt2800lib.c:	if (rt2x00_get_field16(eeprom, EEPROM_EIRP_MAX_TX_POWER_2GHZ) <
net/wireless/rt2x00/rt2800lib.c:				rt2x00dev->curr_band == IEEE80211_BAND_5GHZ);
net/wireless/rt2x00/rt2800lib.c:		rxdesc->flags |= RX_FLAG_40MHZ;
net/wireless/rt2x00/rt2800lib.c:	spec->supported_bands = SUPPORT_BAND_2GHZ;
net/wireless/rt2x00/rt2800lib.c:		spec->supported_bands |= SUPPORT_BAND_5GHZ;
net/wireless/rt2x00/rt2800lib.c:		spec->supported_bands |= SUPPORT_BAND_5GHZ;
net/wireless/rt2x00/rt2x00dev.c:	entry->band = channel <= 14 ? IEEE80211_BAND_2GHZ : IEEE80211_BAND_5GHZ;
net/wireless/rt2x00/rt2x00dev.c:		hw->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/rt2x00/rt2x00dev.c:		hw->wiphy->bands[IEEE80211_BAND_5GHZ] =
net/wireless/rt2x00/rt2x00dev.c:	if (likely(rt2x00dev->hw->wiphy->bands[IEEE80211_BAND_2GHZ])) {
net/wireless/rt2x00/rt2x00dev.c:	if (spec->supported_bands & SUPPORT_BAND_2GHZ) {
net/wireless/rt2x00/rt2x00dev.c:	if (spec->supported_bands & SUPPORT_BAND_5GHZ) {
net/wireless/rt2x00/rt2x00dev.c:		kfree(rt2x00dev->hw->wiphy->bands[IEEE80211_BAND_2GHZ]->bitrates);
net/wireless/rt2x00/rt2x00dev.c:		kfree(rt2x00dev->hw->wiphy->bands[IEEE80211_BAND_2GHZ]->channels);
net/wireless/rt2x00/rt2x00dev.c:		memcpy(&rt2x00dev->bands[IEEE80211_BAND_2GHZ].ht_cap,
net/wireless/rt2x00/rt2x00dev.c:		memcpy(&rt2x00dev->bands[IEEE80211_BAND_5GHZ].ht_cap,
net/wireless/rt2x00/rt2x00dev.c:		    &rt2x00dev->bands[IEEE80211_BAND_2GHZ];
net/wireless/rt2x00/rt2x00dev.c:		rt2x00dev->bands[IEEE80211_BAND_2GHZ].bitrates = rates;
net/wireless/rt2x00/rt2x00dev.c:		rt2x00dev->bands[IEEE80211_BAND_2GHZ].channels = channels;
net/wireless/rt2x00/rt2x00dev.c:		rt2x00dev->bands[IEEE80211_BAND_2GHZ].n_bitrates = num_rates;
net/wireless/rt2x00/rt2x00dev.c:		rt2x00dev->bands[IEEE80211_BAND_2GHZ].n_channels = 14;
net/wireless/rt2x00/rt2x00dev.c:		    &rt2x00dev->bands[IEEE80211_BAND_5GHZ];
net/wireless/rt2x00/rt2x00dev.c:		rt2x00dev->bands[IEEE80211_BAND_5GHZ].bitrates = &rates[4];
net/wireless/rt2x00/rt2x00dev.c:		rt2x00dev->bands[IEEE80211_BAND_5GHZ].channels = &channels[14];
net/wireless/rt2x00/rt2x00dev.c:		rt2x00dev->bands[IEEE80211_BAND_5GHZ].n_bitrates =
net/wireless/rt2x00/rt2x00dev.c:		rt2x00dev->bands[IEEE80211_BAND_5GHZ].n_channels =
net/wireless/rt2x00/rt2x00dev.c:		rt2x00dev->hw->wiphy->bands[IEEE80211_BAND_2GHZ] = NULL;
net/wireless/rt2x00/rt2x00dev.c:		rt2x00dev->hw->wiphy->bands[IEEE80211_BAND_5GHZ] = NULL;
net/wireless/rt2x00/rt2x00.h:#define SUPPORT_BAND_2GHZ	0x00000001
net/wireless/rt2x00/rt2x00.h:#define SUPPORT_BAND_5GHZ	0x00000002
net/wireless/rt2x00/rt2x00lib.h:#define AGC_INTERVAL		round_jiffies_relative(4 * HZ)
net/wireless/rt2x00/rt2x00lib.h:#define LINK_TUNE_INTERVAL	round_jiffies_relative(HZ)
net/wireless/rt2x00/rt2x00lib.h:#define VCO_INTERVAL		round_jiffies_relative(10 * HZ) /* 10 sec */
net/wireless/rt2x00/rt2x00lib.h:#define WATCHDOG_INTERVAL	round_jiffies_relative(HZ)
net/wireless/rt2x00/rt2x00queue.c:	if (txrate->flags & IEEE80211_TX_RC_40_MHZ_WIDTH ||
net/wireless/rt2x00/rt61pci.c:	    (enabled && led->rt2x00dev->curr_band == IEEE80211_BAND_2GHZ);
net/wireless/rt2x00/rt61pci.c:	    (enabled && led->rt2x00dev->curr_band == IEEE80211_BAND_5GHZ);
net/wireless/rt2x00/rt61pci.c:	if (libconf->conf->channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/rt2x00/rt61pci.c:		if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ)
net/wireless/rt2x00/rt61pci.c:		if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ)
net/wireless/rt2x00/rt61pci.c:	if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ) {
net/wireless/rt2x00/rt61pci.c:	if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ) {
net/wireless/rt2x00/rt61pci.c:	if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ) {
net/wireless/rt2x00/rt61pci.c:			   rt2x00dev->curr_band == IEEE80211_BAND_2GHZ);
net/wireless/rt2x00/rt61pci.c:			   rt2x00dev->curr_band == IEEE80211_BAND_5GHZ);
net/wireless/rt2x00/rt61pci.c:				  (rt2x00dev->curr_band != IEEE80211_BAND_5GHZ));
net/wireless/rt2x00/rt61pci.c:	spec->supported_bands = SUPPORT_BAND_2GHZ;
net/wireless/rt2x00/rt61pci.c:		spec->supported_bands |= SUPPORT_BAND_5GHZ;
net/wireless/rt2x00/rt73usb.c:	    (enabled && led->rt2x00dev->curr_band == IEEE80211_BAND_2GHZ);
net/wireless/rt2x00/rt73usb.c:	    (enabled && led->rt2x00dev->curr_band == IEEE80211_BAND_5GHZ);
net/wireless/rt2x00/rt73usb.c:	if (libconf->conf->channel->band == IEEE80211_BAND_2GHZ) {
net/wireless/rt2x00/rt73usb.c:		if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ)
net/wireless/rt2x00/rt73usb.c:		if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ)
net/wireless/rt2x00/rt73usb.c:	if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ) {
net/wireless/rt2x00/rt73usb.c:	if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ) {
net/wireless/rt2x00/rt73usb.c:	if (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ) {
net/wireless/rt2x00/rt73usb.c:			   (rt2x00dev->curr_band == IEEE80211_BAND_2GHZ));
net/wireless/rt2x00/rt73usb.c:		       && (rt2x00dev->curr_band != IEEE80211_BAND_5GHZ);
net/wireless/rt2x00/rt73usb.c:			   (rt2x00dev->curr_band == IEEE80211_BAND_5GHZ));
net/wireless/rt2x00/rt73usb.c:	spec->supported_bands = SUPPORT_BAND_2GHZ;
net/wireless/rt2x00/rt73usb.c:		spec->supported_bands |= SUPPORT_BAND_5GHZ;
net/wireless/rt2x00/rt73usb.c:		spec->supported_bands |= SUPPORT_BAND_5GHZ;
net/wireless/rtl818x/rtl8180/dev.c:	dev->wiphy->bands[IEEE80211_BAND_2GHZ] = &priv->band;
net/wireless/rtl818x/rtl8180/dev.c:	priv->band.band = IEEE80211_BAND_2GHZ;
net/wireless/rtl818x/rtl8187/dev.c:	dev->wiphy->bands[IEEE80211_BAND_2GHZ] = &priv->band;
net/wireless/rtl818x/rtl8187/dev.c:	priv->band.band = IEEE80211_BAND_2GHZ;
net/wireless/rtl818x/rtl8187/leds.c:						     HZ / 20);
net/wireless/rtl818x/rtl8187/rtl8187.h:			&priv->io_dmabuf->bits16, sizeof(val), HZ / 2);
net/wireless/rtl818x/rtl8187/rtl8187.h:			&priv->io_dmabuf->bits16, sizeof(val), HZ / 2);
net/wireless/rtl818x/rtl8187/rtl8187.h:			&priv->io_dmabuf->bits32, sizeof(val), HZ / 2);
net/wireless/rtl818x/rtl8187/rtl8187.h:			&priv->io_dmabuf->bits32, sizeof(val), HZ / 2);
net/wireless/rtl818x/rtl8187/rtl8187.h:			&priv->io_dmabuf->bits8, sizeof(val), HZ / 2);
net/wireless/rtl818x/rtl8187/rtl8187.h:			&priv->io_dmabuf->bits8, sizeof(val), HZ / 2);
net/wireless/rtl818x/rtl8187/rtl8225.c:			HZ / 2);
net/wireless/rtlwifi/base.c: * 2.4G band:rx_status->band == IEEE80211_BAND_2GHZ
net/wireless/rtlwifi/base.c:		/* <2> set hw->wiphy->bands[IEEE80211_BAND_2GHZ]
net/wireless/rtlwifi/base.c:			/* <2> set hw->wiphy->bands[IEEE80211_BAND_2GHZ]
net/wireless/rtlwifi/base.c:		/* <2> set hw->wiphy->bands[IEEE80211_BAND_5GHZ]
net/wireless/rtlwifi/base.c:			/* <2> set hw->wiphy->bands[IEEE80211_BAND_5GHZ]
net/wireless/rtlwifi/base.c: * 5G band:rx_status->band == IEEE80211_BAND_5GHZ
net/wireless/rtlwifi/base.c:	.band = IEEE80211_BAND_2GHZ,
net/wireless/rtlwifi/base.c:	.band = IEEE80211_BAND_5GHZ,
net/wireless/rtlwifi/base.c:		ht_cap->mcs.rx_highest = cpu_to_le16(MAX_BIT_RATE_40MHZ_MCS15);
net/wireless/rtlwifi/base.c:		ht_cap->mcs.rx_highest = cpu_to_le16(MAX_BIT_RATE_40MHZ_MCS7);
net/wireless/rtlwifi/base.c:	 *hw->wiphy->bands[IEEE80211_BAND_2GHZ]
net/wireless/rtlwifi/base.c:			hw->wiphy->bands[IEEE80211_BAND_2GHZ] = sband;
net/wireless/rtlwifi/base.c:		hw->wiphy->bands[IEEE80211_BAND_2GHZ] = sband;
net/wireless/rtlwifi/base.c:			hw->wiphy->bands[IEEE80211_BAND_5GHZ] = sband;
net/wireless/rtlwifi/base.c:		hw->wiphy->bands[IEEE80211_BAND_5GHZ] = sband;
net/wireless/rtlwifi/base.c:		if (IEEE80211_BAND_2GHZ == hw->conf.channel->band) {
net/wireless/rtlwifi/base.c:			memcpy(&(rtlmac->bands[IEEE80211_BAND_2GHZ]),
net/wireless/rtlwifi/base.c:		memcpy(&(rtlmac->bands[IEEE80211_BAND_2GHZ]), &rtl_band_2ghz,
net/wireless/rtlwifi/base.c:			memcpy(&(rtlmac->bands[IEEE80211_BAND_5GHZ]),
net/wireless/rtlwifi/base.c:		memcpy(&(rtlmac->bands[IEEE80211_BAND_5GHZ]), &rtl_band_5ghz,
net/wireless/rtlwifi/base.c:			sband = &(rtlmac->bands[IEEE80211_BAND_2GHZ]);
net/wireless/rtlwifi/base.c:		sband = &(rtlmac->bands[IEEE80211_BAND_2GHZ]);
net/wireless/rtlwifi/base.c:			sband = &(rtlmac->bands[IEEE80211_BAND_5GHZ]);
net/wireless/rtlwifi/base.c:		sband = &(rtlmac->bands[IEEE80211_BAND_5GHZ]);
net/wireless/rtlwifi/base.h:#define MAX_BIT_RATE_40MHZ_MCS15	300	/* Mbps */
net/wireless/rtlwifi/base.h:#define MAX_BIT_RATE_40MHZ_MCS7		150	/* Mbps */
net/wireless/rtlwifi/rc.c:				rate->flags |= IEEE80211_TX_RC_40_MHZ_WIDTH;
net/wireless/rtlwifi/rc.c:				rate->flags |= IEEE80211_TX_RC_40_MHZ_WIDTH;
net/wireless/rtlwifi/regd.c:#define RTL819x_2GHZ_CH01_11	\
net/wireless/rtlwifi/regd.c:#define RTL819x_2GHZ_CH12_13	\
net/wireless/rtlwifi/regd.c:#define RTL819x_2GHZ_CH14	\
net/wireless/rtlwifi/regd.c:#define RTL819x_5GHZ_5150_5350	\
net/wireless/rtlwifi/regd.c:#define RTL819x_5GHZ_5470_5850	\
net/wireless/rtlwifi/regd.c:#define RTL819x_5GHZ_5725_5850	\
net/wireless/rtlwifi/regd.c:#define RTL819x_5GHZ_ALL	\
net/wireless/rtlwifi/regd.c:	if (!wiphy->bands[IEEE80211_BAND_2GHZ])
net/wireless/rtlwifi/regd.c:	if (!wiphy->bands[IEEE80211_BAND_5GHZ])
net/wireless/rtlwifi/regd.c:		      RTL819x_2GHZ_CH01_11,
net/wireless/rtlwifi/regd.c:		      RTL819x_2GHZ_CH01_11,
net/wireless/rtlwifi/regd.c:		      RTL819x_2GHZ_CH01_11,
net/wireless/rtlwifi/regd.c:		      RTL819x_2GHZ_CH01_11,
net/wireless/rtlwifi/regd.c:		      RTL819x_2GHZ_CH01_11,
net/wireless/rtlwifi/regd.c:		      RTL819x_2GHZ_CH01_11,
net/wireless/rtlwifi/regd.c:			  RTL819x_2GHZ_CH12_13,
net/wireless/rtlwifi/regd.c:			  RTL819x_2GHZ_CH12_13,
net/wireless/rtlwifi/regd.c:			  RTL819x_2GHZ_CH12_13,
net/wireless/rtlwifi/regd.c:			  RTL819x_2GHZ_CH12_13,
net/wireless/rtlwifi/regd.c:			  RTL819x_2GHZ_CH14,
net/wireless/rtlwifi/regd.c:			  RTL819x_2GHZ_CH14,
net/wireless/rtlwifi/regd.c:			  RTL819x_5GHZ_5150_5350,
net/wireless/rtlwifi/regd.c:	(RTL819x_5GHZ_5150_5350, RTL819x_5GHZ_5470_5850)
net/wireless/rtlwifi/regd.c:			  RTL819x_5GHZ_5725_5850,
net/wireless/rtlwifi/regd.c:			  RTL819x_5GHZ_5725_5850,
net/wireless/rtlwifi/regd.c:			  RTL819x_5GHZ_5725_5850,
net/wireless/rtlwifi/regd.c:	sband = wiphy->bands[IEEE80211_BAND_2GHZ];
net/wireless/rtlwifi/regd.c:	sband = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/rtlwifi/rtl8192ce/hw.c:	reg_bw_opmode = BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192ce/phy.c:		reg_bw_opmode |= BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192ce/phy.c:		reg_bw_opmode &= ~BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192ce/reg.h:#define APLL_REF_CLK_13MHZ			0x1
net/wireless/rtlwifi/rtl8192ce/reg.h:#define APLL_REF_CLK_19_2MHZ			0x2
net/wireless/rtlwifi/rtl8192ce/reg.h:#define APLL_REF_CLK_20MHZ			0x3
net/wireless/rtlwifi/rtl8192ce/reg.h:#define APLL_REF_CLK_25MHZ			0x4
net/wireless/rtlwifi/rtl8192ce/reg.h:#define APLL_REF_CLK_26MHZ			0x5
net/wireless/rtlwifi/rtl8192ce/reg.h:#define APLL_REF_CLK_38_4MHZ			0x6
net/wireless/rtlwifi/rtl8192ce/reg.h:#define APLL_REF_CLK_40MHZ			0x7
net/wireless/rtlwifi/rtl8192ce/reg.h:#define BW_20MHZ				BIT(2)
net/wireless/rtlwifi/rtl8192ce/reg.h:#define	BW_OPMODE_20MHZ				BIT(2)
net/wireless/rtlwifi/rtl8192ce/trx.c:		rx_status->flag |= RX_FLAG_40MHZ;
net/wireless/rtlwifi/rtl8192cu/phy.c:		reg_bw_opmode |= BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192cu/phy.c:		reg_bw_opmode &= ~BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192cu/trx.c:		} else if(rate_flag & IEEE80211_TX_RC_40_MHZ_WIDTH){
net/wireless/rtlwifi/rtl8192cu/trx.c:		rx_status->flag |= RX_FLAG_40MHZ;
net/wireless/rtlwifi/rtl8192cu/trx.c:		rx_status->flag |= RX_FLAG_40MHZ;
net/wireless/rtlwifi/rtl8192de/hw.c:	u8 reg_bw_opmode = BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192de/phy.c:		reg_bw_opmode |= BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192de/phy.c:		reg_bw_opmode &= ~BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192de/reg.h:#define APLL_REF_CLK_13MHZ			0x1
net/wireless/rtlwifi/rtl8192de/reg.h:#define APLL_REF_CLK_19_2MHZ			0x2
net/wireless/rtlwifi/rtl8192de/reg.h:#define APLL_REF_CLK_20MHZ			0x3
net/wireless/rtlwifi/rtl8192de/reg.h:#define APLL_REF_CLK_25MHZ			0x4
net/wireless/rtlwifi/rtl8192de/reg.h:#define APLL_REF_CLK_26MHZ			0x5
net/wireless/rtlwifi/rtl8192de/reg.h:#define APLL_REF_CLK_38_4MHZ			0x6
net/wireless/rtlwifi/rtl8192de/reg.h:#define APLL_REF_CLK_40MHZ			0x7
net/wireless/rtlwifi/rtl8192de/reg.h:#define	BW_OPMODE_20MHZ			BIT(2)
net/wireless/rtlwifi/rtl8192de/trx.c:		rx_status->flag |= RX_FLAG_40MHZ;
net/wireless/rtlwifi/rtl8192se/hw.c:	/* Enable MAC 80MHZ clock */
net/wireless/rtlwifi/rtl8192se/hw.c:	/* Enable MAC 80MHZ clock  */
net/wireless/rtlwifi/rtl8192se/hw.c:		/* Read tx power difference between HT OFDM 20/40 MHZ */
net/wireless/rtlwifi/rtl8192se/hw.c:	reg_bw_opmode = BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192se/phy.c:		reg_bw_opmode |= BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192se/phy.c:		reg_bw_opmode &= ~BW_OPMODE_20MHZ;
net/wireless/rtlwifi/rtl8192se/reg.h:#define	BW_OPMODE_20MHZ				BIT(2)
net/wireless/rtlwifi/rtl8192se/trx.c:		rx_status->flag |= RX_FLAG_40MHZ;
net/wireless/rtlwifi/wifi.h:	u8 txpwrlevel_ht40_1s[2][CHANNEL_MAX_NUMBER];	/*For HT 40MHZ pwr */
net/wireless/rtlwifi/wifi.h:	u8 txpwrlevel_ht40_2s[2][CHANNEL_MAX_NUMBER];	/*For HT 40MHZ pwr */
net/wireless/wcnss/wcnss_wlan.c:		return WCNSS_XO_19MHZ;
net/wireless/wcnss/wcnss_wlan.c:		return WCNSS_XO_48MHZ;
net/wireless/wl1251/acx.h:#define SCAN_5GHZ_BAND		BIT(1)
net/wireless/wl1251/main.c:	wl->hw->wiphy->bands[IEEE80211_BAND_2GHZ] = &wl1251_band_2ghz;
net/wireless/wl1251/reg.h:	DEFAULT_BAND = RADIO_BAND_2_4GHZ,
net/wireless/wl1251/reg.h:	RADIO_BAND_2_4GHZ = 0,  /* 2.4 Ghz band */
net/wireless/wl1251/reg.h:	RADIO_BAND_5GHZ = 1,    /* 5 Ghz band */
net/wireless/wl1251/reg.h:	RADIO_BAND_JAPAN_4_9_GHZ = 2,
net/wireless/wl1251/rx.c:	status->band = IEEE80211_BAND_2GHZ;
net/wireless/wl12xx/acx.h:#define SCAN_5GHZ_BAND		BIT(1)
net/wireless/wl12xx/cmd.c:	case IEEE80211_BAND_2GHZ:
net/wireless/wl12xx/cmd.c:	case IEEE80211_BAND_2GHZ:
net/wireless/wl12xx/cmd.c:	case IEEE80211_BAND_5GHZ:
net/wireless/wl12xx/cmd.c:	case IEEE80211_BAND_5GHZ:
net/wireless/wl12xx/cmd.c:		cmd->band = RADIO_BAND_2_4GHZ;
net/wireless/wl12xx/cmd.c:		cmd->band = RADIO_BAND_2_4GHZ;
net/wireless/wl12xx/cmd.c:		cmd->band = RADIO_BAND_2_4GHZ;
net/wireless/wl12xx/cmd.c:		cmd->band = RADIO_BAND_5GHZ;
net/wireless/wl12xx/cmd.c:		cmd->band = RADIO_BAND_5GHZ;
net/wireless/wl12xx/cmd.c:		cmd->band = WL12XX_BAND_5GHZ;
net/wireless/wl12xx/cmd.c:		cmd->band = WL12XX_BAND_5GHZ;
net/wireless/wl12xx/cmd.c:		cmd->band = WL12XX_BAND_5GHZ;
net/wireless/wl12xx/cmd.c:	if (band == IEEE80211_BAND_2GHZ)
net/wireless/wl12xx/cmd.c:	if (wlvif->band == IEEE80211_BAND_2GHZ)
net/wireless/wl12xx/cmd.c:	if (wlvif->band == IEEE80211_BAND_5GHZ)
net/wireless/wl12xx/cmd.c:	if (wlvif->band == IEEE80211_BAND_5GHZ)
net/wireless/wl12xx/cmd.c:	if (wlvif->band == IEEE80211_BAND_5GHZ)
net/wireless/wl12xx/cmd.h:#define WL1271_JOIN_CMD_BSS_TYPE_5GHZ 0x10
net/wireless/wl12xx/cmd.h:	WL12XX_BAND_2_4GHZ		= 0,
net/wireless/wl12xx/cmd.h:	WL12XX_BAND_5GHZ		= 1,
net/wireless/wl12xx/cmd.h:	WL12XX_BAND_DEFAULT		= WL12XX_BAND_2_4GHZ,
net/wireless/wl12xx/cmd.h:	WL12XX_BAND_JAPAN_4_9_GHZ	= 2,
net/wireless/wl12xx/main.c:	band = wiphy->bands[IEEE80211_BAND_5GHZ];
net/wireless/wl12xx/main.c:	[IEEE80211_BAND_2GHZ] = wl1271_rate_to_idx_2ghz,
net/wireless/wl12xx/main.c:	[IEEE80211_BAND_5GHZ] = wl1271_rate_to_idx_5ghz
net/wireless/wl12xx/main.c:		mask->control[NL80211_BAND_2GHZ].legacy,
net/wireless/wl12xx/main.c:		mask->control[NL80211_BAND_5GHZ].legacy);
net/wireless/wl12xx/main.c:	memcpy(&wl->bands[IEEE80211_BAND_2GHZ], &wl1271_band_2ghz,
net/wireless/wl12xx/main.c:	memcpy(&wl->bands[IEEE80211_BAND_5GHZ], &wl1271_band_5ghz,
net/wireless/wl12xx/main.c:		wiphy->bands[IEEE80211_BAND_5GHZ]->n_channels = 0;
net/wireless/wl12xx/main.c:	wl->band = IEEE80211_BAND_2GHZ;
net/wireless/wl12xx/main.c:	wl->band = IEEE80211_BAND_2GHZ;
net/wireless/wl12xx/main.c:		&wl->bands[IEEE80211_BAND_2GHZ];
net/wireless/wl12xx/main.c:		&wl->bands[IEEE80211_BAND_5GHZ];
net/wireless/wl12xx/main.c:	wl->hw->wiphy->bands[IEEE80211_BAND_2GHZ] =
net/wireless/wl12xx/main.c:	wl->hw->wiphy->bands[IEEE80211_BAND_5GHZ] =
net/wireless/wl12xx/main.c:	wlvif->bitrate_masks[IEEE80211_BAND_2GHZ] = wl->conf.tx.basic_rate;
net/wireless/wl12xx/main.c:	wlvif->bitrate_masks[IEEE80211_BAND_5GHZ] = wl->conf.tx.basic_rate_5;
net/wireless/wl12xx/ps.c:		if (wlvif->band == IEEE80211_BAND_2GHZ) {
net/wireless/wl12xx/ps.c:		if (wlvif->band == IEEE80211_BAND_2GHZ) {
net/wireless/wl12xx/reg.h:	DEFAULT_BAND = RADIO_BAND_2_4GHZ,
net/wireless/wl12xx/reg.h:	RADIO_BAND_2_4GHZ = 0,  /* 2.4 Ghz band */
net/wireless/wl12xx/reg.h:	RADIO_BAND_5GHZ = 1,    /* 5 Ghz band */
net/wireless/wl12xx/reg.h:	RADIO_BAND_JAPAN_4_9_GHZ = 2,
net/wireless/wl12xx/rx.c:		status->band = IEEE80211_BAND_2GHZ;
net/wireless/wl12xx/rx.c:		status->band = IEEE80211_BAND_5GHZ;
net/wireless/wl12xx/scan.c:		band = IEEE80211_BAND_2GHZ;
net/wireless/wl12xx/scan.c:		band = IEEE80211_BAND_2GHZ;
net/wireless/wl12xx/scan.c:		band = IEEE80211_BAND_5GHZ;
net/wireless/wl12xx/scan.c:		band = IEEE80211_BAND_5GHZ;
net/wireless/wl12xx/scan.c:	case WL1271_SCAN_STATE_2GHZ_ACTIVE:
net/wireless/wl12xx/scan.c:	case WL1271_SCAN_STATE_2GHZ_PASSIVE:
net/wireless/wl12xx/scan.c:	case WL1271_SCAN_STATE_5GHZ_ACTIVE:
net/wireless/wl12xx/scan.c:	case WL1271_SCAN_STATE_5GHZ_PASSIVE:
net/wireless/wl12xx/scan.c:		cmd->params.band = WL1271_SCAN_BAND_2_4_GHZ;
net/wireless/wl12xx/scan.c:		cmd->params.band = WL1271_SCAN_BAND_5_GHZ;
net/wireless/wl12xx/scan.c:						    IEEE80211_BAND_2GHZ,
net/wireless/wl12xx/scan.c:						    IEEE80211_BAND_2GHZ,
net/wireless/wl12xx/scan.c:						    IEEE80211_BAND_5GHZ,
net/wireless/wl12xx/scan.c:						    IEEE80211_BAND_5GHZ,
net/wireless/wl12xx/scan.c:						    IEEE80211_BAND_5GHZ,
net/wireless/wl12xx/scan.c:	if (band == IEEE80211_BAND_2GHZ)
net/wireless/wl12xx/scan.c:						    MAX_CHANNELS_2GHZ);
net/wireless/wl12xx/scan.c:						    MAX_CHANNELS_2GHZ);
net/wireless/wl12xx/scan.c:						    MAX_CHANNELS_5GHZ);
net/wireless/wl12xx/scan.c:						    MAX_CHANNELS_5GHZ);
net/wireless/wl12xx/scan.c:						    MAX_CHANNELS_5GHZ);
net/wireless/wl12xx/scan.c:		u8 band = IEEE80211_BAND_2GHZ;
net/wireless/wl12xx/scan.c:		u8 band = IEEE80211_BAND_5GHZ;
net/wireless/wl12xx/scan.c:	wl->scan.state = WL1271_SCAN_STATE_2GHZ_ACTIVE;
net/wireless/wl12xx/scan.c:			wl->scan.state = WL1271_SCAN_STATE_2GHZ_PASSIVE;
net/wireless/wl12xx/scan.c:				wl->scan.state = WL1271_SCAN_STATE_5GHZ_ACTIVE;
net/wireless/wl12xx/scan.c:			wl->scan.state = WL1271_SCAN_STATE_5GHZ_PASSIVE;
net/wireless/wl12xx/scan.h:#define MAX_CHANNELS_2GHZ	14
net/wireless/wl12xx/scan.h:#define MAX_CHANNELS_4GHZ	4
net/wireless/wl12xx/scan.h:#define MAX_CHANNELS_5GHZ	23
net/wireless/wl12xx/scan.h:#define WL1271_SCAN_BAND_2_4_GHZ 0
net/wireless/wl12xx/scan.h:#define WL1271_SCAN_BAND_5_GHZ 1
net/wireless/wl12xx/scan.h:	struct conn_scan_ch_params channels_2[MAX_CHANNELS_2GHZ];
net/wireless/wl12xx/scan.h:	struct conn_scan_ch_params channels_4[MAX_CHANNELS_4GHZ];
net/wireless/wl12xx/scan.h:	struct conn_scan_ch_params channels_5[MAX_CHANNELS_5GHZ];
net/wireless/wl12xx/scan.h:	WL1271_SCAN_STATE_2GHZ_ACTIVE,
net/wireless/wl12xx/scan.h:	WL1271_SCAN_STATE_2GHZ_PASSIVE,
net/wireless/wl12xx/scan.h:	WL1271_SCAN_STATE_5GHZ_ACTIVE,
net/wireless/wl12xx/scan.h:	WL1271_SCAN_STATE_5GHZ_PASSIVE,
net/wireless/wl3501_cs.c:#define WL3501_RELEASE_TIMEOUT (25 * HZ)
net/wireless/wl3501_cs.c:	dev->watchdog_timeo	= 5 * HZ;
net/wireless/zd1211rw/zd_mac.c:#define BEACON_WATCHDOG_DELAY round_jiffies_relative(HZ)
net/wireless/zd1211rw/zd_mac.c:#define LINK_LED_WORK_DELAY HZ
net/wireless/zd1211rw/zd_mac.c:	end_jiffies = jiffies + HZ / 2; /*~500ms*/
net/wireless/zd1211rw/zd_mac.c:	end_jiffies = jiffies + HZ / 2; /*~500ms*/
net/wireless/zd1211rw/zd_mac.c:	hw->wiphy->bands[IEEE80211_BAND_2GHZ] = &mac->band;
net/wireless/zd1211rw/zd_mac.c:			message_jiffies = jiffies + HZ / 10;
net/wireless/zd1211rw/zd_mac.c:	message_jiffies = jiffies + HZ / 10; /*~100ms*/
net/wireless/zd1211rw/zd_mac.c:	stats.band = IEEE80211_BAND_2GHZ;
net/wireless/zd1211rw/zd_usb.h:#define ZD_RX_IDLE_INTERVAL	round_jiffies_relative(30 * HZ)
net/wireless/zd1211rw/zd_usb.h:#define ZD_TX_TIMEOUT		(HZ * 5)
net/wireless/zd1211rw/zd_usb.h:#define ZD_TX_WATCHDOG_INTERVAL	round_jiffies_relative(HZ)
net/xen-netfront.c:				  jiffies + (HZ/10));
oprofile/cpu_buffer.c:#define DEFAULT_TIMER_EXPIRE (HZ / 10)
oprofile/nmi_timer_int.c:	do_div(period, HZ);
parisc/led.c:	    count_HZ = 0;
parisc/led.c:				count_HZ < HEARTBEAT_2ND_RANGE_END))
parisc/led.c:				(count_HZ >= HEARTBEAT_2ND_RANGE_START &&
parisc/led.c:	count_HZ += jiffies - last_jiffies;
parisc/led.c:			currentleds = (count_HZ <= (HZ/2)) ? 0 : 0xff;
parisc/led.c:#define HEARTBEAT_2ND_RANGE_START (HZ*28/100)
parisc/led.c:#define HEARTBEAT_LEN (HZ*10/100)
parisc/led.c:#define LED_UPDATE_INTERVAL (1 + (HZ*19/1000))
parisc/led.c:		if (count_HZ < HEARTBEAT_LEN ||
parisc/led.c:	if (count_HZ >= HZ)
parisc/led.c:			if (count_HZ <= (HZ/2))
parisc/led.c:#include <asm/param.h>		/* HZ */
parisc/led.c:	static unsigned long count_HZ; /* counter in range 0..HZ */
parisc/power.c:		schedule_timeout_interruptible(pwrsw_enabled ? HZ : HZ/POWERSWITCH_POLL_PER_SEC);
parport/parport_pc.c:	expire = jiffies + (priv->fifo_depth * (HZ * 4));
parport/parport_pc.c:	expire = jiffies + (priv->fifo_depth * HZ * 4);
parport/parport_pc.c:			ret = parport_wait_event(port, HZ);
parport/parport_pc.c:			ret = parport_wait_event(port, HZ);
parport/parport_pc.c:		ret = parport_wait_event(port, HZ);
parport/procfs.c:#define PARPORT_MAX_TIMESLICE_VALUE ((unsigned long) HZ)
parport/share.c:#define PARPORT_DEFAULT_TIMESLICE	(HZ/5)
parport/share.c:	tmp->timeout = 5 * HZ;
pci/access.c:	unsigned long timeout = jiffies + HZ/20 + 2;
pci/hotplug/cpqphp_core.c:			slot->capabilities |= PCISLOT_66_MHZ_OPERATION;
pci/hotplug/cpqphp_core.c:			slot->capabilities |= PCISLOT_66_MHZ_SUPPORTED;
pci/hotplug/cpqphp_core.c:		slot->task_event.expires = jiffies + 5 * HZ;
pci/hotplug/cpqphp_ctrl.c:	long_delay(1*HZ);
pci/hotplug/cpqphp_ctrl.c:		long_delay(1*HZ);
pci/hotplug/cpqphp_ctrl.c:		long_delay((2*HZ)/10);
pci/hotplug/cpqphp_ctrl.c:			long_delay((3*HZ)/10);
pci/hotplug/cpqphp_ctrl.c:			long_delay((3*HZ)/10);
pci/hotplug/cpqphp_ctrl.c:					p_slot->task_event.expires = jiffies + 5 * HZ;   /* 5 second delay */
pci/hotplug/cpqphp.h:#define PCISLOT_66_MHZ_OPERATION	0x00000008
pci/hotplug/cpqphp.h:#define PCISLOT_66_MHZ_SUPPORTED	0x00000100
pci/hotplug/pciehp_ctrl.c:		queue_delayed_work(p_slot->wq, &p_slot->work, 5*HZ);
pci/hotplug/pciehp_hpc.c:	ctrl->poll_timer.expires = jiffies + sec * HZ;
pci/hotplug/sgi_hotplug.c:#define PCI_EMPTY_33MHZ			15	/* empty 33 MHz bus */
pci/hotplug/sgi_hotplug.c:	if ((action == PCI_REQ_SLOT_ELIGIBLE) && (rc == PCI_EMPTY_33MHZ)) {
pci/hotplug/shpchp_ctrl.c:		queue_delayed_work(p_slot->wq, &p_slot->work, 5*HZ);
pci/hotplug/shpchp_hpc.c:		cmd = SETA_PCI_33MHZ;
pci/hotplug/shpchp_hpc.c:		cmd = SETA_PCI_66MHZ;
pci/hotplug/shpchp_hpc.c:		cmd = SETA_PCIX_100MHZ;
pci/hotplug/shpchp_hpc.c:		cmd = SETA_PCIX_133MHZ;
pci/hotplug/shpchp_hpc.c:		cmd = SETA_PCIX_66MHZ;
pci/hotplug/shpchp_hpc.c:		cmd = SETB_PCIX_100MHZ_266;
pci/hotplug/shpchp_hpc.c:		cmd = SETB_PCIX_100MHZ_533;
pci/hotplug/shpchp_hpc.c:		cmd = SETB_PCIX_100MHZ_EM;
pci/hotplug/shpchp_hpc.c:		cmd = SETB_PCIX_133MHZ_266;
pci/hotplug/shpchp_hpc.c:		cmd = SETB_PCIX_133MHZ_533;
pci/hotplug/shpchp_hpc.c:		cmd = SETB_PCIX_133MHZ_EM;
pci/hotplug/shpchp_hpc.c:		cmd = SETB_PCIX_66MHZ_266;
pci/hotplug/shpchp_hpc.c:		cmd = SETB_PCIX_66MHZ_533;
pci/hotplug/shpchp_hpc.c:		cmd = SETB_PCIX_66MHZ_EM;
pci/hotplug/shpchp_hpc.c:	ctrl->poll_timer.expires = jiffies + sec * HZ;
pci/hotplug/shpchp_hpc.c:#define MHZ66_CAP		(1 << 9)
pci/hotplug/shpchp_hpc.c:#define SETA_PCI_33MHZ		0x40	/* Set Bus Segment Speed/Mode A */
pci/hotplug/shpchp_hpc.c:#define SETA_PCI_66MHZ		0x41
pci/hotplug/shpchp_hpc.c:#define SETA_PCIX_100MHZ	0x43
pci/hotplug/shpchp_hpc.c:#define SETA_PCIX_133MHZ	0x44
pci/hotplug/shpchp_hpc.c:#define SETA_PCIX_66MHZ		0x42
pci/hotplug/shpchp_hpc.c:#define	SETB_PCI_33MHZ		0x50	/* Set Bus Segment Speed/Mode B */
pci/hotplug/shpchp_hpc.c:#define SETB_PCI_66MHZ		0x51
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_100MHZ_266	0x59
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_100MHZ_533	0x5c
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_100MHZ_EM	0x56
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_100MHZ_PM	0x53
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_133MHZ_266	0x5a
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_133MHZ_533	0x5d
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_133MHZ_EM	0x57
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_133MHZ_PM	0x54
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_66MHZ_266	0x58
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_66MHZ_533	0x5b
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_66MHZ_EM	0x55
pci/hotplug/shpchp_hpc.c:#define SETB_PCIX_66MHZ_PM	0x52
pci/hotplug/shpchp_hpc.c:#define SLOT_100MHZ_PCIX	0x001f0000
pci/hotplug/shpchp_hpc.c:#define SLOT_100MHZ_PCIX_266	0x0000f000
pci/hotplug/shpchp_hpc.c:#define SLOT_100MHZ_PCIX_533	0x0f000000
pci/hotplug/shpchp_hpc.c:#define SLOT_133MHZ_PCIX	0x1f000000
pci/hotplug/shpchp_hpc.c:#define SLOT_133MHZ_PCIX_266	0x000f0000
pci/hotplug/shpchp_hpc.c:#define SLOT_133MHZ_PCIX_533	0xf0000000
pci/hotplug/shpchp_hpc.c:#define SLOT_33MHZ		0x0000001f
pci/hotplug/shpchp_hpc.c:#define SLOT_66MHZ		0x0000001f
pci/hotplug/shpchp_hpc.c:#define SLOT_66MHZ_PCIX		0x00001f00
pci/hotplug/shpchp_hpc.c:#define SLOT_66MHZ_PCIX_266	0x00000f00
pci/hotplug/shpchp_hpc.c:#define SLOT_66MHZ_PCIX_533	0x00f00000
pci/hotplug/shpchp_hpc.c:		else if (slot_avail1 & SLOT_100MHZ_PCIX)
pci/hotplug/shpchp_hpc.c:		else if (slot_avail1 & SLOT_33MHZ)
pci/hotplug/shpchp_hpc.c:		else if (slot_avail1 & SLOT_66MHZ_PCIX)
pci/hotplug/shpchp_hpc.c:		else if (slot_avail2 & SLOT_100MHZ_PCIX_266)
pci/hotplug/shpchp_hpc.c:		else if (slot_avail2 & SLOT_100MHZ_PCIX_533)
pci/hotplug/shpchp_hpc.c:		else if (slot_avail2 & SLOT_133MHZ_PCIX_266)
pci/hotplug/shpchp_hpc.c:		else if (slot_avail2 & SLOT_66MHZ)
pci/hotplug/shpchp_hpc.c:		else if (slot_avail2 & SLOT_66MHZ_PCIX_266)
pci/hotplug/shpchp_hpc.c:		else if (slot_avail2 & SLOT_66MHZ_PCIX_533)
pci/hotplug/shpchp_hpc.c:		if (slot_avail1 & SLOT_133MHZ_PCIX)
pci/hotplug/shpchp_hpc.c:		if (slot_avail2 & SLOT_133MHZ_PCIX_533)
pci/hotplug/shpchp_hpc.c:	u8 m66_cap  = !!(slot_reg & MHZ66_CAP);
pci/pcie/aspm.c:#define LINK_RETRAIN_TIMEOUT HZ
pci/probe.c:		if (!(status & (PCI_X_STATUS_266MHZ | PCI_X_STATUS_533MHZ)))
pci/xen-pcifront.c:		xen_poll_irq_timeout(irq, jiffies + 3*HZ);
pcmcia/bfin_cf_pcmcia.c:#define	POLL_INTERVAL	(2 * HZ)
pcmcia/cistpl.c:					pwr->flags |= CISTPL_POWER_HIGHZ_OK;
pcmcia/cistpl.c:					pwr->flags |= CISTPL_POWER_HIGHZ_REQ;
pcmcia/electra_cf.c:#define	POLL_INTERVAL		(2 * HZ)
pcmcia/i82365.c:	if (!cs_irq && (poll_interval == 0)) poll_interval = HZ;
pcmcia/i82365.c:	       poll_interval * 1000 / HZ);
pcmcia/i82365.c:	    poll_interval = HZ;
pcmcia/i82365.c:	    poll_interval = HZ;
pcmcia/m8xx_pcmcia.c:#define CONFIG_BD_IS_MHZ
pcmcia/m8xx_pcmcia.c:#define CONFIG_BD_IS_MHZ
pcmcia/omap_cf.c:#define	POLL_INTERVAL		(2 * HZ)
pcmcia/pd6729.c:	mod_timer(&socket->poll_timer, jiffies + HZ);
pcmcia/pd6729.c:		socket->poll_timer.expires = jiffies + HZ;
pcmcia/soc_common.h:#define SOC_PCMCIA_POLL_PERIOD    (2*HZ)
pcmcia/tcic.c:	if (cs_irq == 0) poll_interval = HZ;
pcmcia/tcic.c:	       poll_interval * 1000 / HZ);
pcmcia/tcic.c:	poll_interval = HZ;
pcmcia/tcic.c:static int poll_quick = HZ/20;
pcmcia/yenta_socket.c:		socket->poll_timer.expires = jiffies + HZ;
pcmcia/yenta_socket.c:	socket->poll_timer.expires = jiffies + HZ;
platform/msm/qpnp-pwm.c:#define NSEC_1024HZ	(NSEC_PER_SEC / 1024)
platform/msm/qpnp-pwm.c:#define NSEC_19P2MHZ	(NSEC_PER_SEC / 19200000)
platform/msm/qpnp-pwm.c:#define NSEC_32768HZ	(NSEC_PER_SEC / 32768)
platform/msm/qpnp-pwm.c:#define QPNP_PWM_1KHZ				1024
platform/msm/qpnp-pwm.c:	{	PRE_DIVIDE_1 * NSEC_1024HZ,
platform/msm/qpnp-pwm.c:		PRE_DIVIDE_1 * NSEC_19P2MHZ,
platform/msm/qpnp-pwm.c:		PRE_DIVIDE_1 * NSEC_32768HZ,
platform/msm/qpnp-pwm.c:	{	PRE_DIVIDE_3 * NSEC_1024HZ,
platform/msm/qpnp-pwm.c:		PRE_DIVIDE_3 * NSEC_19P2MHZ,
platform/msm/qpnp-pwm.c:		PRE_DIVIDE_3 * NSEC_32768HZ,
platform/msm/qpnp-pwm.c:	{	PRE_DIVIDE_5 * NSEC_1024HZ,
platform/msm/qpnp-pwm.c:		PRE_DIVIDE_5 * NSEC_19P2MHZ,
platform/msm/qpnp-pwm.c:		PRE_DIVIDE_5 * NSEC_32768HZ,
platform/msm/qpnp-pwm.c:	{	PRE_DIVIDE_6 * NSEC_1024HZ,
platform/msm/qpnp-pwm.c:		PRE_DIVIDE_6 * NSEC_19P2MHZ,
platform/msm/qpnp-pwm.c:		PRE_DIVIDE_6 * NSEC_32768HZ,
platform/msm/qpnp-pwm.c:		((ramp_time_ms * QPNP_PWM_1KHZ) / 1000)
platform/x86/acer-wmi.c:			round_jiffies_relative(HZ));
platform/x86/acer-wmi.c:	schedule_delayed_work(&acer_rfkill_work, round_jiffies_relative(HZ));
platform/x86/dell-laptop.c:					      round_jiffies_relative(HZ));
platform/x86/ideapad-laptop.c:	for (end_jiffies = jiffies+(HZ)*IDEAPAD_EC_TIMEOUT/1000+1;
platform/x86/ideapad-laptop.c:	for (end_jiffies = jiffies+(HZ)*IDEAPAD_EC_TIMEOUT/1000+1;
platform/x86/intel_ips.c:		    time_after(jiffies, seqno_timestamp + HZ)) {
platform/x86/msi-laptop.c:				round_jiffies_relative(0.5 * HZ));
platform/x86/msi-laptop.c:				round_jiffies_relative(0.5 * HZ));
platform/x86/msi-laptop.c:				round_jiffies_relative(1 * HZ));
power/ab8500_btemp.c:		round_jiffies(interval * HZ));
power/ab8500_charger.c:#define WD_KICK_INTERVAL		(60 * HZ)
power/ab8500_charger.c:			&di->check_hw_failure_work, round_jiffies(HZ));
power/ab8500_charger.c:			&di->check_usbchgnotok_work, HZ);
power/ab8500_charger.c:		queue_delayed_work(di->charger_wq, &di->check_vbat_work, HZ);
power/ab8500_charger.c:	queue_delayed_work(di->charger_wq, &di->check_vbat_work, t * HZ);
power/ab8500_fg.c:#define INS_CURR_TIMEOUT		(3 * HZ)
power/ab8500_fg.c:#define LOW_BAT_CHECK_INTERVAL		(2 * HZ)
power/ab8500_fg.c:			((INS_CURR_TIMEOUT - timeout) * 1000) / HZ);
power/ab8500_fg.c:				   round_jiffies(HZ));
power/ab8500_fg.c:					sleep_time * HZ);
power/abx500_chargalg.c:#define CHG_WD_INTERVAL			(6 * HZ)
power/abx500_chargalg.c:			di->bat->interval_charging * HZ);
power/abx500_chargalg.c:			di->bat->interval_not_charging * HZ);
power/abx500_chargalg.c:			(di->bat->main_safety_tmr_h * 3600 * HZ));
power/abx500_chargalg.c:			(di->bat->usb_safety_tmr_h * 3600 * HZ));
power/abx500_chargalg.c:	timer_expiration = round_jiffies(jiffies + (duration * 3600 * HZ));
power/bq27520_fuelgauger.c:#define BQ27520_COULOMB_POLL ((HZ)*30)
power/bq27520_fuelgauger.c:#define BQ27520_INIT_DELAY ((HZ)*1)
power/bq27520_fuelgauger.c:#define BQ27520_POLLING_STATUS ((HZ)*3)
power/bq27541_fuelgauger.c:#define BQ27541_INIT_DELAY   ((HZ)*1)
power/bq27x00_battery.c:	if (time_is_before_jiffies(di->last_update + 5 * HZ)) {
power/bq27x00_battery.c:		schedule_delayed_work(&di->work, poll_interval * HZ);
power/bq27x00_battery.c:		set_timer_slack(&di->work.timer, poll_interval * HZ / 4);
power/ds2760_battery.c:	const int interval = HZ * 60;
power/ds2760_battery.c:	mod_delayed_work(di->monitor_wqueue, &di->monitor_work, HZ);
power/ds2760_battery.c:	mod_delayed_work(di->monitor_wqueue, &di->monitor_work, HZ/10);
power/ds2760_battery.c:	mod_delayed_work(di->monitor_wqueue, &di->set_charged_work, HZ * 20);
power/ds2760_battery.c:	queue_delayed_work(di->monitor_wqueue, &di->monitor_work, HZ * 1);
power/intel_mid_battery.c:	queue_delayed_work(pbi->monitor_wqueue, &pbi->monitor_battery, HZ * 1);
power/intel_mid_battery.c:	queue_delayed_work(pbi->monitor_wqueue, &pbi->monitor_battery, HZ * 10);
power/isl9519q.c:			      (ISL9519_CHG_PERIOD_SEC * HZ));
power/jz4740-battery.c:	const int interval = HZ * 30;
power/jz4740-battery.c:		HZ);
power/pm8921-bms.c:#define SLEEP_CLK_HZ		32764
power/pm8921-bms.c:			SLEEP_CLK_HZ * SECONDS_PER_HOUR);
power/pm8921-sec-charger-8930.c:						&chip->cable_wake_lock, 90*HZ);
power/pm8921-sec-charger-8930.c:						&chip->cable_wake_lock, 90*HZ);
power/pm8921-sec-charger-8930.c:						&chip->monitor_wake_lock, 5*HZ);
power/pm8921-sec-charger-8930.c:	wake_lock_timeout(&chip->cable_wake_lock, 5*HZ);
power/sbs-battery.c:		schedule_delayed_work(&chip->work, HZ);
power/sbs-battery.c:	schedule_delayed_work(&chip->work, HZ);
power/sec_battery.c:							10 * HZ);
power/sec_battery.c:						10 * HZ);
power/sec_battery.c:						  5 * HZ);
power/sec_battery.c:				   HZ);
power/sec_battery.c:				   HZ);
power/sec_battery.c:				   HZ / 2);
power/sec_battery.c:				   HZ / 2);
power/sec_battery.c:					   &info->cable_work, HZ);
power/sec_battery.c:					   &info->measure_work, HZ);
power/sec_battery.c:					   &info->measure_work, HZ);
power/sec_battery.c:					   &info->measure_work, HZ);
power/sec_battery.c:				wake_lock_timeout(&info->cable_wake_lock, 2*HZ);
power/sec_battery.c:			wake_lock_timeout(&info->cable_wake_lock, 2*HZ);
power/sec_battery.c:		wake_lock_timeout(&info->monitor_wake_lock, 10 * HZ);
power/sec_battery.c:		wake_lock_timeout(&info->monitor_wake_lock, 10 * HZ);
power/sec_battery.c:				wake_lock_timeout(&info->monitor_wake_lock, 5 * HZ);
power/sec_battery.c:				wake_lock_timeout(&info->monitor_wake_lock, 5 * HZ);
power/sec_battery.c:			wake_lock_timeout(&info->vbus_wake_lock, 5 * HZ);
power/sec_battery.c:		wake_lock_timeout(&info->vbus_wake_lock, 5 * HZ);
power/sec_battery.c:		wake_lock_timeout(&info->vbus_wake_lock, 5 * HZ);
power/smb137b.c:#define SMB137B_CHG_PERIOD	((HZ) * 150)
pps/clients/pps-ktimer.c:	mod_timer(&ktimer, jiffies + HZ);
pps/clients/pps-ktimer.c:	mod_timer(&ktimer, jiffies + HZ);
pps/Kconfig:	depends on !NO_HZ
pps/pps.c:			ticks += fdata.timeout.nsec / (NSEC_PER_SEC / HZ);
pps/pps.c:			ticks = fdata.timeout.sec * HZ;
ps3/ps3av_cmd.c:	case PS3AV_CMD_AV_VID_1080I_50HZ:
ps3/ps3av_cmd.c:	case PS3AV_CMD_AV_VID_1080I_60HZ:
ps3/ps3av_cmd.c:	case PS3AV_CMD_AV_VID_1080P_50HZ:
ps3/ps3av_cmd.c:	case PS3AV_CMD_AV_VID_1080P_60HZ:
ps3/ps3av_cmd.c:	case PS3AV_CMD_AV_VID_720P_50HZ:
ps3/ps3av_cmd.c:	case PS3AV_CMD_AV_VID_720P_60HZ:
ps3/ps3av_cmd.c:	{ PS3AV_CMD_VIDEO_VID_1080I_50HZ, PS3AV_CMD_AV_VID_1080I_50HZ },
ps3/ps3av_cmd.c:	{ PS3AV_CMD_VIDEO_VID_1080I_60HZ, PS3AV_CMD_AV_VID_1080I_60HZ },
ps3/ps3av_cmd.c:	{ PS3AV_CMD_VIDEO_VID_1080P_50HZ, PS3AV_CMD_AV_VID_1080P_50HZ },
ps3/ps3av_cmd.c:	{ PS3AV_CMD_VIDEO_VID_1080P_60HZ, PS3AV_CMD_AV_VID_1080P_60HZ },
ps3/ps3av_cmd.c:	{ PS3AV_CMD_VIDEO_VID_720P_50HZ, PS3AV_CMD_AV_VID_720P_50HZ },
ps3/ps3av_cmd.c:	{ PS3AV_CMD_VIDEO_VID_720P_60HZ, PS3AV_CMD_AV_VID_720P_60HZ },
ps3/ps3av_cmd.c:		video_vid = PS3AV_CMD_VIDEO_VID_720P_60HZ;
ps3/ps3av_cmd.c:		video_vid = PS3AV_CMD_VIDEO_VID_720P_60HZ;
ps3/ps3av.c:	{YUV444, XRGB, PS3AV_CMD_VIDEO_VID_1080I_50HZ, A_W, 1920, 1080},
ps3/ps3av.c:	{YUV444, XRGB, PS3AV_CMD_VIDEO_VID_1080I_60HZ, A_W, 1920, 1080},
ps3/ps3av.c:	{YUV444, XRGB, PS3AV_CMD_VIDEO_VID_1080P_50HZ, A_W, 1920, 1080},
ps3/ps3av.c:	{YUV444, XRGB, PS3AV_CMD_VIDEO_VID_1080P_60HZ, A_W, 1920, 1080},
ps3/ps3av.c:	{YUV444, XRGB, PS3AV_CMD_VIDEO_VID_720P_50HZ,  A_W, 1280,  720},
ps3/ps3av.c:	{YUV444, XRGB, PS3AV_CMD_VIDEO_VID_720P_60HZ,  A_W, 1280,  720},
rapidio/rio-scan.c:		to_end = jiffies + CONFIG_RAPIDIO_DISC_TIMEOUT * HZ;
regulator/max8997.c:	case MAX8997_EN32KHZ_AP ... MAX8997_EN32KHZ_CP:
regulator/max8997.c:		.id	= MAX8997_EN32KHZ_AP,
regulator/max8997.c:		.id	= MAX8997_EN32KHZ_CP,
regulator/max8997.c:		*mask = 0x01 << (rid - MAX8997_EN32KHZ_AP);
regulator/max8997.c:	[MAX8997_EN32KHZ_AP] = NULL,
regulator/max8997.c:	[MAX8997_EN32KHZ_CP] = NULL,
regulator/max8997.c:		*pattern = 0x01 << (rid - MAX8997_EN32KHZ_AP);
regulator/max8998.c:	case MAX8998_EN32KHZ_AP ... MAX8998_ENVICHG:
regulator/max8998.c:		.id		= MAX8998_EN32KHZ_AP,
regulator/max8998.c:		.id		= MAX8998_EN32KHZ_CP,
regulator/max8998.c:		*shift = 7 - (ldo - MAX8998_EN32KHZ_AP);
rtc/rtc-88pm860x.c:#define VRTC_CALIB_INTERVAL	(HZ * 60 * 10)		/* 10 minutes */
rtc/rtc-ab8500.c:	unsigned long timeout = jiffies + HZ;
rtc/rtc-bfin.c: * (2^N HZ), there is no point in keeping code that only provides 1 HZ PIEs.
rtc/rtc-bfin.c: *  - disable PREN so the sync happens at 32.768kHZ ... but this changes the
rtc/rtc-bfin.c: *    inc rate for all RTC registers from 1HZ to 32.768kHZ ...
rtc/rtc-bfin.c: * runs in units of seconds (N/HZ) but the Linux framework runs in units of HZ
rtc/rtc-bfin.c:	 * the core after waking up.  This happens every RTC 1HZ.  Once that
rtc/rtc-bfin.c:	unsigned long timeout = jiffies + HZ;
rtc/rtc-bfin.c:		wait_for_completion_timeout(&bfin_write_complete, HZ * 5);
rtc/rtc-cmos.c:	CMOS_WRITE(RTC_REF_CLCK_32KHZ | 0x06, RTC_FREQ_SELECT);
rtc/rtc-dev.c:		rtc->uie_timer.expires = jiffies + HZ - (HZ/10);
rtc/rtc-ds1286.c:		while (time_before(jiffies, uip_watchdog + 2*HZ/100))
rtc/rtc-ds1305.c:#	define DS1306_1HZ		0x04	/* enable 1Hz output */
rtc/rtc-ds1305.c:					ds1305->ctrl[0] |= DS1306_1HZ;
rtc/rtc-ds1305.c:					ds1305->ctrl[0] &= ~DS1306_1HZ;
rtc/rtc-ds1305.c:				if (!(ds1305->ctrl[0] & DS1306_1HZ)) {
rtc/rtc-ds1305.c:				if (ds1305->ctrl[0] & DS1306_1HZ) {
rtc/rtc-jz4740.c:	ctrl |= JZ_RTC_CTRL_1HZ | JZ_RTC_CTRL_AF;
rtc/rtc-jz4740.c:#define JZ_RTC_CTRL_1HZ		BIT(6)
rtc/rtc-jz4740.c:#define JZ_RTC_CTRL_1HZ_IRQ	BIT(5)
rtc/rtc-jz4740.c:	if (ctrl & JZ_RTC_CTRL_1HZ)
rtc/rtc-jz4740.c:	jz4740_rtc_ctrl_set_bits(rtc, JZ_RTC_CTRL_1HZ | JZ_RTC_CTRL_AF, false);
rtc/rtc-ls1x.c:	/* set to 1 HZ if needed */
rtc/rtc-mc13xxx.c:	dev_dbg(&priv->rtc->dev, "1HZ\n");
rtc/rtc-mc13xxx.c:		mc13xxx_irq_free(mc13xxx, MC13XXX_IRQ_1HZ, priv);
rtc/rtc-mc13xxx.c:	mc13xxx_irq_free(priv->mc13xxx, MC13XXX_IRQ_1HZ, priv);
rtc/rtc-mc13xxx.c:	ret = mc13xxx_irq_request_nounmask(mc13xxx, MC13XXX_IRQ_1HZ,
rtc/rtc-msm6242.c:#define MSM6242_CE_T_1HZ	(1 << 2)	/* period 1 second */
rtc/rtc-msm6242.c:#define MSM6242_CE_T_64HZ	(0 << 2)	/* period 1/64 second */
rtc/rtc-msm7x00a.c:				5 * HZ);
rtc/rtc-msm7x00a.c:				5 * HZ);
rtc/rtc-mxc.c:	{ 2,		RTC_2HZ_BIT },
rtc/rtc-mxc.c:#define PIT_ALL_ON      (RTC_2HZ_BIT | RTC_SAM0_BIT | RTC_SAM1_BIT | \
rtc/rtc-mxc.c:#define RTC_1HZ_BIT     (1 << 4)
rtc/rtc-mxc.c:#define RTC_2HZ_BIT     (1 << 7)
rtc/rtc-mxc.c:#define RTC_INPUT_CLK_32000HZ	(0x01 << 5)
rtc/rtc-mxc.c:#define RTC_INPUT_CLK_32768HZ	(0x00 << 5)
rtc/rtc-mxc.c:#define RTC_INPUT_CLK_38400HZ	(0x02 << 5)
rtc/rtc-mxc.c:	if (status & RTC_1HZ_BIT)
rtc/rtc-mxc.c:		reg = RTC_INPUT_CLK_32000HZ;
rtc/rtc-mxc.c:		reg = RTC_INPUT_CLK_32768HZ;
rtc/rtc-mxc.c:		reg = RTC_INPUT_CLK_38400HZ;
rtc/rtc-pcap.c:	free_irq(pcap_to_irq(pcap_rtc->pcap, PCAP_IRQ_1HZ), pcap_rtc);
rtc/rtc-pcap.c:	if (irq == pcap_to_irq(pcap_rtc->pcap, PCAP_IRQ_1HZ))
rtc/rtc-pcap.c:	timer_irq = pcap_to_irq(pcap_rtc->pcap, PCAP_IRQ_1HZ);
rtc/rtc-pcf8583.c:#define CTRL_32KHZ	0x00
rtc/rtc-puv3.c:		if ((readl(RTC_RTSR) & RTC_RTSR_HZE) == 0) {
rtc/rtc-puv3.c:		     (readl(RTC_RTSR) & RTC_RTSR_HZE) ? "yes" : "no");
rtc/rtc-puv3.c:	tmp = readl(RTC_RTSR) & ~RTC_RTSR_HZE;
rtc/rtc-puv3.c:		tmp |= RTC_RTSR_HZE;
rtc/rtc-puv3.c:			writel(readl(RTC_RTSR) | RTC_RTSR_HZE, RTC_RTSR);
rtc/rtc-puv3.c:		writel(readl(RTC_RTSR) & ~RTC_RTSR_HZE, RTC_RTSR);
rtc/rtc-puv3.c:	writel(readl(RTC_RTSR) | RTC_RTSR_HZ, RTC_RTSR);
rtc/rtc-pxa.c:#define RTSR_HZ		(1 << 1)	/* HZ rising-edge detected */
rtc/rtc-pxa.c:#define RTSR_HZE	(1 << 3)	/* HZ interrupt enable */
rtc/rtc-pxa.c:#define RTSR_TRIG_MASK	(RTSR_AL | RTSR_HZ | RTSR_RDAL1 | RTSR_RDAL2\
rtc/rtc-pxa.c:	if (rtsr & RTSR_HZ)
rtc/rtc-pxa.c:		   (rtc_readl(pxa_rtc, RTSR) & RTSR_HZE) ? "yes" : "no");
rtc/rtc-pxa.c:	rtsr_clear_bits(pxa_rtc, RTSR_PIALE | RTSR_RDALE1 | RTSR_HZE);
rtc/rtc-pxa.c:	rtsr_clear_bits(pxa_rtc, RTSR_PIALE | RTSR_RDALE1 | RTSR_HZE);
rtc/rtc-pxa.c:	rtsr_clear_bits(pxa_rtc, RTSR_RDALE1 | RTSR_PIALE | RTSR_HZE);
rtc/rtc-rp5c01.c:#define RP5C01_RESET_16HZ_PULSE	(1 << 2)
rtc/rtc-rp5c01.c:#define RP5C01_RESET_1HZ_PULSE	(1 << 3)
rtc/rtc-rx8025.c:#define RX8025_BIT_CTRL1_CT_1HZ	4
rtc/rtc-sa1100.c:	if (rtsr & (RTSR_ALE | RTSR_HZE)) {
rtc/rtc-sa1100.c:	if (rtsr & RTSR_HZ)
rtc/rtc-sa1100.c:		RTSR = RTSR_AL | RTSR_HZ;
rtc/rtc-sa1100.c:	RTSR = RTSR_AL | RTSR_HZ;
rtc/rtc-sa1100.c:		RTSR = (RTSR_AL | RTSR_HZ) & (rtsr >> 2);
rtc/rtc-sa1100.c:	RTSR = rtsr & (RTSR_ALE | RTSR_HZE);
rtc/rtc-sa1100.c:	RTSR = RTSR & (RTSR_HZE|RTSR_ALE|RTSR_AL);
rtc/rtc-sa1100.c:	 * Sometimes bit 1 of the RTSR (RTSR_HZ) will wake up 1, which means an
s390/block/dasd_3990_erp.c:		    "blocking request queue for %is", expires/HZ);
s390/block/dasd_3990_erp.c:			dasd_3990_erp_block_queue(erp, 30*HZ);
s390/block/dasd_3990_erp.c:			dasd_3990_erp_block_queue (erp, 5*HZ);
s390/block/dasd_3990_erp.c:		dasd_3990_erp_block_queue(erp, 60*HZ);
s390/block/dasd_3990_erp.c:		dasd_3990_erp_block_queue(erp, 60*HZ);
s390/block/dasd_3990_erp.c:                        dasd_3990_erp_block_queue(erp, HZ);
s390/block/dasd_3990_erp.c:			dasd_block_set_timer(device->block, (HZ << 3));
s390/block/dasd_3990_erp.c:	dctl_cqr->expires = 5 * 60 * HZ;
s390/block/dasd_alias.c:	cqr->expires = 20 * HZ;
s390/block/dasd_alias.c:	cqr->expires = 5 * HZ;
s390/block/dasd_alias.c:		schedule_delayed_work(&lcu->ruac_data.dwork, 30*HZ);
s390/block/dasd.c:				cqr, (cqr->expires/HZ));
s390/block/dasd.c:	cqr->expires = 10*HZ;
s390/block/dasd.c:			cqr->expires += 5*HZ;
s390/block/dasd.c:				dasd_block_set_timer(block, HZ/2);
s390/block/dasd.c:			dasd_device_set_timer(device, 5*HZ);
s390/block/dasd.c:				"remaining\n", cqr, (cqr->expires/HZ),
s390/block/dasd_diag.c:	cqr->expires = memdev->default_expires * HZ;
s390/block/dasd_eckd.c:	cqr->expires = 10*HZ;
s390/block/dasd_eckd.c:	cqr->expires = 10*HZ;
s390/block/dasd_eckd.c:	cqr->expires = 10 * HZ;
s390/block/dasd_eckd.c:	cqr->expires = 10 * HZ;
s390/block/dasd_eckd.c:	cqr->expires = 10 * HZ;
s390/block/dasd_eckd.c:	cqr->expires = 10 * HZ;
s390/block/dasd_eckd.c:	cqr->expires = 2 * HZ;
s390/block/dasd_eckd.c:	cqr->expires = 2 * HZ;
s390/block/dasd_eckd.c:	cqr->expires = 2 * HZ;
s390/block/dasd_eckd.c:	cqr->expires = startdev->default_expires * HZ;
s390/block/dasd_eckd.c:	cqr->expires = startdev->default_expires * HZ;	/* default 5 minutes */
s390/block/dasd_eckd.c:	cqr->expires = startdev->default_expires * HZ;	/* default 5 minutes */
s390/block/dasd_eckd.c:	cqr->expires = startdev->default_expires * HZ;	/* default 5 minutes */
s390/block/dasd_eckd.c:	init_cqr->expires = 5*HZ;
s390/block/dasd_eer.c:	cqr->expires = 10 * HZ;
s390/block/dasd_fba.c:	cqr->expires = memdev->default_expires * HZ;	/* default 5 minutes */
s390/char/con3215.c:#define RAW3215_TIMEOUT	    HZ/10     /* time for delayed output */
s390/char/con3270.c:		con3270_set_timer(cp, HZ/10);
s390/char/sclp_con.c:		sclp_con_timer.expires = jiffies + HZ/10;
s390/char/sclp.c:	return (u64) (jiffies / HZ) << 32;
s390/char/sclp.c:			__sclp_set_request_timer(SCLP_BUSY_INTERVAL * HZ,
s390/char/sclp.c:		__sclp_set_request_timer(SCLP_BUSY_INTERVAL * HZ,
s390/char/sclp.c:		__sclp_set_request_timer(SCLP_BUSY_INTERVAL * HZ,
s390/char/sclp.c:		__sclp_set_request_timer(SCLP_RETRY_INTERVAL * HZ,
s390/char/sclp.c:		__sclp_set_request_timer(SCLP_RETRY_INTERVAL * HZ,
s390/char/sclp.c:			wait = jiffies + SCLP_BUSY_INTERVAL * HZ;
s390/char/sclp_tty.c:		sclp_tty_timer.expires = jiffies + HZ/10;
s390/char/sclp_vt220.c:#define BUFFER_MAX_DELAY	HZ/20
s390/char/tape_core.c:				LONG_BUSY_TIMEOUT * HZ;
s390/char/tape_core.c:		schedule_delayed_work(&device->tape_dnr, HZ);
s390/char/tape_std.c:	timeout.expires  = jiffies + 2 * HZ;
s390/char/tty3270.c:		tty3270_set_timer(tp, HZ/10);
s390/cio/ccwreq.c:				   dev_name(&cdev->dev), req->timeout / HZ,
s390/cio/chp.c:#define CHP_INFO_UPDATE_INTERVAL	1*HZ
s390/cio/device.c:			ccw_device_set_timeout(cdev, HZ/10);
s390/cio/device.c:#include <asm/param.h>		/* HZ */
s390/cio/device.c:		mod_timer(&recovery_timer, jiffies + recovery_delay[0] * HZ);
s390/cio/device.c:				  recovery_delay[recovery_phase] * HZ);
s390/cio/device_fsm.c:		ccw_device_set_timeout(cdev, 3*HZ);
s390/cio/device_fsm.c:		ccw_device_set_timeout(cdev, 3*HZ);
s390/cio/device_fsm.c:		ccw_device_set_timeout(cdev, 3*HZ);
s390/cio/device_fsm.c:		ccw_device_set_timeout(cdev, HZ/10);
s390/cio/device_id.c:#define SENSE_ID_TIMEOUT	(10 * HZ)
s390/cio/device_pgid.c:#define PGID_TIMEOUT	(10 * HZ)
s390/cio/qdio_main.c:		10 * HZ);
s390/cio/qdio_main.c:		irq_ptr->state == QDIO_IRQ_STATE_ERR, HZ);
s390/cio/qdio_main.c:			mod_timer(&q->u.out.timer, jiffies + 10 * HZ);
s390/cio/qdio_main.c:			mod_timer(&q->u.out.timer, jiffies + HZ);
s390/crypto/ap_bus.c:		ap_config_timer.expires = jiffies + ap_config_time * HZ;
s390/crypto/ap_bus.c:		ap_config_timer.expires = jiffies + ap_config_time * HZ;
s390/crypto/ap_bus.c:	ap_config_timer.expires = jiffies + ap_config_time * HZ;
s390/crypto/ap_bus.c:	ap_config_timer.expires = jiffies + ap_config_time * HZ;
s390/crypto/ap_bus.c:	    !mod_timer(&ap_config_timer, jiffies + ap_config_time * HZ)) {
s390/crypto/ap_bus.h:#define AP_RESET_TIMEOUT (HZ/2)	/* Time in ticks for reset timeouts. */
s390/crypto/zcrypt_cex2a.c:#define CEX2A_CLEANUP_TIME	(15*HZ)
s390/crypto/zcrypt_pcica.c:#define PCICA_CLEANUP_TIME	(15*HZ)
s390/crypto/zcrypt_pcicc.c:#define PCICC_CLEANUP_TIME	(15*HZ)
s390/crypto/zcrypt_pcixcc.c:#define PCIXCC_CLEANUP_TIME	(15*HZ)
s390/crypto/zcrypt_pcixcc.c:	for (i = 0; i < 2 * HZ; i++) {
s390/crypto/zcrypt_pcixcc.c:	if (i >= 2 * HZ) {
s390/crypto/zcrypt_pcixcc.c:		msleep(1000 / HZ);
s390/net/claw.c:				p_ch->timer.expires = jiffies + 10*HZ;
s390/net/claw.c:                timer.expires = jiffies + 15*HZ;
s390/net/fsm.c:	this->tl.expires = jiffies + (millisec * HZ) / 1000;
s390/net/fsm.c:	this->tl.expires = jiffies + (millisec * HZ) / 1000;
s390/net/lcs.c:	timer.expires = jiffies + HZ*card->lancmd_timeout;
s390/net/qeth_core.h:#define QETH_RCD_TIMEOUT	60 * HZ
s390/net/qeth_core.h:#define QETH_RECLAIM_WORK_TIME	HZ
s390/net/qeth_core.h:#define QETH_TX_TIMEOUT		100 * HZ
s390/net/qeth_core_mpc.h:#define QETH_IPA_TIMEOUT	(45 * HZ)
s390/net/qeth_core_mpc.h:#define QETH_TIMEOUT		(10 * HZ)
s390/scsi/zfcp_def.h:#define ZFCP_FSF_REQUEST_TIMEOUT (60*HZ)
s390/scsi/zfcp_def.h:#define ZFCP_SCSI_ER_TIMEOUT                    (10*HZ)
s390/scsi/zfcp_erp.c:	erp_action->timer.expires = jiffies + HZ;
s390/scsi/zfcp_fc.c:	return zfcp_fsf_send_els(adapter, d_id, els, job->req->timeout / HZ);
s390/scsi/zfcp_fc.c:	ret = zfcp_fsf_send_ct(wka_port, ct, NULL, job->req->timeout / HZ);
s390/scsi/zfcp_fc.c:	schedule_delayed_work(&wka_port->work, HZ / 100);
s390/scsi/zfcp_fsf.c:	fsf_req->timer.expires = jiffies + 30 * HZ;
s390/scsi/zfcp_fsf.c:	zfcp_fsf_start_timer(req, (timeout + 10) * HZ);
s390/scsi/zfcp_qdio.c:		       zfcp_qdio_sbal_check(qdio), qdio->req_q_lock, 5 * HZ);
s390/scsi/zfcp_scsi.c:		adapter->stats_reset = jiffies/HZ;
s390/scsi/zfcp_scsi.c:	    ((jiffies/HZ - adapter->stats_reset) <
samsung/fm_si4709/propertydefs.h:#define AM_CHANNEL_FILTER_BW_2KHZ 3
samsung/fm_si4709/propertydefs.h:#define AM_CHANNEL_FILTER_BW_3KHZ 2
samsung/fm_si4709/propertydefs.h:#define AM_CHANNEL_FILTER_BW_4KHZ 1
samsung/fm_si4709/propertydefs.h:#define AM_CHANNEL_FILTER_BW_6KHZ 0
samsung/fm_si47xx/propertydefs.h:#define AM_CHANNEL_FILTER_BW_2KHZ 3
samsung/fm_si47xx/propertydefs.h:#define AM_CHANNEL_FILTER_BW_3KHZ 2
samsung/fm_si47xx/propertydefs.h:#define AM_CHANNEL_FILTER_BW_4KHZ 1
samsung/fm_si47xx/propertydefs.h:#define AM_CHANNEL_FILTER_BW_6KHZ 0
sbus/char/bbc_envctrl.c:#define WARN_INTERVAL	(30 * HZ)
scsi/3w-9xxx.c:	blk_queue_rq_timeout(sdev->request_queue, 60 * HZ);
scsi/3w-9xxx.c:			if (time_after(jiffies, before + HZ * 30))
scsi/3w-9xxx.c:		if (time_after(jiffies, before + HZ * seconds))
scsi/3w-9xxx.c:		if (time_after(jiffies, before + HZ * seconds))
scsi/3w-9xxx.c:		timeout = TW_IOCTL_CHRDEV_TIMEOUT*HZ;
scsi/3w-9xxx.h:#define TW_IOCTL_WAIT_TIME                    (1 * HZ) /* 1 second */
scsi/3w-sas.c:	blk_queue_rq_timeout(sdev->request_queue, 60 * HZ);
scsi/3w-sas.c:		if (time_after(jiffies, before + HZ * seconds))
scsi/3w-sas.c:		if (time_after(jiffies, before + HZ * seconds))
scsi/3w-sas.c:		timeout = TW_IOCTL_CHRDEV_TIMEOUT*HZ;
scsi/3w-xxxx.c:	blk_queue_rq_timeout(sdev->request_queue, 60 * HZ);
scsi/3w-xxxx.c:		if (time_after(jiffies, before + HZ * seconds))
scsi/3w-xxxx.c:		if (time_after(jiffies, before + HZ * seconds))
scsi/3w-xxxx.c:			timeout = TW_IOCTL_CHRDEV_TIMEOUT*HZ;
scsi/3w-xxxx.h:#define TW_IOCTL_WAIT_TIME                    (1 * HZ) /* 1 second */
scsi/aacraid/aachba.c:	timeout = cmd->request->timeout/HZ;
scsi/aacraid/commctrl.c:		fibctx->jiffies = jiffies/HZ;
scsi/aacraid/commctrl.c:	fibctx->jiffies = jiffies/HZ;
scsi/aacraid/commsup.c:			 * but jiffies / HZ, so do not
scsi/aacraid/commsup.c:						 * but jiffies / HZ so do not
scsi/aacraid/commsup.c:#define AIF_SNIFF_TIMEOUT	(30*HZ)
scsi/aacraid/commsup.c:				difference = (((1000000 - now.tv_usec) * HZ)
scsi/aacraid/commsup.c:				difference = 10 * HZ;
scsi/aacraid/commsup.c:				difference = (long)(unsigned)update_interval*HZ;
scsi/aacraid/commsup.c:					   * HZ;
scsi/aacraid/commsup.c:					   * HZ;
scsi/aacraid/commsup.c:			if (((1000000 - (1000000 / HZ)) > now.tv_usec)
scsi/aacraid/commsup.c:	long difference = HZ;
scsi/aacraid/commsup.c:			 && (now.tv_usec > (1000000 / HZ)))
scsi/aacraid/commsup.c:				time_now = jiffies/HZ;
scsi/aacraid/commsup.c:	time_now = jiffies/HZ;
scsi/aacraid/commsup.c:	unsigned long next_jiffies = jiffies + HZ;
scsi/aacraid/linit.c:			blk_queue_rq_timeout(sdev->request_queue, 45*HZ);
scsi/aacraid/linit.c:		if (sdev->request_queue->rq_timeout < (45 * HZ))
scsi/aacraid/rx.c:		  time_after(jiffies, start + HZ *
scsi/aacraid/rx.c:		  time_after(jiffies, start+HZ*startup_timeout)) {
scsi/aacraid/rx.c:	while (time_before(jiffies, start+30*HZ))
scsi/aacraid/sa.c:		if (time_after(jiffies, start+startup_timeout*HZ)) {
scsi/aacraid/sa.c:	while(time_before(jiffies, start+30*HZ))
scsi/aacraid/src.c:		  time_after(jiffies, start + HZ *
scsi/aacraid/src.c:		  time_after(jiffies, start + HZ *
scsi/aacraid/src.c:		  time_after(jiffies, start+HZ*startup_timeout)) {
scsi/aacraid/src.c:		  time_after(jiffies, start+HZ*startup_timeout)) {
scsi/aacraid/src.c:		while (time_before(jiffies, start+300*HZ)) {
scsi/advansys.c:#define CIW_SEL_33MHZ    (ASC_CS_TYPE)0x0800
scsi/advansys.c:#define CSW_33MHZ_SELECTED    (ASC_CS_TYPE)0x0800
scsi/aha152x.c:			the_time=jiffies + 100*HZ;
scsi/aha152x.c:		the_time=jiffies + 100*HZ;
scsi/aha152x.c:		the_time=jiffies + 100*HZ;
scsi/aha152x.c:	timeleft = wait_for_completion_timeout(&done, 100*HZ);
scsi/aic7xxx/aic79xx_core.c:	timer->expires = jiffies + (usec * HZ)/1000000;
scsi/aic7xxx/aic79xx_osm.c:		if (!wait_for_completion_timeout(&done, 5 * HZ)) {
scsi/aic7xxx/aic79xx_osm.c:	if (!wait_for_completion_timeout(&done, 5 * HZ)) {
scsi/aic7xxx/aic7xxx_osm.c:		if (!wait_for_completion_timeout(&done, 5 * HZ)) {
scsi/aic94xx/aic94xx.h:#define AIC94XX_SCB_TIMEOUT  (5*HZ)
scsi/aic94xx/aic94xx_init.c:	if (time < HZ)
scsi/arcmsr/arcmsr_hba.c:	acb->eternal_timer.expires = jiffies + msecs_to_jiffies(6 * HZ);
scsi/arcmsr/arcmsr_hba.c:				mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6*HZ));
scsi/arcmsr/arcmsr_hba.c:				mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6*HZ));
scsi/arcmsr/arcmsr_hba.c:				mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:				mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:				mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:			mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:			mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:			mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:		mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:		mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:		mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:		mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:		mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:		mod_timer(&acb->eternal_timer, jiffies + msecs_to_jiffies(6 * HZ));
scsi/arcmsr/arcmsr_hba.c:				timeout = wait_event_timeout(wait_q, (acb->acb_flags & ACB_F_BUS_RESET) == 0, 220*HZ);
scsi/arcmsr/arcmsr_hba.c:				timeout = wait_event_timeout(wait_q, (acb->acb_flags & ACB_F_BUS_RESET) == 0, 220*HZ);
scsi/arm/acornscsi.c:    target_jiffies = jiffies + 1 + cs * HZ / 100;
scsi/arm/fas216.c:		mod_timer(&info->eh_timer, jiffies + 30 * HZ);
scsi/arm/fas216.c:	mod_timer(&info->eh_timer, jiffies + HZ);
scsi/arm/fas216.h:#define CLKF_F10MHZ		0x02				/* 10 MHz			*/
scsi/arm/fas216.h:#define CLKF_F12MHZ		0x03				/* 10.01 - 15 MHz		*/
scsi/arm/fas216.h:#define CLKF_F17MHZ		0x04				/* 15.01 - 20 MHz		*/
scsi/arm/fas216.h:#define CLKF_F22MHZ		0x05				/* 20.01 - 25 MHz		*/
scsi/arm/fas216.h:#define CLKF_F27MHZ		0x06				/* 25.01 - 30 MHz		*/
scsi/arm/fas216.h:#define CLKF_F32MHZ		0x07				/* 30.01 - 35 MHz		*/
scsi/arm/fas216.h:#define CLKF_F37MHZ		0x00				/* 35.01 - 40 MHz		*/
scsi/atari_scsi.c:#define	AFTER_RESET_DELAY	(5*HZ/2)
scsi/atari_scsi.c:#define	AFTER_RESET_DELAY	(HZ/2)
scsi/bfa/bfad_drv.h:#define SCSI_SCAN_DELAY		HZ
scsi/bfa/bfad_im.c:		BFA_QUEUE_FULL_RAMP_UP_TIME * HZ) &&
scsi/bfa/bfad_im.c:		BFA_QUEUE_FULL_RAMP_UP_TIME * HZ)) {
scsi/bfa/bfad_im.c:		if (timeout < 4 * HZ)
scsi/bfa/bfad_im.c:		schedule_timeout(HZ);
scsi/bfa/bfad_im.c:			schedule_timeout(HZ);
scsi/bfa/bfad_im.c:			schedule_timeout(rport_delay * HZ);
scsi/bfa/bfa_fcpim.c:#define bfa_io_lat_clock_res_div	HZ
scsi/bfa/bfi_reg.h:	__APP_PLL_LCLK_FBCNT_425_MHZ = 6,
scsi/bfa/bfi_reg.h:	__APP_PLL_LCLK_FBCNT_468_MHZ = 4,
scsi/bfa/bfi_reg.h:#define __APP_PLL_LCLK_SRAM_USE_100MHZ	0x00100000
scsi/bnx2fc/bnx2fc_els.c:		if (time_after(jiffies, start + (10 * HZ))) {
scsi/bnx2fc/bnx2fc_fcoe.c:#define BNX2FC_INIT_POLL_TIME		(1000 / HZ)
scsi/bnx2fc/bnx2fc_fcoe.c:	int i = HZ;
scsi/bnx2fc/bnx2fc_fcoe.c:	rc = wait_for_completion_timeout(&hba->stat_req_done, (2 * HZ));
scsi/bnx2fc/bnx2fc.h:#define BNX2FC_FW_TIMEOUT		(3 * HZ)
scsi/bnx2fc/bnx2fc_io.c:					 BNX2FC_TM_TIMEOUT * HZ);
scsi/bnx2fc/bnx2fc_io.c:		if (time_after(jiffies, start + HZ)) {
scsi/bnx2i/bnx2i_init.c:					 2 * HZ);
scsi/bnx2i/bnx2i_init.c:#define BNX2I_INIT_POLL_TIME	(1000 / HZ)
scsi/bnx2i/bnx2i_init.c:	int i = HZ;
scsi/bnx2i/bnx2i_init.c:	int wait_delay = 1 * HZ;
scsi/bnx2i/bnx2i_iscsi.c:	bnx2i_conn->ep->ofld_timer.expires = 1 * HZ + jiffies;
scsi/bnx2i/bnx2i_iscsi.c:	bnx2i_ep->ofld_timer.expires = 2 * HZ + jiffies;
scsi/bnx2i/bnx2i_iscsi.c:		hba->conn_ctx_destroy_tmo = 2 * HZ;
scsi/bnx2i/bnx2i_iscsi.c:		hba->conn_ctx_destroy_tmo = 6 * HZ;
scsi/bnx2i/bnx2i_iscsi.c:		hba->conn_teardown_tmo = 10 * HZ;
scsi/bnx2i/bnx2i_iscsi.c:		hba->conn_teardown_tmo = 20 * HZ;
scsi/bnx2i/bnx2i_iscsi.c:		hba->hba_shutdown_tmo = 20 * HZ;
scsi/bnx2i/bnx2i_iscsi.c:		hba->hba_shutdown_tmo = 30 * HZ;
scsi/bnx2i/bnx2i_iscsi.c:		!time_after(jiffies, bnx2i_ep->timestamp + (12 * HZ)))
scsi/BusLogic.c:		else if (time_after(jiffies, HostAdapter->LastSequencePoint[TargetID] + 4 * HZ)) {
scsi/ch.c:				  buflength, &sshdr, timeout * HZ,
scsi/cxgbi/cxgb3i/cxgb3i.c:		mod_timer(&csk->retry_timer, jiffies + HZ / 2);
scsi/cxgbi/cxgb4i/cxgb4i.c:		mod_timer(&csk->retry_timer, jiffies + HZ / 2);
scsi/dc395x.c:		    acb->scsi_host->last_reset - HZ / 2 + 1;
scsi/dc395x.c:		    acb->scsi_host->last_reset + HZ / 2 + 1;
scsi/dc395x.c:		acb->scsi_host->last_reset = jiffies + HZ / 2 + 1;
scsi/dc395x.c:		acb->selto_timer.expires = jiffies + HZ + 1;
scsi/dc395x.c:	    HZ * acb->eeprom.delay_time;
scsi/dc395x.c:	    HZ * acb->eeprom.delay_time;
scsi/dc395x.c:		    HZ * acb->eeprom.delay_time;
scsi/dc395x.c:		    HZ * acb->eeprom.delay_time;
scsi/dc395x.c:	if (time_before(jiffies, acb->scsi_host->last_reset - HZ / 2)) {
scsi/dc395x.c:	if (time_before(jiffies + to, acb->scsi_host->last_reset - HZ / 2))
scsi/dc395x.c:	    jiffies + 3 * HZ / 2 +
scsi/dc395x.c:	    jiffies + 5 * HZ / 2 +
scsi/dc395x.c:		    jiffies + HZ / 2 +
scsi/dc395x.c:		    jiffies + HZ / 2 +
scsi/dc395x.c:	    (jiffies + HZ, acb->scsi_host->last_reset + HZ / 2))
scsi/dc395x.c:		waiting_set_timer(acb, HZ / 100);
scsi/dc395x.c:				waiting_set_timer(acb, HZ / 20);
scsi/dc395x.c:			waiting_set_timer(acb, HZ / 20);
scsi/dc395x.c:			waiting_set_timer(acb, HZ / 20);
scsi/dc395x.c:				waiting_set_timer(acb, HZ/50);
scsi/dc395x.c:		waiting_set_timer(acb, HZ / 50);
scsi/device_handler/scsi_dh_alua.c:#define ALUA_FAILOVER_TIMEOUT		(60 * HZ)
scsi/device_handler/scsi_dh_emc.c:#define CLARIION_TIMEOUT		(60 * HZ)
scsi/device_handler/scsi_dh_hp_sw.c:#define HP_SW_TIMEOUT			(60 * HZ)
scsi/device_handler/scsi_dh_rdac.c:#define RDAC_TIMEOUT	(60 * HZ)
scsi/dpt_i2o.c:	timeout *= HZ;
scsi/dpt_i2o.c:		timeout = jiffies + (25*HZ);
scsi/dpt_i2o.c:	timeout = jiffies+TMOUT_GETSTATUS*HZ;
scsi/dpt_i2o.c:	ulong timeout = jiffies + 30*HZ;
scsi/dpt_i2o.c:	ulong timeout = jiffies + 5*HZ;
scsi/dpt_i2o.c:	ulong timeout = jiffies + TMOUT_INITOUTBOUND*HZ;
scsi/dpt_i2o.c:	ulong timeout = jiffies + (TMOUT_IOPRESET*HZ);
scsi/eata.c:	while ((jiffies - time) < (10 * HZ) && limit++ < 200000)
scsi/eata_pio.c:	unsigned long loop = HZ / 2;
scsi/esp_scsi.c:	esp->ccycle = ESP_HZ_TO_CYCLE(fhz);
scsi/esp_scsi.c:	if (!wait_for_completion_timeout(&eh_done, 5 * HZ)) {
scsi/esp_scsi.c:	if (!wait_for_completion_timeout(&eh_reset, 5 * HZ)) {
scsi/esp_scsi.c:	/* If we can't find anything reasonable, just assume 20MHZ.
scsi/esp_scsi.h:#define ESP_HZ_TO_CYCLE(hertz)  ((1000000000) / ((hertz) / 1000))
scsi/fcoe/fcoe_sysfs.c:					   timeout * HZ);
scsi/FlashPoint.c:	curr_phz = RD_HARPOON(p_port + hp_scsisig) & (unsigned char)S_SCSI_PHZ;
scsi/FlashPoint.c:#define  CLK_40MHZ         (BIT(1) + BIT(0))
scsi/FlashPoint.c:#define  CLKCTRL_DEFAULT   (ACTdeassert | CLK_40MHZ)
scsi/FlashPoint.c:#define  S_SCSI_PHZ        (BIT(2)+BIT(1)+BIT(0))
scsi/FlashPoint.c:			if ((RD_HARPOON(port + hp_scsisig) & S_SCSI_PHZ) !=
scsi/FlashPoint.c:		if ((RD_HARPOON(port + hp_scsisig) & S_SCSI_PHZ) == S_MSGI_PH) {
scsi/FlashPoint.c:	if ((RD_HARPOON(port + hp_scsisig) & S_SCSI_PHZ) == S_MSGO_PH) {
scsi/FlashPoint.c:		(RD_HARPOON(p_port + hp_scsisig) & (unsigned char)S_SCSI_PHZ)))
scsi/FlashPoint.c:	sPhase = RD_HARPOON(port + hp_scsisig) & (SCSI_BSY | S_SCSI_PHZ);
scsi/FlashPoint.c:	    (unsigned char)(RD_HARPOON(p_port + hp_scsisig) & S_SCSI_PHZ);
scsi/FlashPoint.c:	WRW_HARPOON(map_addr, (CPE_OP + ADATA_IN + DINT));	/*JUMP IF NOT DATA IN PHZ */
scsi/FlashPoint.c:	WRW_HARPOON(map_addr, (CPN_OP + AMSG_IN + CC));	/*ERROR IF NOT MSG IN PHZ */
scsi/FlashPoint.c:	WRW_HARPOON(map_addr, (CPN_OP + ASTATUS + UNKNWN));	/*JUMP IF NOT STATUS PHZ. */
scsi/fnic/fnic_main.c:#define FNIC_NOTIFY_TIMER_PERIOD	(2 * HZ)
scsi/fnic/fnic_main.c:	if (time_before(jiffies, fnic->stats_time + HZ / FNIC_STATS_RATE_LIMIT))
scsi/fnic/fnic_main.c:		schedule_timeout_uninterruptible(HZ / 10);
scsi/fnic/fnic_main.c:	stats->seconds_since_last_reset = (jiffies - lp->boot_time) / HZ;
scsi/fnic/fnic_main.c:	time = jiffies + (HZ * 2);
scsi/fnic/fnic_scsi.c:		wait_host_tmo = jiffies + FNIC_HOST_RESET_SETTLE_TIME * HZ;
scsi/gdth.c:    gdth_timer.expires = jiffies + 30 * HZ;
scsi/gdth.c:	gdth_timer.expires = jiffies + HZ;
scsi/g_NCR5380.c:		long tr = hostdata->time_read[dev->id] / HZ;
scsi/g_NCR5380.c:		long tw = hostdata->time_write[dev->id] / HZ;
scsi/hpsa.c:#define HEARTBEAT_SAMPLE_INTERVAL (30 * HZ)
scsi/hpsa.c:#define HEARTBEAT_SAMPLE_INTERVAL_DURING_FLASH (240 * HZ)
scsi/hpsa.h:	((HPSA_BOARD_READY_POLL_INTERVAL_MSECS * HZ) / 1000)
scsi/hptiop.c:			atomic_read(&hba->resetting) == 0, 60 * HZ);
scsi/ibmvscsi/ibmvfc.c:		evt->timer.expires = jiffies + (timeout * HZ);
scsi/ibmvscsi/ibmvfc.c:	if (time >= (init_timeout * HZ)) {
scsi/ibmvscsi/ibmvfc.c:					  (init_timeout * HZ));
scsi/ibmvscsi/ibmvfc.c:		mod_timer(&tgt->timer, jiffies + (IBMVFC_ADISC_TIMEOUT * HZ));
scsi/ibmvscsi/ibmvfc.c:	signed long timeout = IBMVFC_ABORT_WAIT_TIMEOUT * HZ;
scsi/ibmvscsi/ibmvfc.c:		tgt->timer.expires = jiffies + (IBMVFC_ADISC_TIMEOUT * HZ);
scsi/ibmvscsi/ibmvscsi.c:		blk_queue_rq_timeout(sdev->request_queue, 120 * HZ);
scsi/ibmvscsi/ibmvscsi.c:			  cmnd->request->timeout/HZ);
scsi/ibmvscsi/ibmvscsi.c:		evt_struct->timer.expires = jiffies + (timeout * HZ);
scsi/ibmvscsi/ibmvscsi.c:		for (wait_switch = jiffies + (init_timeout * HZ);
scsi/ibmvscsi/ibmvscsi.c:	for (wait_switch = jiffies + (init_timeout * HZ);
scsi/ibmvscsi/ibmvscsi.c:	wait_switch = jiffies + (init_timeout * HZ);
scsi/ibmvscsi/ibmvscsi.c:	wait_switch = jiffies + (init_timeout * HZ);
scsi/imm.c:		if (time_after(jiffies, dev->jstart + HZ)) {
scsi/imm.c:		schedule_timeout(3 * HZ);
scsi/initio.c: *		- Changed the assumption that HZ = 100
scsi/initio.c:	initio_do_pause(seconds * HZ);
scsi/ipr.c:	cmd_pkt->timeout = cpu_to_be16(IPR_REQUEST_SENSE_TIMEOUT / HZ);
scsi/ipr.c:	ipr_cmd->timer.expires = jiffies + (ioa_cfg->transop_timeout * HZ);
scsi/ipr.c:	ipr_cmd->timer.expires = jiffies + stage_time * HZ;
scsi/ipr.c:	wait_event_timeout(ioa_cfg->msi_wait_q, ioa_cfg->msi_received, HZ);
scsi/ipr.h:#define IPR_ABBREV_SHUTDOWN_TIMEOUT		(10 * HZ)
scsi/ipr.h:#define IPR_ABORT_TASK_TIMEOUT		(ipr_fastfail ? 10 * HZ : 30 * HZ)
scsi/ipr.h:#define IPR_CANCEL_ALL_TIMEOUT		(ipr_fastfail ? 10 * HZ : 30 * HZ)
scsi/ipr.h:#define IPR_CHECK_FOR_RESET_TIMEOUT		(HZ / 10)
scsi/ipr.h:#define IPR_DEVICE_RESET_TIMEOUT		(ipr_fastfail ? 10 * HZ : 30 * HZ)
scsi/ipr.h:#define IPR_DUAL_IOA_ABBR_SHUTDOWN_TO	(2 * 60 * HZ)
scsi/ipr.h:#define IPR_DUMP_DELAY_TIMEOUT			(IPR_DUMP_DELAY_SECONDS * HZ)
scsi/ipr.h:#define IPR_INTERNAL_TIMEOUT			(ipr_fastfail ? 10 * HZ : 30 * HZ)
scsi/ipr.h:#define IPR_PCI_RESET_TIMEOUT			(HZ / 2)
scsi/ipr.h:#define IPR_REQUEST_SENSE_TIMEOUT		(10 * HZ)
scsi/ipr.h:#define IPR_SET_SUP_DEVICE_TIMEOUT		(2 * 60 * HZ)
scsi/ipr.h:#define IPR_SHUTDOWN_TIMEOUT			(ipr_fastfail ? 60 * HZ : 10 * 60 * HZ)
scsi/ipr.h:#define IPR_SIS32_DUMP_TIMEOUT			(15 * HZ)
scsi/ipr.h:#define IPR_SIS64_DUMP_TIMEOUT			(40 * HZ)
scsi/ipr.h:#define IPR_VSET_RW_TIMEOUT			(ipr_fastfail ? 30 * HZ : 2 * 60 * HZ)
scsi/ipr.h:#define IPR_WAIT_FOR_BIST_TIMEOUT		(2 * HZ)
scsi/ipr.h:#define IPR_WAIT_FOR_RESET_TIMEOUT		(2 * HZ)
scsi/ipr.h:#define IPR_WRITE_BUFFER_TIMEOUT		(30 * 60 * HZ)
scsi/ips.c:				else if (TimeOut < (1200 * HZ))
scsi/ips.c:				else if (TimeOut < (1200 * HZ))
scsi/ips.c:				else if (TimeOut < (60 * HZ))
scsi/ips.c:				else if (TimeOut < (60 * HZ))
scsi/ips.c:				if (TimeOut < (10 * HZ))
scsi/ips.c:				if (TimeOut < (10 * HZ))
scsi/iscsi_tcp.c:	sk->sk_sndtimeo = 15 * HZ; /* FIXME: make it configurable */
scsi/libfc/fc_fcp.c:#define FC_CAN_QUEUE_PERIOD	(60 * HZ)
scsi/libfc/fc_fcp.c:#define FC_HOST_RESET_TIMEOUT	(30 * HZ)
scsi/libfc/fc_fcp.c:#define FC_SCSI_TM_TOV		(10 * HZ)
scsi/libfc/fc_fcp.c:	return msecs_to_jiffies(rpriv->e_d_tov) + HZ;
scsi/libiscsi.c:			   (conn->ping_timeout * HZ), jiffies))
scsi/libiscsi.c:	conn->tmf_timer.expires = timeout * HZ + jiffies;
scsi/libiscsi.c:			  jiffies + (conn->recv_timeout * HZ));
scsi/libiscsi.c:		next_timeout = conn->last_ping + (conn->ping_timeout * HZ);
scsi/libiscsi.c:	recv_timeout *= HZ;
scsi/libiscsi.c:	    time_before_eq(conn->last_recv + (conn->recv_timeout * HZ) +
scsi/libsas/sas_expander.c:			schedule_timeout_interruptible(5*HZ);
scsi/libsas/sas_expander.c:		task->timer.expires = jiffies + SMP_TIMEOUT*HZ;
scsi/lpfc/lpfc_attr.c:		case LPFC_LINK_SPEED_10GHZ:
scsi/lpfc/lpfc_attr.c:		case LPFC_LINK_SPEED_16GHZ:
scsi/lpfc/lpfc_attr.c:		case LPFC_LINK_SPEED_1GHZ:
scsi/lpfc/lpfc_attr.c:		case LPFC_LINK_SPEED_2GHZ:
scsi/lpfc/lpfc_attr.c:		case LPFC_LINK_SPEED_4GHZ:
scsi/lpfc/lpfc_attr.c:		case LPFC_LINK_SPEED_8GHZ:
scsi/lpfc/lpfc_bsg.c:		((phba->fc_ratov * 2) + LPFC_DRVR_TIMEOUT) * HZ);
scsi/lpfc/lpfc_bsg.c:		((phba->fc_ratov * 2) + LPFC_DRVR_TIMEOUT) * HZ);
scsi/lpfc/lpfc_ct.c:			case LPFC_LINK_SPEED_10GHZ:
scsi/lpfc/lpfc_ct.c:			case LPFC_LINK_SPEED_16GHZ:
scsi/lpfc/lpfc_ct.c:			case LPFC_LINK_SPEED_1GHZ:
scsi/lpfc/lpfc_ct.c:			case LPFC_LINK_SPEED_2GHZ:
scsi/lpfc/lpfc_ct.c:			case LPFC_LINK_SPEED_4GHZ:
scsi/lpfc/lpfc_ct.c:			case LPFC_LINK_SPEED_8GHZ:
scsi/lpfc/lpfc_ct.c:			mod_timer(&vport->fc_fdmitmo, jiffies + HZ * 60);
scsi/lpfc/lpfc_els.c:			jiffies + HZ * phba->fc_ratov);
scsi/lpfc/lpfc_els.c:	mod_timer(&ndlp->nlp_delayfunc, jiffies + HZ);
scsi/lpfc/lpfc_els.c:		mod_timer(&phba->fabric_block_timer, jiffies + HZ/10 );
scsi/lpfc/lpfc_els.c:		mod_timer(&vport->els_tmofunc, jiffies + HZ * timeout);
scsi/lpfc/lpfc_hbadisc.c:	case LPFC_LINK_SPEED_10GHZ:
scsi/lpfc/lpfc_hbadisc.c:	case LPFC_LINK_SPEED_16GHZ:
scsi/lpfc/lpfc_hbadisc.c:	case LPFC_LINK_SPEED_1GHZ:
scsi/lpfc/lpfc_hbadisc.c:	case LPFC_LINK_SPEED_2GHZ:
scsi/lpfc/lpfc_hbadisc.c:	case LPFC_LINK_SPEED_4GHZ:
scsi/lpfc/lpfc_hbadisc.c:	case LPFC_LINK_SPEED_8GHZ:
scsi/lpfc/lpfc_hbadisc.c:	mod_timer(&vport->fc_disctmo, jiffies + HZ * tmo);
scsi/lpfc/lpfc_hbadisc.c:		mod_timer(&vport->fc_fdmitmo, jiffies + HZ * 60);
scsi/lpfc/lpfc.h:#define QUEUE_RAMP_DOWN_INTERVAL	(1 * HZ)   /* 1 Second */
scsi/lpfc/lpfc.h:#define QUEUE_RAMP_UP_INTERVAL		(300 * HZ) /* 5 minutes */
scsi/lpfc/lpfc_hw.h:#define LPFC_LINK_SPEED_10GHZ	0x40
scsi/lpfc/lpfc_hw.h:#define LPFC_LINK_SPEED_16GHZ	0x80
scsi/lpfc/lpfc_hw.h:#define LPFC_LINK_SPEED_1GHZ	0x04
scsi/lpfc/lpfc_hw.h:#define LPFC_LINK_SPEED_2GHZ	0x08
scsi/lpfc/lpfc_hw.h:#define LPFC_LINK_SPEED_4GHZ	0x10
scsi/lpfc/lpfc_hw.h:#define LPFC_LINK_SPEED_8GHZ	0x20
scsi/lpfc/lpfc_init.c:						 HZ * LPFC_HB_MBOX_INTERVAL);
scsi/lpfc/lpfc_init.c:						HZ * LPFC_HB_MBOX_INTERVAL);
scsi/lpfc/lpfc_init.c:	if (time >= 15 * HZ && phba->link_state <= LPFC_LINK_DOWN) {
scsi/lpfc/lpfc_init.c:	if (time >= 30 * HZ) {
scsi/lpfc/lpfc_init.c:	if (time_after(phba->last_completion_time + LPFC_HB_MBOX_INTERVAL * HZ,
scsi/lpfc/lpfc_init.c:	if (vport->fc_map_cnt == 0 && time < 2 * HZ)
scsi/lpfc/lpfc_init.c:				jiffies + HZ * LPFC_HB_MBOX_INTERVAL);
scsi/lpfc/lpfc_init.c:			jiffies + HZ * LPFC_HB_MBOX_INTERVAL);
scsi/lpfc/lpfc_init.c:				  jiffies + HZ * LPFC_HB_MBOX_TIMEOUT);
scsi/lpfc/lpfc_init.c:				  jiffies + HZ * LPFC_HB_MBOX_TIMEOUT);
scsi/lpfc/lpfc_init.c:				jiffies + HZ * LPFC_HB_MBOX_TIMEOUT);
scsi/lpfc/lpfc_init.c:		link_speed = LPFC_LINK_SPEED_10GHZ;
scsi/lpfc/lpfc_init.c:		link_speed = LPFC_LINK_SPEED_1GHZ;
scsi/lpfc/lpfc_init.c:			mod_timer(&ndlp->nlp_delayfunc, jiffies + HZ);
scsi/lpfc/lpfc_init.c:	mod_timer(&phba->eratt_poll, jiffies + HZ * LPFC_ERATT_POLL_INTERVAL);
scsi/lpfc/lpfc_init.c:	mod_timer(&phba->hb_tmofunc, jiffies + HZ * LPFC_HB_MBOX_INTERVAL);
scsi/lpfc/lpfc_init.c:	mod_timer(&vport->els_tmofunc, jiffies + HZ * timeout);
scsi/lpfc/lpfc_nportdisc.c:			mod_timer(&ndlp->nlp_delayfunc, jiffies + HZ);
scsi/lpfc/lpfc_nportdisc.c:		mod_timer(&ndlp->nlp_delayfunc, jiffies + HZ);
scsi/lpfc/lpfc_nportdisc.c:	mod_timer(&ndlp->nlp_delayfunc, jiffies + HZ);
scsi/lpfc/lpfc_nportdisc.c:		mod_timer(&ndlp->nlp_delayfunc, jiffies + HZ * 1);
scsi/lpfc/lpfc_nportdisc.c:		mod_timer(&ndlp->nlp_delayfunc, jiffies + HZ * 1);
scsi/lpfc/lpfc_nportdisc.c:		mod_timer(&ndlp->nlp_delayfunc, jiffies + HZ * 1);
scsi/lpfc/lpfc_nportdisc.c:	mod_timer(&ndlp->nlp_delayfunc, jiffies + HZ * 1);
scsi/lpfc/lpfc_scsi.c:			   (2*vport->cfg_devloss_tmo*HZ));
scsi/lpfc/lpfc_sli.c:					HZ * LPFC_ERATT_POLL_INTERVAL);
scsi/lpfc/lpfc_sli.c:		  (HZ * lpfc_mbox_tmo_val(phba, mboxq))));
scsi/lpfc/lpfc_sli.c:			       (HZ * lpfc_mbox_tmo_val(phba, pmbox))));
scsi/lpfc/lpfc_sli.c:		  jiffies + HZ * LPFC_HB_MBOX_INTERVAL);
scsi/lpfc/lpfc_sli.c:				  jiffies + HZ * (phba->fc_ratov << 1));
scsi/lpfc/lpfc_sli.c:		  jiffies + HZ * (phba->fc_ratov * 2));
scsi/lpfc/lpfc_sli.c:	mod_timer(&phba->eratt_poll, jiffies + HZ * LPFC_ERATT_POLL_INTERVAL);
scsi/lpfc/lpfc_sli.c:	next_time = jiffies + HZ * (phba->fc_ratov + 1);
scsi/lpfc/lpfc_sli.c:	next_time = jiffies + HZ * (phba->fc_ratov * 2);
scsi/lpfc/lpfc_sli.c:	rrq->rrq_stop_time = jiffies + HZ * (phba->fc_ratov + 1);
scsi/lpfc/lpfc_sli.c:				timeout * HZ);
scsi/lpfc/lpfc_sli.c:		timeout_req = timeout * HZ;
scsi/mac_scsi.c:#define	AFTER_RESET_DELAY	(5*HZ/2)
scsi/mac_scsi.c:#define	AFTER_RESET_DELAY	(HZ/2)
scsi/megaraid/megaraid_mbox.c:	timerp->expires		= jiffies + 60 * HZ;
scsi/megaraid/megaraid_mm.c:		tp->expires	= jiffies + adp->timeout * HZ;
scsi/megaraid/megaraid_sas_base.c:		if ((scp->request->timeout / HZ) > 0xFFFF)
scsi/megaraid/megaraid_sas_base.c:				(MEGASAS_DEFAULT_CMD_TIMEOUT * 2) * HZ)) {
scsi/megaraid/megaraid_sas_base.c:				MEGASAS_DEFAULT_CMD_TIMEOUT * HZ);
scsi/megaraid/megaraid_sas_base.c:		MEGASAS_DEFAULT_CMD_TIMEOUT * HZ);
scsi/megaraid/megaraid_sas_base.c:			pthru->timeout = scp->request->timeout / HZ;
scsi/megaraid/megaraid_sas_base.c:		&& time_after(jiffies, instance->last_time + 5 * HZ)
scsi/mpt2sas/mpt2sas_base.c:	    300*HZ);
scsi/mpt2sas/mpt2sas_base.c:	timeleft = wait_for_completion_timeout(&ioc->base_cmds.done, 30*HZ);
scsi/mpt2sas/mpt2sas_base.c:	wait_event_timeout(ioc->reset_wq, ioc->pending_io_count == 0, 10 * HZ);
scsi/mpt2sas/mpt2sas_config.c:	    timeout*HZ);
scsi/mpt2sas/mpt2sas_ctl.c:	    MPT2_IOCTL_DEFAULT_TIMEOUT*HZ);
scsi/mpt2sas/mpt2sas_ctl.c:	    MPT2_IOCTL_DEFAULT_TIMEOUT*HZ);
scsi/mpt2sas/mpt2sas_ctl.c:	    MPT2_IOCTL_DEFAULT_TIMEOUT*HZ);
scsi/mpt2sas/mpt2sas_ctl.c:	    timeout*HZ);
scsi/mpt2sas/mpt2sas_scsih.c:	if (time >= (300 * HZ)) {
scsi/mpt2sas/mpt2sas_scsih.c:	timeleft = wait_for_completion_timeout(&ioc->tm_cmds.done, timeout*HZ);
scsi/mpt2sas/mpt2sas_scsih.c:	wait_for_completion_timeout(&ioc->scsih_cmds.done, 10*HZ);
scsi/mpt2sas/mpt2sas_transport.c:	    10*HZ);
scsi/mpt2sas/mpt2sas_transport.c:	    10*HZ);
scsi/mpt2sas/mpt2sas_transport.c:	    10*HZ);
scsi/mpt2sas/mpt2sas_transport.c:	    10*HZ);
scsi/mvsas/mv_sas.c:			phy->timer.expires = jiffies + 5*HZ;
scsi/mvsas/mv_sas.c:		schedule_delayed_work(&mwq->work_q, HZ * 2);
scsi/mvsas/mv_sas.c:		task->timer.expires = jiffies + MVS_TASK_TIMEOUT*HZ;
scsi/mvumi.c:		if (time_after(jiffies, before + FW_MAX_DELAY * HZ)) {
scsi/mvumi.c:		if (time_after(jiffies, before + FW_MAX_DELAY * HZ)) {
scsi/mvumi.c:		MVUMI_INTERNAL_CMD_WAIT_TIME * HZ);
scsi/NCR5380.c:#define USLEEP_POLL (200*HZ/1000)
scsi/NCR5380.c:#define USLEEP_SLEEP (20*HZ/1000)
scsi/NCR5380.c:	err = NCR5380_poll_politely(instance, INITIATOR_COMMAND_REG, ICR_ARBITRATION_PROGRESS, ICR_ARBITRATION_PROGRESS, 5*HZ);
scsi/NCR5380.c:	err = NCR5380_poll_politely(instance, STATUS_REG, SR_REQ, SR_REQ, HZ);
scsi/NCR5380.c:	if(NCR5380_poll_politely(instance, STATUS_REG, SR_REQ, SR_REQ, 2*HZ))
scsi/NCR5380.c:	if(NCR5380_poll_politely(instance, STATUS_REG, SR_SEL, 0, 2*HZ)<0)
scsi/NCR5380.c:	if (!value && (hostdata->select_time < HZ/4)) {
scsi/NCR5380.c:					NCR5380_poll_politely(hostdata, BUS_AND_STATUS_REG, BASR_ACK, 0, 2*HZ);
scsi/NCR5380.c:	NCR5380_poll_politely(instance, BUS_AND_STATUS_REG, BASR_ACK, 0, 5*HZ);
scsi/NCR5380.c:			NCR5380_poll_politely(instance, STATUS_REG, SR_BSY, 0, 5*HZ);
scsi/NCR5380.c:		NCR5380_poll_politely(instance, STATUS_REG, SR_REQ, 0, 5*HZ);
scsi/NCR5380.c:						/* NCR538_poll_politely(instance, STATUS_REG, SR_BSY, 0, 30 * HZ); */
scsi/NCR5380.c:		rc = NCR5380_poll_politely(host, STATUS_REG, SR_REQ, 0, 3*HZ);
scsi/NCR5380.c:	rc = NCR5380_poll_politely(host, STATUS_REG, SR_REQ, SR_REQ, 60 * HZ);
scsi/NCR5380.c:	timeout = jiffies + (250 * HZ / 1000);
scsi/NCR5380.c:	timeout = jiffies + (250 * HZ / 1000);
scsi/NCR5380.c:			timeout = jiffies + 5 * HZ;
scsi/ncr53c8xx.c:	if (np->lasttime + 4*HZ < thistime) {
scsi/ncr53c8xx.c:	if (np->settle_time && cmd->request->timeout >= HZ) {
scsi/ncr53c8xx.c:			lp->tags_stime = jiffies + 3*HZ;
scsi/ncr53c8xx.c:		lp->tags_stime = jiffies + 3*HZ;
scsi/ncr53c8xx.c:		np->regtime = jiffies + 10*HZ;
scsi/ncr53c8xx.c:		np->settle_time	= jiffies + HZ;
scsi/ncr53c8xx.c:	np->settle_time	= jiffies + settle_delay * HZ;
scsi/ncr53c8xx.c:		u_long tlimit = jiffies + cmd->request->timeout - HZ;
scsi/ncr53c8xx.h:#define FE_66MHZ 	(1<<23)   /* 66MHz PCI Support */
scsi/ncr53c8xx.h:#define SCSI_NCR_TIMER_INTERVAL	(HZ)
scsi/NCR_D700.c:	hostdata->clock = NCR_D700_CLOCK_MHZ;
scsi/NCR_D700.h:#define NCR_D700_CLOCK_MHZ	50
scsi/NCR_Q720.h:#define NCR_Q720_CLOCK_MHZ	30
scsi/osd/osd_uld.c:	error = scsi_test_unit_ready(scsi_device, 10*HZ, 5, NULL);
scsi/osst.c:#define OSST_LONG_TIMEOUT (1800 * HZ)
scsi/osst.c:#define OSST_TIMEOUT (200 * HZ)
scsi/osst.c:#define OSST_WAIT_LONG_WRITE_COMPLETE (HZ / 2)
scsi/osst.c:#define OSST_WAIT_POSITION_COMPLETE   (HZ > 200 ? HZ / 200 : 1)
scsi/osst.c:#define OSST_WAIT_WRITE_COMPLETE      (HZ / 12)
scsi/osst.c:			if (debugging || time_after_eq(jiffies, startwait + 2*HZ/OSST_POLL_PER_SEC))
scsi/osst.c:		if (time_after_eq(jiffies, startwait + 2*HZ/OSST_POLL_PER_SEC) && notyetprinted)
scsi/osst.c:					(((jiffies-startwait)%HZ)*10)/HZ);
scsi/osst.c:		(jiffies-startwait)/HZ, (((jiffies-startwait)%HZ)*10)/HZ);
scsi/osst.c:					result, (jiffies-startwait)/HZ,
scsi/osst.c:			schedule_timeout_interruptible(HZ / OSST_POLL_PER_SEC);
scsi/osst.c:			STp->long_timeout = (value & ~MT_ST_SET_LONG_TIMEOUT) * HZ;
scsi/osst.c:			STp->timeout = value * HZ;
scsi/osst.c:	while (attempts && time_before(jiffies, startwait + 60*HZ)) {
scsi/osst.c:				while ( !flag && time_before(jiffies, startwait + 60*HZ) ) {
scsi/osst.c:		while (retval && time_before (jiffies, startwait + 5*60*HZ)) {
scsi/osst.c:	while ( STp->buffer->syscall_result && time_before(jiffies, startwait + timeout*HZ) &&
scsi/osst.c:	while ( STp->buffer->syscall_result && time_before(jiffies, startwait + timeout*HZ) &&
scsi/osst.c:	while (time_before (jiffies, startwait + to*HZ))
scsi/pm8001/pm8001_hwi.c:	start = jiffies + HZ; /* 1 sec */
scsi/pm8001/pm8001_sas.c:	if (time < HZ)
scsi/pm8001/pm8001_sas.c:		task->timer.expires = jiffies + PM8001_TASK_TIMEOUT*HZ;
scsi/pm8001/pm8001_sas.c:		task->timer.expires = jiffies + PM8001_TASK_TIMEOUT * HZ;
scsi/pmcraid.h:#define PMCRAID_CHECK_FOR_RESET_TIMEOUT		((HZ / 10))
scsi/pmcraid.h:#define PMCRAID_INTERNAL_TIMEOUT		(60 * HZ)
scsi/pmcraid.h:#define PMCRAID_REQUEST_SENSE_TIMEOUT		(30 * HZ)
scsi/pmcraid.h:#define PMCRAID_RESET_BUS_TIMEOUT		(60 * HZ)
scsi/pmcraid.h:#define PMCRAID_RESET_HOST_TIMEOUT		(150 * HZ)
scsi/pmcraid.h:#define PMCRAID_RESET_TIMEOUT			(2 * HZ)
scsi/pmcraid.h:#define PMCRAID_SET_SUP_DEV_TIMEOUT		(2 * 60 * HZ)
scsi/pmcraid.h:#define PMCRAID_SHUTDOWN_TIMEOUT		(150 * HZ)
scsi/pmcraid.h:#define PMCRAID_VSET_IO_TIMEOUT			(60 * HZ)
scsi/ppa.c:				if (time_after(jiffies, dev->jstart + (1 * HZ))) {
scsi/ppa.c:		if (time_after(jiffies, dev->jstart + HZ)) {
scsi/ppa.c:		schedule_timeout(3 * HZ);
scsi/qla1280.c:	pkt->timeout = cpu_to_le16(cmd->request->timeout/HZ);
scsi/qla1280.c:	pkt->timeout = cpu_to_le16(cmd->request->timeout/HZ);
scsi/qla1280.c:	timer.expires = jiffies + 20*HZ;
scsi/qla1280.c:	wait_for_completion_timeout(wait, 4*HZ);
scsi/qla2xxx/qla_bsg.c:			(20 * HZ))) {
scsi/qla2xxx/qla_bsg.c:	if (!wait_for_completion_timeout(&ha->dcbx_comp, (20 * HZ))) {
scsi/qla2xxx/qla_fw.h:#define PBM_PCI_33MHZ		(0 << 8)
scsi/qla2xxx/qla_fw.h:#define PBM_PCI_66MHZ		(8 << 8)
scsi/qla2xxx/qla_fw.h:#define PBM_PCIX_M1_100MHZ	(2 << 8)
scsi/qla2xxx/qla_fw.h:#define PBM_PCIX_M1_133MHZ	(3 << 8)
scsi/qla2xxx/qla_fw.h:#define PBM_PCIX_M1_66MHZ	(1 << 8)
scsi/qla2xxx/qla_fw.h:#define PBM_PCIX_M2_100MHZ	(6 << 8)
scsi/qla2xxx/qla_fw.h:#define PBM_PCIX_M2_133MHZ	(7 << 8)
scsi/qla2xxx/qla_fw.h:#define PBM_PCIX_M2_66MHZ	(5 << 8)
scsi/qla2xxx/qla_init.c:	mtime = jiffies + (min_wait * HZ);
scsi/qla2xxx/qla_init.c:	wtime = jiffies + (wait_time * HZ);
scsi/qla2xxx/qla_inline.h:	sp->u.iocb_cmd.timer.expires = jiffies + tmo * HZ;
scsi/qla2xxx/qla_mbx.c:	if (!wait_for_completion_timeout(&ha->mbx_cmd_comp, mcp->tov * HZ)) {
scsi/qla2xxx/qla_mbx.c:		    (uint)((jiffies - (wait_time - (mcp->tov * HZ)))/HZ));
scsi/qla2xxx/qla_mbx.c:		wait_for_completion_timeout(&ha->mbx_intr_comp, mcp->tov * HZ);
scsi/qla2xxx/qla_mbx.c:		wait_time = jiffies + mcp->tov * HZ; /* wait at most tov secs */
scsi/qla2xxx/qla_nx.c:	dev_init_timeout = jiffies + (ha->nx_dev_init_timeout * HZ);
scsi/qla2xxx/qla_nx.c:			    (ha->nx_dev_init_timeout * HZ);
scsi/qla2xxx/qla_nx.c:							 * HZ);
scsi/qla2xxx/qla_nx.c:							 * HZ);
scsi/qla2xxx/qla_nx.c:	reset_timeout = jiffies + (30 * HZ);
scsi/qla2xxx/qla_nx.c:	reset_timeout = jiffies + (ha->nx_reset_timeout * HZ);
scsi/qla2xxx/qla_nx.c:		schedule_timeout(HZ);
scsi/qla2xxx/qla_nx.c:	wait_reset = jiffies + (MAX_LOOP_TIMEOUT * HZ);
scsi/qla2xxx/qla_os.c:	if (time > vha->hw->loop_reset_delay * HZ)
scsi/qla2xxx/qla_os.c:	mod_timer(&vha->timer, jiffies + interval * HZ);
scsi/qla2xxx/qla_os.c:	vha->timer.expires = jiffies + interval * HZ;
scsi/qla2xxx/qla_os.c:	wait_online = jiffies + (MAX_LOOP_TIMEOUT * HZ);
scsi/qla2xxx/qla_os.c:	wait_online = jiffies + (MAX_LOOP_TIMEOUT * HZ);
scsi/qla2xxx/qla_os.c:	wait_reset = jiffies + (MAX_LOOP_TIMEOUT * HZ);
scsi/qla4xxx/ql4_init.c:	max_wait_time = jiffies + (FIRMWARE_UP_TOV * HZ);
scsi/qla4xxx/ql4_mbx.c:		wait_count = jiffies + MBOX_TOV * HZ;
scsi/qla4xxx/ql4_mbx.c:		wait_for_completion_timeout(&ha->mbx_intr_comp, MBOX_TOV * HZ);
scsi/qla4xxx/ql4_nx.c:	dev_init_timeout = jiffies + (ha->nx_dev_init_timeout * HZ);
scsi/qla4xxx/ql4_nx.c:					(ha->nx_dev_init_timeout * HZ);
scsi/qla4xxx/ql4_nx.c:	reset_timeout = jiffies + (ha->nx_reset_timeout * HZ);
scsi/qla4xxx/ql4_os.c:		      cmd, jiffies, cmd->request->timeout / HZ,
scsi/qla4xxx/ql4_os.c:				    DISABLE_ACB_TOV * HZ);
scsi/qla4xxx/ql4_os.c:				    DISABLE_ACB_TOV * HZ);
scsi/qla4xxx/ql4_os.c:		      ha->host_no, cmd, jiffies, cmd->request->timeout / HZ,
scsi/qla4xxx/ql4_os.c:	ha->timer.expires = jiffies + interval * HZ;
scsi/qla4xxx/ql4_os.c:		mod_timer(&ha->timer, jiffies + HZ);
scsi/qla4xxx/ql4_os.c:	mod_timer(&ha->timer, jiffies + HZ);
scsi/qla4xxx/ql4_os.c:			schedule_timeout(HZ);
scsi/qla4xxx/ql4_os.c:		schedule_timeout_uninterruptible(HZ);
scsi/qla4xxx/ql4_os.c:		schedule_timeout_uninterruptible(HZ);
scsi/qla4xxx/ql4_os.c:		schedule_timeout_uninterruptible(HZ / 10);
scsi/qla4xxx/ql4_os.c:	unsigned long wtime = jiffies + (WAIT_CMD_TOV * HZ);
scsi/qla4xxx/ql4_os.c:		wait = jiffies + (FW_ALIVE_WAIT_TOV * HZ);
scsi/qla4xxx/ql4_os.c:	wait_online = jiffies + (HBA_ONLINE_TOV * HZ);
scsi/qla4xxx/ql4_os.c:	wtime = jiffies + (HZ * IP_CONFIG_TOV);
scsi/qla4xxx/ql4_os.c:	wtime = jiffies + (HZ * LOGOUT_TOV);
scsi/qla4xxx/ql4_os.c:	wtime = jiffies + (HZ * tmo);
scsi/qlogicpti.c:	cmd->time_out = Cmnd->request->timeout/HZ;
scsi/qlogicpti.c:		if (time_after(jiffies, qpti->tag_ages[Cmnd->device->id] + (5*HZ))) {
scsi/scsi.c:#define MIN_RESET_DELAY (2*HZ)
scsi/scsi.c:#define MIN_RESET_PERIOD (15*HZ)
scsi/scsi.c:				  len, NULL, 30 * HZ, 3, NULL);
scsi/scsi.c:			mdelay(1 + 999 / HZ);
scsi/scsi_error.c:	req->timeout = 10 * HZ;
scsi/scsi_ioctl.c:#define IOCTL_NORMAL_TIMEOUT			(10 * HZ)
scsi/scsi_lib.c:			    wait_for/HZ);
scsi/scsi_netlink.c:			schedule_timeout_uninterruptible(HZ/4);
scsi/scsi_netlink.c:				schedule_timeout_uninterruptible(HZ/4);
scsi/scsi_pm.c:				round_jiffies_up_relative(HZ/10)));
scsi/scsi_scan.c:#define SCSI_TIMEOUT (2*HZ)
scsi/scsi_scan.c:					  HZ / 2 + HZ * scsi_inq_timeout, 3,
scsi/scsi_scan.c:					  SCSI_TIMEOUT + 4 * HZ, 3, NULL);
scsi/scsi_scan.c:static unsigned int scsi_inq_timeout = SCSI_TIMEOUT/HZ + 18;
scsi/scsi_sysfs.c:	blk_queue_rq_timeout(sdev->request_queue, timeout * HZ);
scsi/scsi_sysfs.c:	return snprintf(buf, 20, "%d\n", sdev->request_queue->rq_timeout / HZ);
scsi/scsi_sysfs.c:	return snprintf(buf, 20, "%u\n", sdev->eh_timeout / HZ);
scsi/scsi_sysfs.c:	sdev->eh_timeout = eh_timeout * HZ;
scsi/scsi_transport_fc.c:	fc_queue_devloss_work(shost, &rport->dev_loss_work, timeout * HZ);
scsi/scsi_transport_fc.c:					rport->fast_io_fail_tmo * HZ);
scsi/scsi_transport_iscsi.c:				   session->recovery_tmo * HZ);
scsi/scsi_transport_sas.c:	res = scsi_mode_sense(sdev, 1, 0x19, buffer, BUF_SIZE, 30*HZ, 3,
scsi/scsi_transport_spi.c:#define DV_TIMEOUT	(10*HZ)
scsi/sd.c:			(sdkp->thread_remove && sdkp->async_end), 3*HZ);
scsi/sd.c:				spintime_expire = jiffies + 100 * HZ;
scsi/sd.c:				spintime_expire = jiffies + 5 * HZ;
scsi/sd.h:#define SD_FLUSH_TIMEOUT	(60 * HZ)
scsi/sd.h:#define SD_MOD_TIMEOUT		(75 * HZ)
scsi/sd.h:#define SD_TIMEOUT		(30 * HZ)
scsi/ses.c:#define SES_TIMEOUT (30 * HZ)
scsi/sg.c: * are "small" numbers (like HZ and USER_HZ).
scsi/sg.c:#define SG_DEFAULT_TIMEOUT MULDIV(SG_DEFAULT_TIMEOUT_USER, HZ, USER_HZ)
scsi/sg.c:		if (val >= MULDIV (INT_MAX, USER_HZ, HZ))
scsi/sg.c:		sfp->timeout = MULDIV (val, HZ, USER_HZ);
scsi/sg.c:		    val = MULDIV (INT_MAX, USER_HZ, HZ);
scsi/sgiwd93.c:	wd33c93_init(host, regs, dma_setup, dma_stop, WD33C93_FS_MHZ(20));
scsi/sr.h:#define IOCTL_TIMEOUT 30*HZ
scsi/sr.h:#define SR_TIMEOUT	(30 * HZ)
scsi/sr_vendor.c:#define VENDOR_TIMEOUT	30*HZ
scsi/st.c:#define ST_LONG_TIMEOUT (14000 * HZ)
scsi/st.c:#define ST_TIMEOUT (900 * HZ)
scsi/st.c:			STp->long_timeout = (value & ~MT_ST_SET_LONG_TIMEOUT) * HZ;
scsi/st.c:					     value * HZ);
scsi/stex.c:	blk_queue_rq_timeout(sdev->request_queue, 60 * HZ);
scsi/stex.c:			if (time_after(jiffies, before + MU_MAX_DELAY * HZ)) {
scsi/stex.c:		if (time_after(jiffies, before + MU_MAX_DELAY * HZ)) {
scsi/stex.c:		if (time_after(jiffies, before + MU_MAX_DELAY * HZ)) {
scsi/stex.c:		if (time_after(jiffies, before + MU_MAX_DELAY * HZ)) {
scsi/stex.c:		if (time_after(jiffies, before + ST_INTERNAL_TIMEOUT * HZ)) {
scsi/stex.c:		if (time_after(jiffies, before + ST_INTERNAL_TIMEOUT * HZ)) {
scsi/stex.c:		msg_h->timeout = cpu_to_le16(cmd->request->timeout/HZ);
scsi/stex.c:				   MU_MAX_DELAY * HZ);
scsi/storvsc_drv.c:	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
scsi/storvsc_drv.c:	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
scsi/storvsc_drv.c:	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
scsi/storvsc_drv.c:	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
scsi/storvsc_drv.c:	t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
scsi/sun3_scsi.c:#define	AFTER_RESET_DELAY	(HZ/2)
scsi/sun3_scsi_vme.c:#define	AFTER_RESET_DELAY	(HZ/2)
scsi/sym53c8xx_2/sym_defs.h:#define FE_66MHZ	(1<<22)	  /* 66MHz PCI support */
scsi/sym53c8xx_2/sym_glue.c:			chip->features &= ~FE_66MHZ;
scsi/sym53c8xx_2/sym_glue.c:	if (chip->features & FE_66MHZ) {
scsi/sym53c8xx_2/sym_glue.c:	if (!(chip->features & FE_66MHZ) && (status_reg & PCI_STATUS_66MHZ)) {
scsi/sym53c8xx_2/sym_glue.c:	if (np->s.lasttime + 4*HZ < thistime) {
scsi/sym53c8xx_2/sym_glue.c:		if (!(status_reg & PCI_STATUS_66MHZ))
scsi/sym53c8xx_2/sym_glue.c:		if (status_reg & PCI_STATUS_66MHZ) {
scsi/sym53c8xx_2/sym_glue.c:		if (!wait_for_completion_timeout(&eh_done, 5*HZ)) {
scsi/sym53c8xx_2/sym_glue.c:	np->s.settle_time = jiffies + sym_driver_setup.settle_delay * HZ;
scsi/sym53c8xx_2/sym_glue.c:			status_reg = PCI_STATUS_66MHZ;
scsi/sym53c8xx_2/sym_glue.c:		status_reg = PCI_STATUS_66MHZ;
scsi/sym53c8xx_2/sym_glue.c:						WAIT_FOR_PCI_RECOVERY*HZ);
scsi/sym53c8xx_2/sym_glue.h:#define	SYM_CONF_TIMER_INTERVAL		((HZ+1)/2)
scsi/sym53c8xx_2/sym_hipd.c: FE_RAM|FE_RAM8K|FE_64BIT|FE_DAC|FE_IO256|FE_NOPM|FE_LEDC|FE_66MHZ|FE_CRC|
scsi/sym53c8xx_2/sym_hipd.c:	if (i > 37000 && !(np->features & FE_66MHZ))
scsi/sym53c8xx_2/sym_hipd.c:	if (np->features & FE_66MHZ) {
scsi/sym53c8xx_2/sym_hipd.c:#include <asm/param.h>		/* for timeouts in units of HZ */
scsi/tmscsim.c:	DC390_write8(Clk_Factor, CLK_FREQ_40MHZ);
scsi/tmscsim.c:		    + HZ * dc390_eepromBuf[pACB->AdapterIndex][EE_DELAY];
scsi/tmscsim.c:		+ HZ * dc390_eepromBuf[pACB->AdapterIndex][EE_DELAY];
scsi/tmscsim.c:			HZ * dc390_eepromBuf[pACB->AdapterIndex][EE_DELAY];
scsi/tmscsim.c:	pACB->pScsiHost->last_reset = jiffies + 3*HZ/2
scsi/tmscsim.c:    pACB->pScsiHost->last_reset = jiffies + 5*HZ/2
scsi/tmscsim.c:		shost->last_reset = jiffies + HZ/2 +
scsi/tmscsim.c:	    unsigned long timeout = jiffies + HZ;
scsi/tmscsim.c:	    unsigned long timeout = jiffies + HZ;
scsi/tmscsim.h:#define CLK_FREQ_10MHZ		BIT1
scsi/tmscsim.h:#define CLK_FREQ_15MHZ		(BIT1+BIT0)
scsi/tmscsim.h:#define CLK_FREQ_20MHZ		BIT2
scsi/tmscsim.h:#define CLK_FREQ_25MHZ		(BIT2+BIT0)
scsi/tmscsim.h:#define CLK_FREQ_30MHZ		(BIT2+BIT1)
scsi/tmscsim.h:#define CLK_FREQ_35MHZ		(BIT2+BIT1+BIT0)
scsi/tmscsim.h:#define CLK_FREQ_40MHZ		0
scsi/tmscsim.h:#define FAST_CLK		BIT3	/* ;25 - 40 MHZ */
scsi/u14-34f.c:   while ((jiffies - time) < (10 * HZ) && limit++ < 200000) udelay(100L);
scsi/u14-34f.c:   while ((jiffies - time) < HZ && limit++ < 20000) udelay(100L);
scsi/ufs/ufshcd.c:					 60 * HZ);
scsi/wd33c93.h:#define WD33C93_FS_MHZ(mhz) (mhz)
secfilter/sec_filter.c:            resetTime   = get_jiffies_64()+closingTime*HZ;      // Get current time and add some time to wait for revival of app.
sensorhub/ssp_debug.c:#define SSP_DEBUG_TIMER_SEC		(10 * HZ)
sensorhub/ssp_input.c:		wake_lock_timeout(&data->ssp_wake_lock, 2 * HZ);
sensorhub/ssp_input.c:	wake_lock_timeout(&data->ssp_wake_lock, 3 * HZ);
sensorhub/ssp_sensorhub.h:#define COMPLETION_TIMEOUT		(2*HZ)
sensorhub/ssp_sensorhub.h:#define WAKE_LOCK_TIMEOUT		(3*HZ)
sensors/ad7146.c:	wake_lock_timeout(&ad7146->grip_wake_lock, 3 * HZ);
sensors/alps_acc_bma254.c:	buf[1] = BMA254_BW_31DOT25HZ;
sensors/alps_acc_bma254.c:#define BMA254_BW_1000HZ		0x0F
sensors/alps_acc_bma254.c:#define BMA254_BW_125HZ			0x0C
sensors/alps_acc_bma254.c:#define BMA254_BW_15DOT63HZ         0x09
sensors/alps_acc_bma254.c:#define BMA254_BW_250HZ			0x0D
sensors/alps_acc_bma254.c:#define BMA254_BW_31DOT25HZ         0x0A
sensors/alps_acc_bma254.c:#define BMA254_BW_500HZ			0x0E
sensors/alps_acc_bma254.c:#define BMA254_BW_62DOT50HZ         0x0B
sensors/alps_acc_bma254.c:#define BMA254_BW_7DOT81HZ          0x08
sensors/alps_acc_bma254.c:#define BMA254_BW_SET			BMA254_BW_15DOT63HZ
sensors/asp01.c:	wake_lock_timeout(&data->gr_wake_lock, 3 * HZ);
sensors/optical/cm36651.c:	wake_lock_timeout(&cm36651->prx_wake_lock, 3 * HZ);
sensors/optical/gp2a.c:		wake_lock_timeout(&gp2a->prx_wake_lock, 3*HZ);
sensors/optical/gp2ap020.c:	wake_lock_timeout(&gp2a->prx_wake_lock, 3 * HZ);
sensors/optical/taos_tmd3782.c:	wake_lock_timeout(&ip->prx_wake_lock, 3*HZ);
sensors/taos.c:	wake_lock_timeout(&ip->prx_wake_lock, 3*HZ);
sensors/yas_acc_driver-bma25x.c:	{128, YAS_BMA250_BANDWIDTH_8HZ},
sensors/yas_acc_driver-bma25x.c:	{16,  YAS_BMA250_BANDWIDTH_63HZ},
sensors/yas_acc_driver-bma25x.c:	{1,   YAS_BMA250_BANDWIDTH_1000HZ},
sensors/yas_acc_driver-bma25x.c:	{2,   YAS_BMA250_BANDWIDTH_500HZ},
sensors/yas_acc_driver-bma25x.c:	{32,  YAS_BMA250_BANDWIDTH_32HZ},
sensors/yas_acc_driver-bma25x.c:	{4,   YAS_BMA250_BANDWIDTH_250HZ},
sensors/yas_acc_driver-bma25x.c:	{64,  YAS_BMA250_BANDWIDTH_16HZ},
sensors/yas_acc_driver-bma25x.c:	{8,   YAS_BMA250_BANDWIDTH_125HZ},
sensors/yas_acc_driver-bma25x.c:#define YAS_BMA250_BANDWIDTH_1000HZ                                           15
sensors/yas_acc_driver-bma25x.c:#define YAS_BMA250_BANDWIDTH_125HZ                                            12
sensors/yas_acc_driver-bma25x.c:#define YAS_BMA250_BANDWIDTH_16HZ                                              9
sensors/yas_acc_driver-bma25x.c:#define YAS_BMA250_BANDWIDTH_250HZ                                            13
sensors/yas_acc_driver-bma25x.c:#define YAS_BMA250_BANDWIDTH_32HZ                                             10
sensors/yas_acc_driver-bma25x.c:#define YAS_BMA250_BANDWIDTH_500HZ                                            14
sensors/yas_acc_driver-bma25x.c:#define YAS_BMA250_BANDWIDTH_63HZ                                             11
sensors/yas_acc_driver-bma25x.c:#define YAS_BMA250_BANDWIDTH_8HZ                                               8
sensors/yas_acc_driver-bma25x.c:	if (bw == YAS_BMA250_BANDWIDTH_8HZ) {
sensors/yas_acc_driver-bma25x.c:	{YAS_BMA250_BANDWIDTH_1000HZ /*   1ms */, YAS_BMA250_SLEEP_DUR_0},
sensors/yas_acc_driver-bma25x.c:	{YAS_BMA250_BANDWIDTH_125HZ  /*   8ms */, YAS_BMA250_SLEEP_DUR_6},
sensors/yas_acc_driver-bma25x.c:	{YAS_BMA250_BANDWIDTH_16HZ   /*  64ms */, YAS_BMA250_SLEEP_DUR_50},
sensors/yas_acc_driver-bma25x.c:	{YAS_BMA250_BANDWIDTH_250HZ  /*   4ms */, YAS_BMA250_SLEEP_DUR_2},
sensors/yas_acc_driver-bma25x.c:	{YAS_BMA250_BANDWIDTH_32HZ   /*  32ms */, YAS_BMA250_SLEEP_DUR_25},
sensors/yas_acc_driver-bma25x.c:	{YAS_BMA250_BANDWIDTH_500HZ  /*   2ms */, YAS_BMA250_SLEEP_DUR_1},
sensors/yas_acc_driver-bma25x.c:	{YAS_BMA250_BANDWIDTH_63HZ   /*  16ms */, YAS_BMA250_SLEEP_DUR_10},
sensors/yas_acc_driver-bma25x.c:	{YAS_BMA250_BANDWIDTH_8HZ    /* 128ms */, YAS_BMA250_SLEEP_DUR_100},
sh/maple/maple.c:	maple_pnp_time = jiffies + HZ;
slimbus/slimbus2.c:	else if (prop->baser == SLIM_RATE_11025HZ)
slimbus/slimbus2.c:	else if (prop->baser == SLIM_RATE_11025HZ &&
slimbus/slimbus2.c:	if (prop->baser == SLIM_RATE_1HZ) {
slimbus/slimbus2.c:	if (prop->baser == SLIM_RATE_4000HZ)
slimbus/slimbus2.c:	if (prop->baser == SLIM_RATE_4000HZ &&
slimbus/slimbus2.c:	if (ratefam == SLIM_RATE_1HZ) {
slimbus/slimbus2.c:	if (ratefam == SLIM_RATE_4000HZ) {
slimbus/slimbus2.c:				ratefam = SLIM_RATE_11025HZ;
slimbus/slimbus2.c:			ratefam = SLIM_RATE_11025HZ;
slimbus/slimbus2.c:				ratefam = SLIM_RATE_1HZ;
slimbus/slimbus2.c:			ratefam = SLIM_RATE_4000HZ;
slimbus/slimbus2.c:			ratefam = SLIM_RATE_4000HZ;
slimbus/slimbus2.c:			ret = wait_for_completion_timeout(&complete, HZ);
slimbus/slimbus.c:	else if (prop->baser == SLIM_RATE_11025HZ)
slimbus/slimbus.c:	else if (prop->baser == SLIM_RATE_11025HZ &&
slimbus/slimbus.c:	if (prop->baser == SLIM_RATE_1HZ) {
slimbus/slimbus.c:	if (prop->baser == SLIM_RATE_4000HZ)
slimbus/slimbus.c:	if (prop->baser == SLIM_RATE_4000HZ &&
slimbus/slimbus.c:	if (ratefam == SLIM_RATE_1HZ) {
slimbus/slimbus.c:	if (ratefam == SLIM_RATE_4000HZ) {
slimbus/slimbus.c:				ratefam = SLIM_RATE_11025HZ;
slimbus/slimbus.c:			ratefam = SLIM_RATE_11025HZ;
slimbus/slimbus.c:				ratefam = SLIM_RATE_1HZ;
slimbus/slimbus.c:			ratefam = SLIM_RATE_4000HZ;
slimbus/slimbus.c:			ratefam = SLIM_RATE_4000HZ;
slimbus/slimbus.c:			ret = wait_for_completion_timeout(&complete, HZ);
slimbus/slimbus.h:	SLIM_RATE_11025HZ,
slimbus/slimbus.h:	SLIM_RATE_1HZ,
slimbus/slimbus.h:	SLIM_RATE_4000HZ,
slimbus/slimbus.h: * Use 1HZ for push-pull transport.
slimbus/slim-msm-ctrl2.c:			prop.baser = SLIM_RATE_11025HZ;
slimbus/slim-msm-ctrl2.c:			prop.baser = SLIM_RATE_4000HZ;
slimbus/slim-msm-ctrl2.c:		prop.baser = SLIM_RATE_4000HZ;
slimbus/slim-msm-ctrl2.c:			timeout = wait_for_completion_timeout(&dev->reconf, HZ);
slimbus/slim-msm-ctrl2.c:	timeout = wait_for_completion_timeout(&done, HZ);
slimbus/slim-msm-ctrl2.c:	timeout = wait_for_completion_timeout(&done, HZ);
slimbus/slim-msm-ctrl2.c:				wait_for_completion_timeout(&dev->reconf, HZ);
slimbus/slim-msm-ctrl.c:			prop.baser = SLIM_RATE_11025HZ;
slimbus/slim-msm-ctrl.c:			prop.baser = SLIM_RATE_4000HZ;
slimbus/slim-msm-ctrl.c:		prop.baser = SLIM_RATE_4000HZ;
slimbus/slim-msm-ctrl.c:			timeout = wait_for_completion_timeout(&dev->reconf, HZ);
slimbus/slim-msm-ctrl.c:	timeout = wait_for_completion_timeout(&done, HZ);
slimbus/slim-msm-ctrl.c:	timeout = wait_for_completion_timeout(&done, HZ);
slimbus/slim-msm-ctrl.c:				wait_for_completion_timeout(&dev->reconf, HZ);
slimbus/slim-msm-ngd.c:		int timeout = wait_for_completion_timeout(&tx_sent, HZ);
slimbus/slim-msm-ngd.c:		timeout = wait_for_completion_timeout(&dev->reconf, HZ);
slimbus/slim-msm-ngd.c:		timeout = wait_for_completion_timeout(txn->comp, HZ);
slimbus/slim-msm-ngd.c:		timeout = wait_for_completion_timeout(txn->comp, HZ);
soc/qcom/intelli_hotplug.c:#define RESUME_SAMPLING_MS		HZ / 10
soc/qcom/intelli_hotplug.c:#define START_DELAY_MS			HZ * 20
soc/qcom/msm_hotplug.c:#define DEFAULT_UPDATE_RATE		HZ / 10
soc/qcom/msm_hotplug.c:#define START_DELAY			HZ * 20
spi/spi-bcm63xx.c:	{ 12500000, SPI_CLK_12_50MHZ },
spi/spi-bcm63xx.c:	{  1563000, SPI_CLK_1_563MHZ },
spi/spi-bcm63xx.c:	{ 20000000, SPI_CLK_20MHZ },
spi/spi-bcm63xx.c:	{  3125000, SPI_CLK_3_125MHZ },
spi/spi-bcm63xx.c:	{   391000, SPI_CLK_0_391MHZ }
spi/spi-bcm63xx.c:	{  6250000, SPI_CLK_6_250MHZ },
spi/spi-bcm63xx.c:	{   781000, SPI_CLK_0_781MHZ },
spi/spi-bcm63xx.c:		clk_cfg = SPI_CLK_0_391MHZ;
spi/spi-bcm63xx.c:			timeout = wait_for_completion_timeout(&bs->done, HZ);
spi/spi-bfin5xx.c:/* Caculate the SPI_BAUD register value based on input HZ */
spi/spi-bfin5xx.c:	timeout = jiffies + HZ;
spi/spi-bfin-sport.c:/* Caculate the SPI_BAUD register value based on input HZ */
spi/spi-bfin-sport.c:	unsigned long timeout = jiffies + HZ;
spi/spidev.c:	case SPI_IOC_RD_MAX_SPEED_HZ:
spi/spidev.c:	case SPI_IOC_WR_MAX_SPEED_HZ:
spi/spi-dw.c:		dev_err(&spi->dev, "No max speed HZ parameter\n");
spi/spi-omap-uwire.c:	unsigned long max_jiffies = jiffies + HZ;
spi/spi-rspi.c:	ret = wait_event_timeout(rspi->wait, rspi->spsr & wait_mask, HZ);
spi/spi-s3c64xx.c:#define msecs_to_loops(t) (loops_per_jiffy / 1000 * HZ * t)
spi/spi-sh.c:#define SPI_SH_RECEIVE_TIMEOUT	(HZ >> 3)
spi/spi-sh.c:#define SPI_SH_SEND_TIMEOUT	(3 * HZ)
spi/spi-stmp.c:#define STMP_SPI_TIMEOUT	(2 * HZ)
spi/spi-topcliff-pch.c:#define PCH_CLOCK_HZ		50000000
spi/spi-topcliff-pch.c:					       msecs_to_jiffies(2 * HZ));
spi/spi-topcliff-pch.c:	u32 n_spbr = PCH_CLOCK_HZ / (speed_hz * 2);
staging/android/lowmemorykiller2.c:			lowmem_deathpending_timeout = jiffies + HZ;
staging/android/lowmemorykiller2.c:		lowmem_deathpending_timeout = jiffies + HZ;
staging/android/lowmemorykiller.c:			lowmem_deathpending_timeout = jiffies + HZ;
staging/android/lowmemorykiller.c:		lowmem_deathpending_timeout = jiffies + HZ;
staging/android/rtcc.c:#define BOOSTMODE_TIMEOUT		(60*HZ)
staging/android/rtcc.c:#define DEF_RECLAIM_INTERVAL	(10*HZ)
staging/bcm/Bcmchar.c:							(1 * HZ));
staging/bcm/Bcmchar.c:		timeout = 5*HZ;
staging/bcm/DDRInit.c:            case DDR_100_MHZ:
staging/bcm/DDRInit.c:            case DDR_100_MHZ:
staging/bcm/DDRInit.c:		        case DDR_100_MHZ:
staging/bcm/DDRInit.c:		    case DDR_100_MHZ:
staging/bcm/DDRInit.c:		    case DDR_100_MHZ:
staging/bcm/DDRInit.c:		    case DDR_100_MHZ:
staging/bcm/DDRInit.c:		    case DDR_100_MHZ:
staging/bcm/DDRInit.c:		    case DDR_100_MHZ:
staging/bcm/DDRInit.c:            case DDR_133_MHZ:
staging/bcm/DDRInit.c:            case DDR_133_MHZ:
staging/bcm/DDRInit.c:		        case DDR_133_MHZ:
staging/bcm/DDRInit.c:		     case DDR_133_MHZ:
staging/bcm/DDRInit.c:		     case DDR_133_MHZ:
staging/bcm/DDRInit.c:		     case DDR_133_MHZ:
staging/bcm/DDRInit.c:		    case DDR_133_MHZ:
staging/bcm/DDRInit.c:		    case DDR_133_MHZ:
staging/bcm/DDRInit.c:			case DDR_160_MHZ:
staging/bcm/DDRInit.c:			case DDR_160_MHZ:
staging/bcm/DDRInit.c:	        case DDR_80_MHZ:
staging/bcm/DDRInit.c:	        case DDR_80_MHZ:
staging/bcm/DDRInit.c:	        case DDR_80_MHZ:
staging/bcm/DDRInit.c:	        case DDR_80_MHZ:
staging/bcm/DDRInit.c:	        case DDR_80_MHZ:
staging/bcm/DDRInit.c:	        case DDR_80_MHZ:
staging/bcm/DDRInit.c:		        case DDR_80_MHZ:
staging/bcm/DDRInit.c:			case DDR_80_MHZ:
staging/bcm/DDRInit.c:#define T3B_SKIP_CLOCK_PROGRAM_DUMP_100MHZ 9  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3B_SKIP_CLOCK_PROGRAM_DUMP_133MHZ 11  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3B_SKIP_CLOCK_PROGRAM_DUMP_80MHZ 9  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3LPB_SKIP_CLOCK_PROGRAM_DUMP_100MHZ 8  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3LPB_SKIP_CLOCK_PROGRAM_DUMP_133MHZ 7  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3LPB_SKIP_CLOCK_PROGRAM_DUMP_160MHZ 7  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3LPB_SKIP_CLOCK_PROGRAM_DUMP_80MHZ 7  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3LP_SKIP_CLOCK_PROGRAM_DUMP_100MHZ 11  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3LP_SKIP_CLOCK_PROGRAM_DUMP_133MHZ 9  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3LP_SKIP_CLOCK_PROGRAM_DUMP_80MHZ 9  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3_SKIP_CLOCK_PROGRAM_DUMP_100MHZ 13  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3_SKIP_CLOCK_PROGRAM_DUMP_133MHZ 12  //index for 0x0F007000
staging/bcm/DDRInit.c:#define T3_SKIP_CLOCK_PROGRAM_DUMP_80MHZ 10  //index for 0x0F007000
staging/bcm/DDRInit.c:				if(Adapter->bDPLLConfig == PLL_266_MHZ)//266Mhz PLL selected.
staging/bcm/DDRInit.c:					if(Adapter->bMipsConfig == MIPS_200_MHZ)
staging/bcm/DDRInit.c:				if(Adapter->bMipsConfig == MIPS_200_MHZ)
staging/bcm/DDRInit.c:				if(Adapter->bMipsConfig == MIPS_200_MHZ)
staging/bcm/DDRInit.c:				if(Adapter->bMipsConfig == MIPS_200_MHZ)
staging/bcm/DDRInit.c:					memcpy(asT3B_DDRSetting133MHz, asDPLL_266MHZ,
staging/bcm/DDRInit.c:                    psDDRSetting += T3B_SKIP_CLOCK_PROGRAM_DUMP_100MHZ;
staging/bcm/DDRInit.c:		            psDDRSetting += T3B_SKIP_CLOCK_PROGRAM_DUMP_133MHZ;
staging/bcm/DDRInit.c:                    psDDRSetting += T3B_SKIP_CLOCK_PROGRAM_DUMP_80MHZ;
staging/bcm/DDRInit.c:                psDDRSetting += T3LPB_SKIP_CLOCK_PROGRAM_DUMP_100MHZ;
staging/bcm/DDRInit.c:		        psDDRSetting += T3LPB_SKIP_CLOCK_PROGRAM_DUMP_133MHZ;
staging/bcm/DDRInit.c:					psDDRSetting += T3LPB_SKIP_CLOCK_PROGRAM_DUMP_160MHZ;
staging/bcm/DDRInit.c:                psDDRSetting += T3LPB_SKIP_CLOCK_PROGRAM_DUMP_80MHZ;
staging/bcm/DDRInit.c:                psDDRSetting += T3LP_SKIP_CLOCK_PROGRAM_DUMP_100MHZ;
staging/bcm/DDRInit.c:		        psDDRSetting += T3LP_SKIP_CLOCK_PROGRAM_DUMP_133MHZ;
staging/bcm/DDRInit.c:                psDDRSetting += T3LP_SKIP_CLOCK_PROGRAM_DUMP_80MHZ;
staging/bcm/DDRInit.c:                psDDRSetting += T3_SKIP_CLOCK_PROGRAM_DUMP_100MHZ;
staging/bcm/DDRInit.c:		        psDDRSetting += T3_SKIP_CLOCK_PROGRAM_DUMP_133MHZ ;
staging/bcm/DDRInit.c:                psDDRSetting += T3_SKIP_CLOCK_PROGRAM_DUMP_80MHZ;
staging/bcm/DDRInit.c:                    RegCount -= T3B_SKIP_CLOCK_PROGRAM_DUMP_100MHZ ;
staging/bcm/DDRInit.c:	                RegCount -= T3B_SKIP_CLOCK_PROGRAM_DUMP_133MHZ ;
staging/bcm/DDRInit.c:                    RegCount -= T3B_SKIP_CLOCK_PROGRAM_DUMP_80MHZ ;
staging/bcm/DDRInit.c:				RegCount -= T3LPB_SKIP_CLOCK_PROGRAM_DUMP_100MHZ ;
staging/bcm/DDRInit.c:				RegCount -= T3LPB_SKIP_CLOCK_PROGRAM_DUMP_133MHZ ;
staging/bcm/DDRInit.c:					RegCount -= T3LPB_SKIP_CLOCK_PROGRAM_DUMP_160MHZ;
staging/bcm/DDRInit.c:				RegCount -= T3LPB_SKIP_CLOCK_PROGRAM_DUMP_80MHZ ;
staging/bcm/DDRInit.c:				RegCount -= T3LP_SKIP_CLOCK_PROGRAM_DUMP_100MHZ ;
staging/bcm/DDRInit.c:				RegCount -= T3LP_SKIP_CLOCK_PROGRAM_DUMP_133MHZ ;
staging/bcm/DDRInit.c:				RegCount -= T3LP_SKIP_CLOCK_PROGRAM_DUMP_80MHZ ;
staging/bcm/DDRInit.c:				RegCount-=T3_SKIP_CLOCK_PROGRAM_DUMP_100MHZ ;
staging/bcm/DDRInit.c:				RegCount-=T3_SKIP_CLOCK_PROGRAM_DUMP_133MHZ ;
staging/bcm/DDRInit.c:				RegCount-=T3_SKIP_CLOCK_PROGRAM_DUMP_80MHZ ;
staging/bcm/DDRInit.c:									 sizeof(asDPLL_266MHZ));
staging/bcm/DDRInit.c:static DDR_SET_NODE asDPLL_266MHZ[] = {
staging/bcm/InterfaceInit.c:					psIntfAdapter->psAdapter->waiting_to_fw_download_done, 5*HZ);
staging/bcm/Macros.h:#define DDR_100_MHZ 1
staging/bcm/Macros.h:#define DDR_120_MHZ 2 /* Additional Frequency for T3LP */
staging/bcm/Macros.h:#define DDR_133_MHZ 3
staging/bcm/Macros.h:#define DDR_140_MHZ 4 /* Not Used (Reserved for future) */
staging/bcm/Macros.h:#define DDR_160_MHZ 5 /* Additional Frequency for T3LP  */
staging/bcm/Macros.h:#define DDR_180_MHZ 6 /* Not Used (Reserved for future) */
staging/bcm/Macros.h:#define DDR_200_MHZ 7 /* Not Used (Reserved for future) */
staging/bcm/Macros.h:#define DDR_80_MHZ  0
staging/bcm/Macros.h:#define MIPS_160_MHZ   1
staging/bcm/Macros.h:#define MIPS_200_MHZ   0
staging/bcm/Macros.h:#define PLL_266_MHZ    1
staging/bcm/Macros.h:#define PLL_800_MHZ    0
staging/bcm/Macros.h:#define XSECONDS             (1*HZ)
staging/bcm/Misc.c:				Status = wait_event_interruptible_timeout(Adapter->lowpower_mode_wait_queue, !Adapter->bShutStatus, (5 * HZ));
staging/bcm/Misc.c:			Status = wait_event_interruptible_timeout(Adapter->lowpower_mode_wait_queue, !Adapter->IdleMode, (5 * HZ));
staging/bcm/Qos.c:			((1000*(jiffies - *((B_UINT32 *)(PacketToDrop->cb)+SKB_CB_LATENCY_OFFSET))/HZ) <= Adapter->PackInfo[iIndex].uiMaxLatency))
staging/comedi/comedi.h:		AMPLC_DIO_CLK_100KHZ,	/* 100 kHz internal clock */
staging/comedi/comedi.h:		AMPLC_DIO_CLK_10KHZ,	/* 10 kHz internal clock */
staging/comedi/comedi.h:		AMPLC_DIO_CLK_10MHZ,	/* 10 MHz internal clock */
staging/comedi/comedi.h:		AMPLC_DIO_CLK_1KHZ,	/* 1 kHz internal clock */
staging/comedi/comedi.h:		AMPLC_DIO_CLK_1MHZ,	/* 1 MHz internal clock */
staging/comedi/drivers/addi-data/APCI1710_82x54.c:					      (b_InputClockSelection == APCI1710_10MHZ)))) {
staging/comedi/drivers/addi-data/APCI1710_82x54.c:					     (b_InputClockSelection == APCI1710_10MHZ)) ||
staging/comedi/drivers/addi-data/APCI1710_82x54.c:						     (b_InputClockSelection != APCI1710_10MHZ)) {
staging/comedi/drivers/addi-data/APCI1710_82x54.c:											if (b_InputClockSelection == APCI1710_10MHZ) {
staging/comedi/drivers/addi-data/APCI1710_82x54.c:						if (((b_InputClockSelection == APCI1710_10MHZ) &&
staging/comedi/drivers/addi-data/APCI1710_82x54.c:										if ((b_InputClockSelection == APCI1710_10MHZ) && ((devpriv->s_BoardInfos.dw_MolduleConfiguration[b_ModulNbr] & 0x0000FFFFUL) > 0x3131)) {
staging/comedi/drivers/addi-data/APCI1710_82x54.h:#define APCI1710_10MHZ	10
staging/comedi/drivers/addi-data/APCI1710_82x54.h:#ifndef APCI1710_10MHZ
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:|                                                - APCI1710_30MHZ :          |
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:|                                                - APCI1710_33MHZ :          |
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:|                                                - APCI1710_40MHZ            |
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:					(b_PCIInputClock == APCI1710_33MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:					(b_PCIInputClock == APCI1710_40MHZ)) {
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:				if ((b_PCIInputClock == APCI1710_30MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:				}	/*  if ((b_PCIInputClock == APCI1710_30MHZ) || (b_PCIInputClock == APCI1710_33MHZ)) */
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:				}	/*  if ((b_PCIInputClock == APCI1710_30MHZ) || (b_PCIInputClock == APCI1710_33MHZ)) */
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:						if (((b_PCIInputClock == APCI1710_30MHZ) && (b_TimingUnit == 0) && (ul_TimingInterval >= 66) && (ul_TimingInterval <= 0xFFFFFFFFUL)) || ((b_PCIInputClock == APCI1710_30MHZ) && (b_TimingUnit == 1) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 143165576UL)) || ((b_PCIInputClock == APCI1710_30MHZ) && (b_TimingUnit == 2) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 143165UL)) || ((b_PCIInputClock == APCI1710_30MHZ) && (b_TimingUnit == 3) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 143UL)) || ((b_PCIInputClock == APCI1710_30MHZ) && (b_TimingUnit == 4) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 2UL)) || ((b_PCIInputClock == APCI1710_33MHZ) && (b_TimingUnit == 0) && (ul_TimingInterval >= 60) && (ul_TimingInterval <= 0xFFFFFFFFUL)) || ((b_PCIInputClock == APCI1710_33MHZ) && (b_TimingUnit == 1) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 130150240UL)) || ((b_PCIInputClock == APCI1710_33MHZ) && (b_TimingUnit == 2) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 130150UL)) || ((b_PCIInputClock == APCI1710_33MHZ) && (b_TimingUnit == 3) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 130UL)) || ((b_PCIInputClock == APCI1710_33MHZ) && (b_TimingUnit == 4) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 2UL)) || ((b_PCIInputClock == APCI1710_40MHZ) && (b_TimingUnit == 0) && (ul_TimingInterval >= 50) && (ul_TimingInterval <= 0xFFFFFFFFUL)) || ((b_PCIInputClock == APCI1710_40MHZ) && (b_TimingUnit == 1) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 107374182UL)) || ((b_PCIInputClock == APCI1710_40MHZ) && (b_TimingUnit == 2) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 107374UL)) || ((b_PCIInputClock == APCI1710_40MHZ) && (b_TimingUnit == 3) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 107UL)) || ((b_PCIInputClock == APCI1710_40MHZ) && (b_TimingUnit == 4) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 1UL))) {
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:										if (b_PCIInputClock != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:										if (b_PCIInputClock != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:										if (b_PCIInputClock != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:										if (b_PCIInputClock != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:										if (b_PCIInputClock != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:									if (b_PCIInputClock == APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:							if (((b_PCIInputClock == APCI1710_40MHZ) && (devpriv->s_BoardInfos.b_BoardVersion > 0)) || (b_PCIInputClock != APCI1710_40MHZ)) {
staging/comedi/drivers/addi-data/APCI1710_Chrono.c:								if (((b_PCIInputClock == APCI1710_40MHZ) && ((devpriv->s_BoardInfos.dw_MolduleConfiguration[b_ModulNbr] & 0xFFFF) >= 0x3131)) || (b_PCIInputClock != APCI1710_40MHZ)) {
staging/comedi/drivers/addi-data/APCI1710_Chrono.h:#define APCI1710_30MHZ			30
staging/comedi/drivers/addi-data/APCI1710_Chrono.h:#define APCI1710_33MHZ			33
staging/comedi/drivers/addi-data/APCI1710_Chrono.h:#define APCI1710_40MHZ			40
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:|						- APCI1710_30MHZ :           |
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:|						- APCI1710_30MHZ :           |
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:|						- APCI1710_33MHZ :           |
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:|						- APCI1710_33MHZ :           |
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:|						- APCI1710_40MHZ :           |
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:							APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:							APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:									APCI1710_DISABLE_40MHZ_FILTER;
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:										APCI1710_DISABLE_40MHZ_FREQUENCY;
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:									APCI1710_ENABLE_40MHZ_FILTER;
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:										APCI1710_ENABLE_40MHZ_FREQUENCY;
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:					(b_PCIInputClock == APCI1710_33MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:				(b_PCIInputClock == APCI1710_33MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:					(b_PCIInputClock == APCI1710_40MHZ)) {
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:				(b_PCIInputClock == APCI1710_40MHZ)) {
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:					if (((b_PCIInputClock == APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:				if ((b_PCIInputClock == APCI1710_30MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:			if ((b_PCIInputClock == APCI1710_30MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:				}	/*  if ((b_PCIInputClock == APCI1710_30MHZ) || (b_PCIInputClock == APCI1710_33MHZ) || (b_PCIInputClock == APCI1710_40MHZ)) */
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:				}	/*  if ((b_PCIInputClock == APCI1710_30MHZ) || (b_PCIInputClock == APCI1710_33MHZ) || (b_PCIInputClock == APCI1710_40MHZ)) */
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:						}	/*  if (b_PCIInputClock == APCI1710_40MHZ) */
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:						}	/*  if (b_PCIInputClock == APCI1710_40MHZ) */
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:							}	/*  if (b_PCIInputClock == APCI1710_40MHZ) */
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:							}	/*  if (b_PCIInputClock == APCI1710_40MHZ) */
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								}	/*  if (b_PCIInputClock == APCI1710_40MHZ) */
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								}	/*  if (b_PCIInputClock == APCI1710_40MHZ) */
staging/comedi/drivers/addi-data/APCI1710_INCCPT.c:								if (b_PCIInputClock == APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_INCCPT.h:#define APCI1710_30MHZ				30
staging/comedi/drivers/addi-data/APCI1710_INCCPT.h:#define APCI1710_33MHZ				33
staging/comedi/drivers/addi-data/APCI1710_INCCPT.h:#define APCI1710_40MHZ				40
staging/comedi/drivers/addi-data/APCI1710_INCCPT.h:#define APCI1710_DISABLE_40MHZ_FILTER		(~APCI1710_ENABLE_40MHZ_FILTER)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.h:#define APCI1710_DISABLE_40MHZ_FREQUENCY	(~APCI1710_ENABLE_40MHZ_FREQUENCY)
staging/comedi/drivers/addi-data/APCI1710_INCCPT.h:#define APCI1710_ENABLE_40MHZ_FILTER		0x80
staging/comedi/drivers/addi-data/APCI1710_INCCPT.h:#define APCI1710_ENABLE_40MHZ_FREQUENCY		0x40
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:|                                                   - APCI1710_30MHZ :       |
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_30MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:|                                                   - APCI1710_33MHZ :       |
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:|                                                   - APCI1710_40MHZ         |
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									APCI1710_40MHZ)
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:					(b_ClockSelection == APCI1710_33MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:					(b_ClockSelection == APCI1710_40MHZ)) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:				if ((b_ClockSelection == APCI1710_30MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:				}	/*  if ((b_ClockSelection == APCI1710_30MHZ) || (b_ClockSelection == APCI1710_33MHZ) || (b_ClockSelection == APCI1710_40MHZ)) */
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:				}	/*  if ((b_ClockSelection == APCI1710_30MHZ) || (b_ClockSelection == APCI1710_33MHZ) || (b_ClockSelection == APCI1710_40MHZ)) */
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:							if (((b_ClockSelection == APCI1710_30MHZ) && (b_TimingUnit == 0) && (ul_HighTiming >= 266) && (ul_HighTiming <= 0xFFFFFFFFUL)) || ((b_ClockSelection == APCI1710_30MHZ) && (b_TimingUnit == 1) && (ul_HighTiming >= 1) && (ul_HighTiming <= 571230650UL)) || ((b_ClockSelection == APCI1710_30MHZ) && (b_TimingUnit == 2) && (ul_HighTiming >= 1) && (ul_HighTiming <= 571230UL)) || ((b_ClockSelection == APCI1710_30MHZ) && (b_TimingUnit == 3) && (ul_HighTiming >= 1) && (ul_HighTiming <= 571UL)) || ((b_ClockSelection == APCI1710_30MHZ) && (b_TimingUnit == 4) && (ul_HighTiming >= 1) && (ul_HighTiming <= 9UL)) || ((b_ClockSelection == APCI1710_33MHZ) && (b_TimingUnit == 0) && (ul_HighTiming >= 242) && (ul_HighTiming <= 0xFFFFFFFFUL)) || ((b_ClockSelection == APCI1710_33MHZ) && (b_TimingUnit == 1) && (ul_HighTiming >= 1) && (ul_HighTiming <= 519691043UL)) || ((b_ClockSelection == APCI1710_33MHZ) && (b_TimingUnit == 2) && (ul_HighTiming >= 1) && (ul_HighTiming <= 519691UL)) || ((b_ClockSelection == APCI1710_33MHZ) && (b_TimingUnit == 3) && (ul_HighTiming >= 1) && (ul_HighTiming <= 520UL)) || ((b_ClockSelection == APCI1710_33MHZ) && (b_TimingUnit == 4) && (ul_HighTiming >= 1) && (ul_HighTiming <= 8UL)) || ((b_ClockSelection == APCI1710_40MHZ) && (b_TimingUnit == 0) && (ul_HighTiming >= 200) && (ul_HighTiming <= 0xFFFFFFFFUL)) || ((b_ClockSelection == APCI1710_40MHZ) && (b_TimingUnit == 1) && (ul_HighTiming >= 1) && (ul_HighTiming <= 429496729UL)) || ((b_ClockSelection == APCI1710_40MHZ) && (b_TimingUnit == 2) && (ul_HighTiming >= 1) && (ul_HighTiming <= 429496UL)) || ((b_ClockSelection == APCI1710_40MHZ) && (b_TimingUnit == 3) && (ul_HighTiming >= 1) && (ul_HighTiming <= 429UL)) || ((b_ClockSelection == APCI1710_40MHZ) && (b_TimingUnit == 4) && (ul_HighTiming >= 1) && (ul_HighTiming <= 7UL))) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:							if (((b_ClockSelection == APCI1710_30MHZ) && (b_TimingUnit == 0) && (ul_HighTiming >= 266) && (ul_HighTiming <= 0xFFFFFFFFUL)) || ((b_ClockSelection == APCI1710_30MHZ) && (b_TimingUnit == 1) && (ul_HighTiming >= 1) && (ul_HighTiming <= 571230650UL)) || ((b_ClockSelection == APCI1710_30MHZ) && (b_TimingUnit == 2) && (ul_HighTiming >= 1) && (ul_HighTiming <= 571230UL)) || ((b_ClockSelection == APCI1710_30MHZ) && (b_TimingUnit == 3) && (ul_HighTiming >= 1) && (ul_HighTiming <= 571UL)) || ((b_ClockSelection == APCI1710_30MHZ) && (b_TimingUnit == 4) && (ul_HighTiming >= 1) && (ul_HighTiming <= 9UL)) || ((b_ClockSelection == APCI1710_33MHZ) && (b_TimingUnit == 0) && (ul_HighTiming >= 242) && (ul_HighTiming <= 0xFFFFFFFFUL)) || ((b_ClockSelection == APCI1710_33MHZ) && (b_TimingUnit == 1) && (ul_HighTiming >= 1) && (ul_HighTiming <= 519691043UL)) || ((b_ClockSelection == APCI1710_33MHZ) && (b_TimingUnit == 2) && (ul_HighTiming >= 1) && (ul_HighTiming <= 519691UL)) || ((b_ClockSelection == APCI1710_33MHZ) && (b_TimingUnit == 3) && (ul_HighTiming >= 1) && (ul_HighTiming <= 520UL)) || ((b_ClockSelection == APCI1710_33MHZ) && (b_TimingUnit == 4) && (ul_HighTiming >= 1) && (ul_HighTiming <= 8UL)) || ((b_ClockSelection == APCI1710_40MHZ) && (b_TimingUnit == 0) && (ul_HighTiming >= 200) && (ul_HighTiming <= 0xFFFFFFFFUL)) || ((b_ClockSelection == APCI1710_40MHZ) && (b_TimingUnit == 1) && (ul_HighTiming >= 1) && (ul_HighTiming <= 429496729UL)) || ((b_ClockSelection == APCI1710_40MHZ) && (b_TimingUnit == 2) && (ul_HighTiming >= 1) && (ul_HighTiming <= 429496UL)) || ((b_ClockSelection == APCI1710_40MHZ) && (b_TimingUnit == 3) && (ul_HighTiming >= 1) && (ul_HighTiming <= 429UL)) || ((b_ClockSelection == APCI1710_40MHZ) && (b_TimingUnit == 4) && (ul_HighTiming >= 1) && (ul_HighTiming <= 7UL))) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:										if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:										if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:										if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:										if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:										if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:										if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:										if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:										if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:										if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:										if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection == APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:									if (b_ClockSelection != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:								if (b_ClockSelection == APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.c:								if (((b_ClockSelection == APCI1710_40MHZ) && (devpriv->s_BoardInfos.b_BoardVersion > 0)) || (b_ClockSelection != APCI1710_40MHZ)) {
staging/comedi/drivers/addi-data/APCI1710_Pwm.h:#define APCI1710_30MHZ		30
staging/comedi/drivers/addi-data/APCI1710_Pwm.h:#define APCI1710_33MHZ		33
staging/comedi/drivers/addi-data/APCI1710_Pwm.h:#define APCI1710_40MHZ		40
staging/comedi/drivers/addi-data/APCI1710_Ssi.c:|                                                 - APCI1710_30MHZ :         |
staging/comedi/drivers/addi-data/APCI1710_Ssi.c:								APCI1710_30MHZ
staging/comedi/drivers/addi-data/APCI1710_Ssi.c:|                                                 - APCI1710_33MHZ :         |
staging/comedi/drivers/addi-data/APCI1710_Ssi.c:								APCI1710_33MHZ)
staging/comedi/drivers/addi-data/APCI1710_Ssi.c:								if ((b_PCIInputClock == APCI1710_30MHZ && (ul_SSIOutputClock > 228 && ul_SSIOutputClock <= 5000000UL)) || (b_PCIInputClock == APCI1710_33MHZ && (ul_SSIOutputClock > 251 && ul_SSIOutputClock <= 5000000UL))) {
staging/comedi/drivers/addi-data/APCI1710_Ssi.h:#define APCI1710_30MHZ		30
staging/comedi/drivers/addi-data/APCI1710_Ssi.h:#define APCI1710_33MHZ		33
staging/comedi/drivers/addi-data/APCI1710_Ssi.h:#define APCI1710_40MHZ		40
staging/comedi/drivers/addi-data/APCI1710_Tor.c:|                                                - APCI1710_30MHZ :          |
staging/comedi/drivers/addi-data/APCI1710_Tor.c:|                                                - APCI1710_33MHZ :          |
staging/comedi/drivers/addi-data/APCI1710_Tor.c:|                                                - APCI1710_40MHZ            |
staging/comedi/drivers/addi-data/APCI1710_Tor.c:					(b_PCIInputClock == APCI1710_33MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_Tor.c:					(b_PCIInputClock == APCI1710_40MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_Tor.c:				if ((b_PCIInputClock == APCI1710_30MHZ) ||
staging/comedi/drivers/addi-data/APCI1710_Tor.c:				}	/*  if ((b_PCIInputClock == APCI1710_30MHZ) || (b_PCIInputClock == APCI1710_33MHZ)) */
staging/comedi/drivers/addi-data/APCI1710_Tor.c:				}	/*  if ((b_PCIInputClock == APCI1710_30MHZ) || (b_PCIInputClock == APCI1710_33MHZ)) */
staging/comedi/drivers/addi-data/APCI1710_Tor.c:						if (((b_PCIInputClock == APCI1710_30MHZ) && (b_TimingUnit == 0) && (ul_TimingInterval >= 133) && (ul_TimingInterval <= 0xFFFFFFFFUL)) || ((b_PCIInputClock == APCI1710_30MHZ) && (b_TimingUnit == 1) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 571230650UL)) || ((b_PCIInputClock == APCI1710_30MHZ) && (b_TimingUnit == 2) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 571230UL)) || ((b_PCIInputClock == APCI1710_30MHZ) && (b_TimingUnit == 3) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 571UL)) || ((b_PCIInputClock == APCI1710_30MHZ) && (b_TimingUnit == 4) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 9UL)) || ((b_PCIInputClock == APCI1710_33MHZ) && (b_TimingUnit == 0) && (ul_TimingInterval >= 121) && (ul_TimingInterval <= 0xFFFFFFFFUL)) || ((b_PCIInputClock == APCI1710_33MHZ) && (b_TimingUnit == 1) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 519691043UL)) || ((b_PCIInputClock == APCI1710_33MHZ) && (b_TimingUnit == 2) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 519691UL)) || ((b_PCIInputClock == APCI1710_33MHZ) && (b_TimingUnit == 3) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 520UL)) || ((b_PCIInputClock == APCI1710_33MHZ) && (b_TimingUnit == 4) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 8UL)) || ((b_PCIInputClock == APCI1710_40MHZ) && (b_TimingUnit == 0) && (ul_TimingInterval >= 100) && (ul_TimingInterval <= 0xFFFFFFFFUL)) || ((b_PCIInputClock == APCI1710_40MHZ) && (b_TimingUnit == 1) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 429496729UL)) || ((b_PCIInputClock == APCI1710_40MHZ) && (b_TimingUnit == 2) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 429496UL)) || ((b_PCIInputClock == APCI1710_40MHZ) && (b_TimingUnit == 3) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 429UL)) || ((b_PCIInputClock == APCI1710_40MHZ) && (b_TimingUnit == 4) && (ul_TimingInterval >= 1) && (ul_TimingInterval <= 7UL)) || ((b_PCIInputClock == APCI1710_GATE_INPUT) && (ul_TimingInterval >= 2))) {
staging/comedi/drivers/addi-data/APCI1710_Tor.c:											if (b_PCIInputClock != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Tor.c:											if (b_PCIInputClock != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Tor.c:											if (b_PCIInputClock != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Tor.c:											if (b_PCIInputClock != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Tor.c:											if (b_PCIInputClock != APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Tor.c:									if (b_PCIInputClock == APCI1710_40MHZ) {
staging/comedi/drivers/addi-data/APCI1710_Tor.c:							if (((b_PCIInputClock == APCI1710_40MHZ) && (devpriv->s_BoardInfos.b_BoardVersion > 0)) || (b_PCIInputClock != APCI1710_40MHZ)) {
staging/comedi/drivers/addi-data/APCI1710_Tor.c:								if (((b_PCIInputClock == APCI1710_40MHZ) && ((devpriv->s_BoardInfos.dw_MolduleConfiguration[b_ModulNbr] & 0xFFFF) >= 0x3131)) || ((b_PCIInputClock == APCI1710_GATE_INPUT) && ((devpriv->s_BoardInfos.dw_MolduleConfiguration[b_ModulNbr] & 0xFFFF) >= 0x3132)) || (b_PCIInputClock == APCI1710_30MHZ) || (b_PCIInputClock == APCI1710_33MHZ)) {
staging/comedi/drivers/addi-data/APCI1710_Tor.h:#define APCI1710_30MHZ		30
staging/comedi/drivers/addi-data/APCI1710_Tor.h:#define APCI1710_33MHZ		33
staging/comedi/drivers/addi-data/APCI1710_Tor.h:#define APCI1710_40MHZ		40
staging/comedi/drivers/addi-data/hwdrv_apci1500.c:|                                              0     APCI1500_115_KHZ
staging/comedi/drivers/addi-data/hwdrv_apci1500.c:|                                              1     APCI1500_3_6_KHZ        |
staging/comedi/drivers/addi-data/hwdrv_apci1500.c:|                     unsigned int *data         : Data Pointer to read status                                                       data[0]                : 2     APCI1500_1_8_KHZ
staging/comedi/drivers/amplc_pci224.c:			cmd->scan_begin_arg = div2 * TIMEBASE_10MHZ;
staging/comedi/drivers/amplc_pci224.c:			    cmd->scan_begin_arg < TIMEBASE_10MHZ) {
staging/comedi/drivers/amplc_pci224.c:#define CLK_100KHZ	3	/* internal 100 kHz clock */
staging/comedi/drivers/amplc_pci224.c:#define CLK_10KHZ	4	/* internal 10 kHz clock */
staging/comedi/drivers/amplc_pci224.c:#define CLK_10MHZ	1	/* internal 10 MHz clock */
staging/comedi/drivers/amplc_pci224.c:#define CLK_1KHZ	5	/* internal 1 kHz clock */
staging/comedi/drivers/amplc_pci224.c:#define CLK_1MHZ	2	/* internal 1 MHz clock */
staging/comedi/drivers/amplc_pci224.c:#define TIMEBASE_100KHZ		10000
staging/comedi/drivers/amplc_pci224.c:#define TIMEBASE_10KHZ		100000
staging/comedi/drivers/amplc_pci224.c:#define TIMEBASE_10MHZ		100
staging/comedi/drivers/amplc_pci224.c:#define TIMEBASE_1KHZ		1000000
staging/comedi/drivers/amplc_pci224.c:#define TIMEBASE_1MHZ		1000
staging/comedi/drivers/amplc_pci224.c:		div2 = cmd->scan_begin_arg / TIMEBASE_10MHZ;
staging/comedi/drivers/amplc_pci224.c:		div2 = cmd->scan_begin_arg / TIMEBASE_10MHZ;
staging/comedi/drivers/amplc_pci224.c:		div2 += (round + cmd->scan_begin_arg % TIMEBASE_10MHZ) /
staging/comedi/drivers/amplc_pci224.c:		div2 += (round + cmd->scan_begin_arg % TIMEBASE_10MHZ) /
staging/comedi/drivers/amplc_pci224.c:			outb(CLK_CONFIG(0, CLK_10MHZ),
staging/comedi/drivers/amplc_pci224.c:			outb(CLK_CONFIG(2, CLK_10MHZ),
staging/comedi/drivers/amplc_pci224.c:			pci224_cascade_ns_to_timer(TIMEBASE_10MHZ, &div1, &div2,
staging/comedi/drivers/amplc_pci224.c:			pci224_cascade_ns_to_timer(TIMEBASE_10MHZ, &div1, &div2,
staging/comedi/drivers/amplc_pci224.c:			round = TIMEBASE_10MHZ - 1;
staging/comedi/drivers/amplc_pci224.c:			round = TIMEBASE_10MHZ - 1;
staging/comedi/drivers/amplc_pci224.c:			round = TIMEBASE_10MHZ / 2;
staging/comedi/drivers/amplc_pci224.c:			round = TIMEBASE_10MHZ / 2;
staging/comedi/drivers/amplc_pci224.c:		    TIMEBASE_10MHZ;
staging/comedi/drivers/amplc_pci224.c:		    TIMEBASE_10MHZ;
staging/comedi/drivers/amplc_pci230.c:	[CLK_100KHZ] = TIMEBASE_100KHZ,
staging/comedi/drivers/amplc_pci230.c:	[CLK_10KHZ] = TIMEBASE_10KHZ,
staging/comedi/drivers/amplc_pci230.c:	[CLK_10MHZ] = TIMEBASE_10MHZ,
staging/comedi/drivers/amplc_pci230.c:	[CLK_1KHZ] = TIMEBASE_1KHZ,
staging/comedi/drivers/amplc_pci230.c:	[CLK_1MHZ] = TIMEBASE_1MHZ,
staging/comedi/drivers/amplc_pci230.c:#define CLK_100KHZ	3	/* internal 100 kHz clock */
staging/comedi/drivers/amplc_pci230.c:#define CLK_10KHZ	4	/* internal 10 kHz clock */
staging/comedi/drivers/amplc_pci230.c:#define CLK_10MHZ	1	/* internal 10 MHz clock */
staging/comedi/drivers/amplc_pci230.c:#define CLK_1KHZ	5	/* internal 1 kHz clock */
staging/comedi/drivers/amplc_pci230.c:#define CLK_1MHZ	2	/* internal 1 MHz clock */
staging/comedi/drivers/amplc_pci230.c:#define TIMEBASE_100KHZ		10000
staging/comedi/drivers/amplc_pci230.c:#define TIMEBASE_10KHZ		100000
staging/comedi/drivers/amplc_pci230.c:#define TIMEBASE_10MHZ		100
staging/comedi/drivers/amplc_pci230.c:#define TIMEBASE_1KHZ		1000000
staging/comedi/drivers/amplc_pci230.c:#define TIMEBASE_1MHZ		1000
staging/comedi/drivers/amplc_pci230.c:	for (clk_src = CLK_10MHZ;; clk_src++) {
staging/comedi/drivers/amplc_pci230.c:		if ((cnt <= 65536) || (clk_src == CLK_1KHZ))
staging/comedi/drivers/das16.c:#define   DAS1600_CLK_10MHZ		0x01
staging/comedi/drivers/das16.c:	if (status & DAS1600_CLK_10MHZ) {
staging/comedi/drivers/das16.c:	return HZ / 20;
staging/comedi/drivers/das16.c: * to deal with possibility of dynamic HZ patches  */
staging/comedi/drivers/das6402.c:	b = EXTEND | MHZ;
staging/comedi/drivers/das6402.c:	b = MHZ | CLRINT | CLRXTR | CLRXIN;
staging/comedi/drivers/das6402.c:#define MHZ 0x80		/* 10 MHz clock */
staging/comedi/drivers/dt9812.c:			      buf, buf_size, &count, HZ * 1);
staging/comedi/drivers/dt9812.c:			      &cmd, 32, &count, HZ * 1);
staging/comedi/drivers/dt9812.c:			      &cmd, 32, &count, HZ * 1);
staging/comedi/drivers/dt9812.c:			      &cmd, 32, &count, HZ * 1);
staging/comedi/drivers/dt9812.c:			      &cmd, 32, &count, HZ * 1);
staging/comedi/drivers/dt9812.c:			      value, reg_count, &count, HZ * 1);
staging/comedi/drivers/me_daq.c:	schedule_timeout(sec * HZ);
staging/comedi/drivers/ni_atmio16d.c:			base_clock = CLOCK_100_KHZ;
staging/comedi/drivers/ni_atmio16d.c:		base_clock = CLOCK_100_KHZ;
staging/comedi/drivers/ni_atmio16d.c:			base_clock = CLOCK_10_KHZ;
staging/comedi/drivers/ni_atmio16d.c:		base_clock = CLOCK_10_KHZ;
staging/comedi/drivers/ni_atmio16d.c:			base_clock = CLOCK_1_KHZ;
staging/comedi/drivers/ni_atmio16d.c:		base_clock = CLOCK_1_KHZ;
staging/comedi/drivers/ni_atmio16d.c:			base_clock = CLOCK_1_MHZ;
staging/comedi/drivers/ni_atmio16d.c:		base_clock = CLOCK_1_MHZ;
staging/comedi/drivers/ni_atmio16d.c:#define CLOCK_100_HZ	0x8F25
staging/comedi/drivers/ni_atmio16d.c:#define CLOCK_100_KHZ	0x8C25
staging/comedi/drivers/ni_atmio16d.c:#define CLOCK_10_KHZ	0x8D25
staging/comedi/drivers/ni_atmio16d.c:#define CLOCK_1_KHZ		0x8E25
staging/comedi/drivers/ni_atmio16d.c:#define CLOCK_1_MHZ		0x8B25
staging/comedi/drivers/ni_mio_common.c:	const int timeout = HZ;
staging/comedi/drivers/pcl818.c:	    jiffies + HZ / devpriv->rtc_freq + 2 * HZ / 100;
staging/comedi/drivers/pcl818.c:			  jiffies + HZ / devpriv->rtc_freq + 2 * HZ / 100);
staging/comedi/drivers/pcl818.c:			  jiffies + HZ / devpriv->rtc_freq + 2 * HZ / 100);
staging/comedi/drivers/rtd520.h:#define CUTC0_8MHZ                 0x0	/*  8MHz */
staging/comedi/drivers/rtd520.h:#define CUTC1_8MHZ                 0x0	/*  8MHz */
staging/comedi/drivers/rtd520.h:#define CUTC2_8MHZ                 0x0	/*  8MHz */
staging/comedi/drivers/serial2002.c:						   elapsed) * HZ) / 10000);
staging/comedi/drivers/vmk80xx.c:	usb_bulk_msg(dev->udev, rx_pipe, dev->usb_rx_buf, size, NULL, HZ * 10);
staging/comedi/drivers/vmk80xx.c:	usb_bulk_msg(dev->udev, rx_pipe, rx, 2, NULL, HZ * 10);
staging/comedi/drivers/vmk80xx.c:	usb_bulk_msg(dev->udev, rx_pipe, rx, 64, &cnt, HZ * 10);
staging/cptm1217/clearpad_tm1217.c:#define SAMPLING_FREQ			80	/* Frequency in HZ */
staging/crystalhd/crystalhd_hw.c:	 * (6.75MHZ * 40us = 0x10E)
staging/crystalhd/crystalhd_misc.h:		schedule_timeout((HZ / 100 > 1) ? HZ / 100 : 1);	\
staging/crystalhd/crystalhd_misc.h:	unsigned long end = jiffies + ((timeout * HZ) / 1000);		\
staging/csr/csr_framework_ext.c:    t = ((sleepTimeInMs * HZ) + 999) / 1000;
staging/csr/csr_wifi_hip_card_sdio.c:        card->sdio_clock_speed = UNIFI_SDIO_CLOCK_INIT_HZ;
staging/csr/csr_wifi_hip_card_sdio.c:        card->sdio_clock_speed = UNIFI_SDIO_CLOCK_INIT_HZ;
staging/csr/csr_wifi_hip_card_sdio.c:                card->sdio_clock_speed = UNIFI_SDIO_CLOCK_MAX_HZ;
staging/csr/csr_wifi_hip_card_sdio.c:                card->sdio_clock_speed = UNIFI_SDIO_CLOCK_SAFE_HZ;
staging/csr/csr_wifi_hip_card_sdio.c:            card->sdio_clock_speed = UNIFI_SDIO_CLOCK_SAFE_HZ;
staging/csr/csr_wifi_hip_card_sdio.c:            card->sdio_clock_speed = UNIFI_SDIO_CLOCK_SAFE_HZ;
staging/csr/csr_wifi_hip_card_sdio.c:    card->sdio_clock_speed = UNIFI_SDIO_CLOCK_SAFE_HZ;
staging/csr/csr_wifi_hip_card_sdio.c:        csrResult = CsrSdioMaxBusClockFrequencySet(card->sdio_if, UNIFI_SDIO_CLOCK_INIT_HZ);
staging/csr/csr_wifi_hip_card_sdio.c:        csrResult = CsrSdioMaxBusClockFrequencySet(card->sdio_if, UNIFI_SDIO_CLOCK_INIT_HZ);
staging/csr/csr_wifi_hip_card_sdio.c:    csrResult = CsrSdioMaxBusClockFrequencySet(card->sdio_if, UNIFI_SDIO_CLOCK_SAFE_HZ);
staging/csr/csr_wifi_hip_card_sdio.c:         * full speed UNIFI_SDIO_CLOCK_MAX_HZ will be set once the f/w tells us
staging/csr/csr_wifi_hip_card_sdio.c:         * initial SDIO clock speed, faster than UNIFI_SDIO_CLOCK_SAFE_HZ, for
staging/csr/csr_wifi_hip_card_sdio.c:            sr = CsrSdioMaxBusClockFrequencySet(card->sdio_if, UNIFI_SDIO_CLOCK_SAFE_HZ);
staging/csr/csr_wifi_hip_card_sdio.c:            sr = CsrSdioMaxBusClockFrequencySet(card->sdio_if, UNIFI_SDIO_CLOCK_SAFE_HZ);
staging/csr/csr_wifi_hip_card_sdio.c:                                                       UNIFI_SDIO_CLOCK_MAX_HZ);
staging/csr/csr_wifi_hip_card_sdio.c:                                                       UNIFI_SDIO_CLOCK_SAFE_HZ);
staging/csr/csr_wifi_hip_card_sdio_intr.c:            card->sdio_clock_speed = UNIFI_SDIO_CLOCK_MAX_HZ;  /* log the new freq */
staging/csr/csr_wifi_hip_card_sdio_intr.c:        csrResult = CsrSdioMaxBusClockFrequencySet(card->sdio_if, UNIFI_SDIO_CLOCK_MAX_HZ);
staging/csr/csr_wifi_hip_card_sdio_intr.c:     * final speed reached will be UNIFI_SDIO_CLOCK_MAX_HZ.
staging/csr/csr_wifi_hip_download.c:        card->sdio_clock_speed = UNIFI_SDIO_CLOCK_INIT_HZ;
staging/csr/csr_wifi_hip_download.c:        csrResult = CsrSdioMaxBusClockFrequencySet(card->sdio_if, UNIFI_SDIO_CLOCK_INIT_HZ);
staging/csr/csr_wifi_hip_download.c:         * faster than UNIFI_SDIO_CLOCK_SAFE_HZ, to speed up the f/w download.
staging/csr/csr_wifi_hip_unifi.h:#define UNIFI_SDIO_CLOCK_INIT_HZ    12500000 /* Hz */
staging/csr/csr_wifi_hip_unifi.h:#define UNIFI_SDIO_CLOCK_MAX_HZ    50000000  /* Hz */
staging/csr/csr_wifi_hip_unifi.h:#define UNIFI_SDIO_CLOCK_SAFE_HZ    1000000  /* Hz */
staging/csr/csr_wifi_hip_unifi.h: * initialisation), unless UNIFI_SDIO_CLOCK_SAFE_HZ applies.
staging/csr/csr_wifi_sme_prim.h:    CSR_WIFI_SME_RADIO_IF_GHZ_2_4 - Indicates the 2.4 GHZ frequency
staging/csr/csr_wifi_sme_prim.h:    CSR_WIFI_SME_RADIO_IF_GHZ_5_0 - Future use: currently not supported
staging/csr/csr_wifi_sme_prim.h:#define CSR_WIFI_SME_RADIO_IF_GHZ_2_4   ((CsrWifiSmeRadioIF) 0x01)
staging/csr/csr_wifi_sme_prim.h:#define CSR_WIFI_SME_RADIO_IF_GHZ_5_0   ((CsrWifiSmeRadioIF) 0x02)
staging/csr/putest.c:            r = CsrSdioMaxBusClockFrequencySet(priv->sdio, UNIFI_SDIO_CLOCK_SAFE_HZ);
staging/csr/sme_wext.c:            (connectionInfo.networkType80211 == CSR_WIFI_SME_RADIO_IF_GHZ_5_0));
staging/csr/unifi_sme.c:        staConfig.ifIndex = CSR_WIFI_SME_RADIO_IF_GHZ_2_4;
staging/csr/unifi_sme.c:        staConfig.ifIndex = CSR_WIFI_SME_RADIO_IF_GHZ_5_0;
staging/cxt1e1/functions.c:    wdp->ticks = (HZ) * (usec / 1000) / 1000;
staging/et131x/et131x.c:	adapter->error_timer.expires = jiffies + TX_ERROR_PERIOD * HZ / 1000;
staging/et131x/et131x.c:#define ET131X_TX_TIMEOUT	(1 * HZ)
staging/et131x/et131x.c:					  TX_ERROR_PERIOD * HZ / 1000);
staging/frontier/alphatrack.c:						 2 * HZ);
staging/frontier/tranzport.c:						2 * HZ);
staging/ft1000/ft1000-pcmcia/ft1000_hw.c:			poll_timer.expires = jiffies + (2*HZ);
staging/ft1000/ft1000-pcmcia/ft1000_hw.c:			poll_timer.expires = jiffies + (2*HZ);
staging/ft1000/ft1000-pcmcia/ft1000_hw.c:			poll_timer.expires = jiffies + (2*HZ);
staging/ft1000/ft1000-pcmcia/ft1000_hw.c://	poll_timer.expires = jiffies + (2*HZ);
staging/ft1000/ft1000-pcmcia/ft1000_hw.c:	poll_timer.expires = jiffies + (2 * HZ);
staging/ft1000/ft1000-pcmcia/ft1000_hw.c:	poll_timer.expires = jiffies + (2 * HZ);
staging/iio/adc/ad7606_spi.c:#define MAX_SPI_FREQ_HZ		23500000	/* VDRIVE above 4.75 V */
staging/iio/addac/adt7316-spi.c:#define ADT7316_SPI_MAX_FREQ_HZ		5000000
staging/iio/addac/adt7316-spi.c:	if (spi_dev->max_speed_hz > ADT7316_SPI_MAX_FREQ_HZ) {
staging/iio/light/tsl2563.c:		schedule_delayed_work(&chip->poweroff_work, 5 * HZ);
staging/iio/light/tsl2563.c:		schedule_delayed_work(&chip->poweroff_work, 5 * HZ);
staging/iio/light/tsl2563.c:	schedule_delayed_work(&chip->poweroff_work, 5 * HZ);
staging/iio/magnetometer/ak8975.c:	AK8975_REG_HXL, AK8975_REG_HYL, AK8975_REG_HZL,
staging/iio/magnetometer/ak8975.c:#define AK8975_REG_HZH			0x08
staging/iio/magnetometer/ak8975.c:#define AK8975_REG_HZL			0x07
staging/iio/resolver/ad2s1200.c:#define AD2S1200_HZ	8192000
staging/iio/resolver/ad2s1200.c:#define AD2S1200_TSCLK	(1000000000/AD2S1200_HZ)
staging/iio/resolver/ad2s1200.c:	spi->max_speed_hz = AD2S1200_HZ;
staging/keucr/transport.c:				 0, us->ifnum, us->iobuf, 1, HZ);
staging/keucr/transport.c:		NULL, 0, 3*HZ);
staging/keucr/transport.c:			request, requesttype, value, index, data, size,	5*HZ);
staging/keucr/transport.c:			test_bit(US_FLIDX_DISCONNECTING, &us->dflags),	HZ*6);
staging/keucr/usb.c:				delay_use * HZ);
staging/line6/capture.c:	int timeout = HZ;
staging/line6/driver.c:				   buffer, 2, &partial, LINE6_TIMEOUT * HZ);
staging/line6/driver.c:				   buffer, 3, &partial, LINE6_TIMEOUT * HZ);
staging/line6/driver.c:			      LINE6_TIMEOUT * HZ);
staging/line6/driver.c:			      LINE6_TIMEOUT * HZ);
staging/line6/driver.c:				      LINE6_TIMEOUT * HZ);
staging/line6/driver.c:			      NULL, 0, LINE6_TIMEOUT * HZ);
staging/line6/driver.c:					   &partial, LINE6_TIMEOUT * HZ);
staging/line6/driver.c:				      &status, 1, LINE6_TIMEOUT * HZ);
staging/line6/driver.c:	timer->expires = jiffies + msecs * HZ / 1000;
staging/line6/playback.c:	int timeout = HZ;
staging/line6/toneport.c:			      cmd1, cmd2, NULL, 0, LINE6_TIMEOUT * HZ);
staging/line6/toneport.c:	toneport->timer.expires = jiffies + TONEPORT_PCM_DELAY * HZ;
staging/media/as102/as102_fe.c:		tune_args->bandwidth = BW_6_MHZ;
staging/media/as102/as102_fe.c:		tune_args->bandwidth = BW_7_MHZ;
staging/media/as102/as102_fe.c:		tune_args->bandwidth = BW_8_MHZ;
staging/media/as102/as102_fe.c:		tune_args->bandwidth = BW_8_MHZ;
staging/media/as102/as10x_types.h:#define BW_5_MHZ		0x00
staging/media/as102/as10x_types.h:#define BW_6_MHZ		0x01
staging/media/as102/as10x_types.h:#define BW_7_MHZ		0x02
staging/media/as102/as10x_types.h:#define BW_8_MHZ		0x03
staging/media/dt3155v4l/dt3155v4l.c:	/* FIXME: pos_ref & neg_ref depend on VT_50HZ */
staging/media/dt3155v4l/dt3155v4l.c:static const u8 csr2_init = VT_50HZ;
staging/media/dt3155v4l/dt3155v4l.c:static const u8 csr2_init = VT_60HZ;
staging/media/dt3155v4l/dt3155v4l.h:#define VT_50HZ       0x04
staging/media/dt3155v4l/dt3155v4l.h:#define VT_60HZ       0x00
staging/media/go7007/go7007-driver.c:				go->interrupt_available, 5*HZ) < 0) {
staging/media/lirc/lirc_igorplugusb.c:		      /*timeout*/HZ * USB_CTRL_GET_TIMEOUT);
staging/media/lirc/lirc_igorplugusb.c:			      /*timeout*/HZ * USB_CTRL_GET_TIMEOUT);
staging/media/lirc/lirc_igorplugusb.c:		/*timeout*/HZ * USB_CTRL_GET_TIMEOUT);
staging/media/lirc/lirc_serial.c:	loops_per_sec *= HZ;
staging/media/lirc/lirc_sir.c:#define SIR_TIMEOUT	(HZ*5/100)
staging/media/lirc/lirc_zilog.c:			schedule_timeout((100 * HZ + 999) / 1000);
staging/media/lirc/lirc_zilog.c:			schedule_timeout((100 * HZ + 999) / 1000);
staging/media/lirc/lirc_zilog.c:		schedule_timeout((260 * HZ) / 1000);
staging/media/lirc/lirc_zilog.c:		schedule_timeout((50 * HZ + 999) / 1000);
staging/media/lirc/lirc_zilog.c:			schedule_timeout(HZ/2);
staging/media/solo6x10/core.c:			SOLO6010_SYS_CFG_FEEDBACKDIV((SOLO_CLOCK_MHZ * 2) - 2) |
staging/media/solo6x10/core.c:			       SOLO6110_PLL_RANGE_5_10MHZ |
staging/media/solo6x10/core.c:	solo_reg_write(solo_dev, SOLO_TIMER_CLOCK_NUM, SOLO_CLOCK_MHZ - 1);
staging/media/solo6x10/core.c:		u32 sys_clock_MHz = SOLO_CLOCK_MHZ;
staging/media/solo6x10/g723.c:	clk_div = SOLO_CLOCK_MHZ / (SAMPLERATE * (BITRATE * 2) * 2);
staging/media/solo6x10/i2c.c:	timeout = HZ / 2;
staging/media/solo6x10/p2m.c:	timeout = wait_for_completion_timeout(&p2m_dev->completion, HZ);
staging/media/solo6x10/registers.h:#define   SOLO6110_PLL_RANGE_13_26MHZ		(3 << 20)
staging/media/solo6x10/registers.h:#define   SOLO6110_PLL_RANGE_21_42MHZ		(4 << 20)
staging/media/solo6x10/registers.h:#define   SOLO6110_PLL_RANGE_34_68MHZ		(5 << 20)
staging/media/solo6x10/registers.h:#define   SOLO6110_PLL_RANGE_5_10MHZ		(1 << 20)
staging/media/solo6x10/registers.h:#define   SOLO6110_PLL_RANGE_54_108MHZ		(6 << 20)
staging/media/solo6x10/registers.h:#define   SOLO6110_PLL_RANGE_8_16MHZ		(2 << 20)
staging/media/solo6x10/registers.h:#define   SOLO6110_PLL_RANGE_88_200MHZ		(7 << 20)
staging/media/solo6x10/solo6x10.h:#define SOLO_CLOCK_MHZ			108
staging/media/solo6x10/v4l2.c:		long timeout = schedule_timeout_interruptible(HZ);
staging/media/solo6x10/v4l2-enc.c:		long timeout = schedule_timeout_interruptible(HZ);
staging/mei/hw.h:#define MEI_INTEROP_TIMEOUT    (HZ * 7)
staging/mei/init.c:		 timeout * HZ);
staging/mei/interrupt.c:	schedule_delayed_work(&dev->timer_work, 2 * HZ);
staging/mei/iorw.c:			timeout * HZ);
staging/mei/main.c:	schedule_delayed_work(&dev->timer_work, HZ);
staging/mei/main.c:	schedule_delayed_work(&dev->timer_work, HZ);
staging/mei/wd.c:					dev->wd_stopped, 10 * HZ);
staging/octeon/ethernet.c:				   &cvm_oct_rx_refill_work, HZ);
staging/octeon/ethernet.c:						   &priv->port_periodic_work, HZ);
staging/octeon/ethernet.c:	queue_delayed_work(cvm_oct_poll_queue, &cvm_oct_rx_refill_work, HZ);
staging/octeon/ethernet.c:		queue_delayed_work(cvm_oct_poll_queue, &priv->port_periodic_work, HZ);
staging/olpc_dcon/olpc_dcon.c:					   dcon->switched == true, HZ);
staging/olpc_dcon/olpc_dcon.c:		t = schedule_timeout(HZ/2);
staging/ozwpan/ozhcd.c:			if (time_after(now, urbl->submit_jiffies+HZ/2)) {
staging/ozwpan/ozproto.h:#define OZ_CONNECTION_TOUT_J	(2*HZ)
staging/ozwpan/ozproto.h:#define oz_ms_to_jiffies(__x)	(((__x)*1000)/HZ)
staging/ozwpan/ozproto.h:#define OZ_PRESLEEP_TOUT_J	(11*HZ)
staging/ozwpan/ozusbsvc.c:		unsigned long tout = jiffies + HZ;
staging/panel/panel.c:#define INPUT_POLL_TIME		(HZ/50)
staging/panel/panel.c:		schedule_timeout((ms * HZ + 999) / 1000);
staging/prima/CORE/BAP/src/bapRsnSsmServices.h:#define ANI_SSM_MAX_AUTHZONE_LEN  32
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_19P2_MHZ_PMIC_CLK_ENABLED_DEFAULT               (0)
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_19P2_MHZ_PMIC_CLK_ENABLED_MAX                   (1)
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_19P2_MHZ_PMIC_CLK_ENABLED_MIN                   (0)
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_19P2_MHZ_PMIC_CLK_ENABLED_NAME                  "19p2MhzPmicClkEnabled"
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_CHANNEL_BONDING_MODE_24GHZ_NAME    "gChannelBondingMode24GHz"
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_CHANNEL_BONDING_MODE_5GHZ_NAME     "gChannelBondingMode5GHz"
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_SHORT_GI_20MHZ_DEFAULT             WNI_CFG_SHORT_GI_20MHZ_STADEF
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_SHORT_GI_20MHZ_MAX                 WNI_CFG_SHORT_GI_20MHZ_STAMAX
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_SHORT_GI_20MHZ_MIN                 WNI_CFG_SHORT_GI_20MHZ_STAMIN
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_SHORT_GI_20MHZ_NAME                "gShortGI20Mhz"
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_SHORT_GI_40MHZ_DEFAULT             1
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_SHORT_GI_40MHZ_MAX                 1
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_SHORT_GI_40MHZ_MIN                 0
staging/prima/CORE/HDD/inc/wlan_hdd_cfg.h:#define CFG_SHORT_GI_40MHZ_NAME                "gShortGI40Mhz"
staging/prima/CORE/HDD/inc/wlan_hdd_wext.h:#define MHZ 6
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .band       = IEEE80211_BAND_2GHZ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .band       = IEEE80211_BAND_2GHZ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .band =  IEEE80211_BAND_2GHZ, \
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .band     = IEEE80211_BAND_5GHZ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .band =  IEEE80211_BAND_5GHZ, \
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .channels = hdd_channels_2_4_GHZ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .channels = hdd_channels_5_GHZ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .channels = hdd_social_channels_2_4_GHZ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:#define HDD2GHZCHAN(freq, chan, flag)   {     \
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:#define HDD5GHZCHAN(freq, chan, flag)   {     \
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    else if ((chan_no > ARRAY_SIZE(hdd_channels_2_4_GHZ)) &&
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        freq = ieee80211_channel_to_frequency(chan_no, IEEE80211_BAND_2GHZ);
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        freq = ieee80211_channel_to_frequency(chan_no, IEEE80211_BAND_2GHZ);
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        freq = ieee80211_channel_to_frequency(chan_no, IEEE80211_BAND_5GHZ);
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        freq = ieee80211_channel_to_frequency(chan_no, IEEE80211_BAND_5GHZ);
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2412, 1, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2412, 1, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2417, 2, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2422, 3, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2427, 4, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2432, 5, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2437, 6, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2437, 6, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2442, 7, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2447, 8, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2452, 9, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2457, 10, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2462, 11, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2462, 11, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2467, 12, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2472, 13, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD2GHZCHAN(2484, 14, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5180, 36, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5200, 40, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5220, 44, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5240, 48, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5260, 52, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5280, 56, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5300, 60, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5320, 64, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5500,100, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5520,104, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5540,108, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5560,112, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5580,116, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5600,120, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5620,124, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5640,128, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5660,132, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5680,136, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5700,140, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5745,149, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5765,153, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5785,157, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5805,161, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    HDD5GHZCHAN(5825,165, 0) ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    if (chan_no <= ARRAY_SIZE(hdd_channels_2_4_GHZ))
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    if (chan_no <= ARRAY_SIZE(hdd_channels_2_4_GHZ) &&
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        if (IEEE80211_BAND_5GHZ == params->channel->band)
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    int freq = chan->center_freq; /* freq is in MHZ */
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .n_channels = ARRAY_SIZE(hdd_channels_2_4_GHZ),
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .n_channels = ARRAY_SIZE(hdd_channels_5_GHZ),
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:    .n_channels = ARRAY_SIZE(hdd_social_channels_2_4_GHZ),
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:                sinfo->txrate.flags |= RATE_INFO_FLAGS_40_MHZ_WIDTH;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:                sinfo->txrate.flags |= RATE_INFO_FLAGS_40_MHZ_WIDTH;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:static struct ieee80211_channel hdd_channels_2_4_GHZ[] =
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:static struct ieee80211_channel hdd_channels_5_GHZ[] =
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:static struct ieee80211_channel hdd_social_channels_2_4_GHZ[] =
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:static struct ieee80211_supported_band wlan_hdd_band_2_4_GHZ =
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:static struct ieee80211_supported_band wlan_hdd_band_5_GHZ =
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:static struct ieee80211_supported_band wlan_hdd_band_p2p_2_4_GHZ =
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_2GHZ] = NULL;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        (wiphy->bands[IEEE80211_BAND_2GHZ] != NULL))
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_2GHZ] = &wlan_hdd_band_2_4_GHZ;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_2GHZ] = &wlan_hdd_band_2_4_GHZ;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_2GHZ] = &wlan_hdd_band_2_4_GHZ;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_2GHZ] = &wlan_hdd_band_2_4_GHZ;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_2GHZ] = &wlan_hdd_band_p2p_2_4_GHZ;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_2GHZ] = &wlan_hdd_band_p2p_2_4_GHZ;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_5GHZ] = NULL;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        (wiphy->bands[IEEE80211_BAND_5GHZ] != NULL))
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_5GHZ] = &wlan_hdd_band_5_GHZ;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_5GHZ] = &wlan_hdd_band_5_GHZ;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_5GHZ] = &wlan_hdd_band_5_GHZ;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:            wiphy->bands[IEEE80211_BAND_5GHZ] = &wlan_hdd_band_5_GHZ;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        wlan_hdd_band_2_4_GHZ.ht_cap.cap     &= ~IEEE80211_HT_CAP_SGI_20;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        wlan_hdd_band_5_GHZ.ht_cap.cap       &= ~IEEE80211_HT_CAP_SGI_20;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        wlan_hdd_band_5_GHZ.ht_cap.cap       &= ~IEEE80211_HT_CAP_SGI_40;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        wlan_hdd_band_5_GHZ.ht_cap.cap &= ~IEEE80211_HT_CAP_SUP_WIDTH_20_40;
staging/prima/CORE/HDD/src/wlan_hdd_cfg80211.c:        wlan_hdd_band_p2p_2_4_GHZ.ht_cap.cap &= ~IEEE80211_HT_CAP_SGI_20;
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:                 CFG_19P2_MHZ_PMIC_CLK_ENABLED_DEFAULT,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:                 CFG_19P2_MHZ_PMIC_CLK_ENABLED_MAX ),
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:                 CFG_19P2_MHZ_PMIC_CLK_ENABLED_MIN,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:                 CFG_SHORT_GI_20MHZ_DEFAULT,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:                 CFG_SHORT_GI_20MHZ_MAX ),
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:                 CFG_SHORT_GI_20MHZ_MIN,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:              CFG_SHORT_GI_40MHZ_DEFAULT,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:              CFG_SHORT_GI_40MHZ_MAX ),
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:              CFG_SHORT_GI_40MHZ_MIN,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:      hddLog(LOGE, "Could not pass on WNI_CFG_SHORT_GI_20MHZ to CCM\n");
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:      hddLog(LOGE, "Could not pass on WNI_CFG_SHORT_GI_40MHZ to CCM\n");
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:   if (ccmCfgSetInt(pHddCtx->hHal, WNI_CFG_SHORT_GI_20MHZ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:   if (ccmCfgSetInt(pHddCtx->hHal, WNI_CFG_SHORT_GI_40MHZ,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:   REG_VARIABLE( CFG_19P2_MHZ_PMIC_CLK_ENABLED_NAME , WLAN_PARAM_Integer,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:   REG_VARIABLE( CFG_CHANNEL_BONDING_MODE_24GHZ_NAME, WLAN_PARAM_Integer,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:   REG_VARIABLE( CFG_CHANNEL_BONDING_MODE_5GHZ_NAME, WLAN_PARAM_Integer,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c:   REG_VARIABLE( CFG_SHORT_GI_20MHZ_NAME, WLAN_PARAM_Integer,
staging/prima/CORE/HDD/src/wlan_hdd_cfg.c: REG_VARIABLE( CFG_SHORT_GI_40MHZ_NAME, WLAN_PARAM_Integer,
staging/prima/CORE/HDD/src/wlan_hdd_hostapd.c:#define SAP_24GHZ_CH_COUNT (14)
staging/prima/CORE/HDD/src/wlan_hdd_hostapd.c:              fwrq->e = MHZ;
staging/prima/CORE/HDD/src/wlan_hdd_hostapd.c:           fwrq->e = MHZ;
staging/prima/CORE/HDD/src/wlan_hdd_hostapd.c:              /* Set Exponent parameter as 6 (MHZ) in struct iw_freq
staging/prima/CORE/HDD/src/wlan_hdd_hostapd.c:          /* Set Exponent parameter as 6 (MHZ) in struct iw_freq
staging/prima/CORE/HDD/src/wlan_hdd_p2p.c:                IEEE80211_BAND_2GHZ);
staging/prima/CORE/HDD/src/wlan_hdd_p2p.c:                IEEE80211_BAND_5GHZ);
staging/prima/CORE/HDD/src/wlan_hdd_wext.c:        case WLAN_HDD_UI_BAND_2_4_GHZ:
staging/prima/CORE/HDD/src/wlan_hdd_wext.c:        case WLAN_HDD_UI_BAND_5_GHZ:
staging/prima/CORE/HDD/src/wlan_hdd_wext.c:#define WLAN_HDD_UI_BAND_2_4_GHZ                  2
staging/prima/CORE/HDD/src/wlan_hdd_wext.c:#define WLAN_HDD_UI_BAND_5_GHZ                    1
staging/prima/CORE/HDD/src/wlan_hdd_wext.c:               fwrq->e = MHZ;
staging/prima/CORE/HDD/src/wlan_hdd_wext.c:           fwrq->e = MHZ;
staging/prima/CORE/HDD/src/wlan_hdd_wext.c:               /* Set Exponent parameter as 6 (MHZ) in struct iw_freq
staging/prima/CORE/HDD/src/wlan_hdd_wext.c:          /* Set Exponent parameter as 6 (MHZ) in struct iw_freq
staging/prima/CORE/MAC/inc/aniGlobal.h:    //RF band to determibe 2.4/5 GHZ
staging/prima/CORE/MAC/inc/sirApi.h:    SIR_BAND_2_4_GHZ,
staging/prima/CORE/MAC/inc/sirApi.h:    SIR_BAND_5_GHZ,
staging/prima/CORE/MAC/inc/sirMacProtDef.h:#define NOT_SUPPORT_CHANNEL_WIDTH_SET_20_MHZ_ONLY           0
staging/prima/CORE/MAC/inc/sirMacProtDef.h:#define NOT_SUPPORT_SHORT_GI_FOR_20_MHZ                     0
staging/prima/CORE/MAC/inc/sirMacProtDef.h:#define NOT_SUPPORT_SHORT_GI_FOR_40_MHZ                     0
staging/prima/CORE/MAC/inc/sirMacProtDef.h:#define OPERATION_MODE_NO_LEGACY_STA_40MHZ_PROTECTED            2
staging/prima/CORE/MAC/inc/sirMacProtDef.h:#define PCO_PHASE_REQUEST_SWITCH_KEEP_TO_20MHZ                  0
staging/prima/CORE/MAC/inc/sirMacProtDef.h:#define PCO_PHASE_REQUEST_SWITCH_KEEP_TO_40MHZ                  1
staging/prima/CORE/MAC/inc/sirMacProtDef.h:#define SUPPORT_CHANNEL_WIDTH_SET_20_40_MHZ                 1
staging/prima/CORE/MAC/inc/sirMacProtDef.h:#define SUPPORT_SHORT_GI_FOR_20_MHZ                         1
staging/prima/CORE/MAC/inc/sirMacProtDef.h:#define SUPPORT_SHORT_GI_FOR_40_MHZ                         1
staging/prima/CORE/MAC/inc/sirMacProtDef.h:#define USE_20_MHZ_CONTROL_CHANNEL                              0
staging/prima/CORE/MAC/inc/sirMacProtDef.h:    eHT_CHANNEL_WIDTH_20MHZ = 0,
staging/prima/CORE/MAC/inc/sirMacProtDef.h:    eHT_CHANNEL_WIDTH_40MHZ = 1,
staging/prima/CORE/MAC/inc/sirMacProtDef.h:    eHT_CHANNEL_WIDTH_80MHZ = 2,
staging/prima/CORE/MAC/inc/sirMacProtDef.h:  eHT_DSSS_CCK_MODE_40MHZ,
staging/prima/CORE/MAC/inc/sirMacProtDef.h:  eHT_SHORT_GI_20MHZ,
staging/prima/CORE/MAC/inc/sirMacProtDef.h:  eHT_SHORT_GI_40MHZ,
staging/prima/CORE/MAC/inc/sirMacProtDef.h:  eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT, // No legacy device, but 20 MHz HT present
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_CENTERED_40MHZ_CENTERED    4
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_HIGH_40MHZ_CENTERED    5
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_HIGH_40MHZ_HIGH    9
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_HIGH_40MHZ_LOW    7
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_LOW_40MHZ_CENTERED    3
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_LOW_40MHZ_HIGH    8
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_LOW_40MHZ_LOW    6
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ    45
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ_APDEF    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ_APMAX    31
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ_STADEF    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ_STAMAX    31
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ    44
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ_APDEF    5
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ_APMAX    11
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ_STADEF    5
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ_STAMAX    11
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_0_25MBPS_SLR_20MHZ_SIMO    29
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_0_5MBPS_SLR_20MHZ_SIMO    30
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_13MBPS_MCS1_20MHZ_SIMO    14
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_14_4MBPS_MCS1_20MHZ_SIMO_SGI    22
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_19_5MBPS_MCS2_20MHZ_SIMO    15
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_21_7MBPS_MCS2_20MHZ_SIMO_SGI    23
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_26MBPS_MCS3_20MHZ_SIMO    16
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_28_9MBPS_MCS3_20MHZ_SIMO_SGI    24
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_39MBPS_MCS4_20MHZ_SIMO    17
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_43_3MBPS_MCS4_20MHZ_SIMO_SGI    25
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_52MBPS_MCS5_20MHZ_SIMO    18
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_57_8MBPS_MCS5_20MHZ_SIMO_SGI    26
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_58_5MBPS_MCS6_20MHZ_SIMO    19
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_6_5MBPS_MCS0_20MHZ_SIMO    13
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_65MBPS_MCS6_20MHZ_SIMO_SGI    27
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_65MBPS_MCS7_20MHZ_SIMO    20
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_68_25MBPS_QC_PROP_20MHZ_SIMO    31
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_72_2MBPS_MCS7_20MHZ_SIMO_SGI    28
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_7_2MBPS_MCS0_20MHZ_SIMO_SGI    21
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ    48
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ_APDEF    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ_APMAX    31
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ_STADEF    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ_STAMAX    31
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ    49
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ_APDEF    5
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ_APMAX    31
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ_STADEF    5
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ_STAMAX    31
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_HT_CAP_INFO_DSSS_CCK_MODE_40MHZ    12
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_HT_CAP_INFO_SHORT_GI_20MHZ    5
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_HT_CAP_INFO_SHORT_GI_40MHZ    6
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_20MHZ    204
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_20MHZ_APDEF    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_20MHZ_APMAX    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_20MHZ_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_20MHZ_DISABLE    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_20MHZ_ENABLE    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_20MHZ_STADEF    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_20MHZ_STAMAX    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_20MHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_40MHZ    205
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_40MHZ_APDEF    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_40MHZ_APMAX    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_40MHZ_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_40MHZ_DISABLE    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_40MHZ_ENABLE    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_40MHZ_STADEF    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_40MHZ_STAMAX    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_SHORT_GI_40MHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION    200
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION_APDEF    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION_APMAX    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION_STADEF    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION_STAMAX    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION    198
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION_APDEF    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION_APMAX    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION_STADEF    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION_STAMAX    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION    199
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION_APDEF    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION_APMAX    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION_STADEF    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION_STAMAX    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_CHANNEL_WIDTH_160MHZ    2
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_CHANNEL_WIDTH_20_40MHZ    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_CHANNEL_WIDTH_80MHZ    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_CHANNEL_WIDTH_80_PLUS_80MHZ    3
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ    173
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ_APDEF    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ_APMAX    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ_STADEF    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ_STAMAX    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ    172
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ_APDEF    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ_APMAX    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ_APMIN    0
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ_STADEF    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ_STAMAX    1
staging/prima/CORE/MAC/inc/wniCfgAp.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_CENTERED_40MHZ_CENTERED    4
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_HIGH_40MHZ_CENTERED    5
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_HIGH_40MHZ_HIGH    9
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_HIGH_40MHZ_LOW    7
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_LOW_40MHZ_CENTERED    3
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_LOW_40MHZ_HIGH    8
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_CB_SECONDARY_CHANNEL_STATE_11AC_20MHZ_LOW_40MHZ_LOW    6
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ    45
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ_STADEF    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ_STAMAX    31
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_DEFAULT_RATE_INDEX_24GHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ    44
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ_STADEF    5
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ_STAMAX    11
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_DEFAULT_RATE_INDEX_5GHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_0_25MBPS_SLR_20MHZ_SIMO    29
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_0_5MBPS_SLR_20MHZ_SIMO    30
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_13MBPS_MCS1_20MHZ_SIMO    14
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_14_4MBPS_MCS1_20MHZ_SIMO_SGI    22
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_19_5MBPS_MCS2_20MHZ_SIMO    15
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_21_7MBPS_MCS2_20MHZ_SIMO_SGI    23
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_26MBPS_MCS3_20MHZ_SIMO    16
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_28_9MBPS_MCS3_20MHZ_SIMO_SGI    24
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_39MBPS_MCS4_20MHZ_SIMO    17
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_43_3MBPS_MCS4_20MHZ_SIMO_SGI    25
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_52MBPS_MCS5_20MHZ_SIMO    18
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_57_8MBPS_MCS5_20MHZ_SIMO_SGI    26
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_58_5MBPS_MCS6_20MHZ_SIMO    19
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_6_5MBPS_MCS0_20MHZ_SIMO    13
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_65MBPS_MCS6_20MHZ_SIMO_SGI    27
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_65MBPS_MCS7_20MHZ_SIMO    20
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_68_25MBPS_QC_PROP_20MHZ_SIMO    31
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_72_2MBPS_MCS7_20MHZ_SIMO_SGI    28
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_7_2MBPS_MCS0_20MHZ_SIMO_SGI    21
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ    48
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ_STADEF    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ_STAMAX    31
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_MULTICAST_24GHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ    49
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ_STADEF    5
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ_STAMAX    31
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_FIXED_RATE_MULTICAST_5GHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_HT_CAP_INFO_DSSS_CCK_MODE_40MHZ    12
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_HT_CAP_INFO_SHORT_GI_20MHZ    5
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_HT_CAP_INFO_SHORT_GI_40MHZ    6
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_20MHZ    204
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_20MHZ_DISABLE    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_20MHZ_ENABLE    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_20MHZ_STADEF    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_20MHZ_STAMAX    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_20MHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_40MHZ    205
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_40MHZ_DISABLE    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_40MHZ_ENABLE    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_40MHZ_STADEF    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_40MHZ_STAMAX    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_SHORT_GI_40MHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION    200
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION_STADEF    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION_STAMAX    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_160MHZ_UTILIZATION_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION    198
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION_STADEF    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION_STAMAX    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_40MHZ_UTILIZATION_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION    199
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION_STADEF    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION_STAMAX    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_80MHZ_UTILIZATION_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_CHANNEL_WIDTH_160MHZ    2
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_CHANNEL_WIDTH_20_40MHZ    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_CHANNEL_WIDTH_80MHZ    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_CHANNEL_WIDTH_80_PLUS_80MHZ    3
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ    173
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ_STADEF    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ_STAMAX    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ_STAMIN    0
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ    172
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ_STADEF    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ_STAMAX    1
staging/prima/CORE/MAC/inc/wniCfgSta.h:#define WNI_CFG_VHT_SHORT_GI_80MHZ_STAMIN    0
staging/prima/CORE/MAC/src/cfg/cfgApi.c:        case eRF_BAND_2_4_GHZ:
staging/prima/CORE/MAC/src/cfg/cfgApi.c:        case eRF_BAND_5_GHZ:
staging/prima/CORE/MAC/src/cfg/cfgApi.c:        rfBand = eRF_BAND_2_4_GHZ;
staging/prima/CORE/MAC/src/cfg/cfgApi.c:        rfBand = eRF_BAND_5_GHZ;
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"DEFAULT_RATE_INDEX_24GHZ",
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"DEFAULT_RATE_INDEX_5GHZ",
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"FIXED_RATE_MULTICAST_24GHZ",
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"FIXED_RATE_MULTICAST_5GHZ",
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"SHORT_GI_20MHZ",
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"SHORT_GI_40MHZ",
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"VHT_160MHZ_UTILIZATION",
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"VHT_40MHZ_UTILIZATION",
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"VHT_80MHZ_UTILIZATION",
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"VHT_SHORT_GI_160_AND_80_PLUS_80MHZ",
staging/prima/CORE/MAC/src/cfg/cfgParamName.c:    (unsigned char *)"VHT_SHORT_GI_80MHZ",
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:*  0- 2.4GHZ / 1- Low 5GHZ /2-MID /3-HIGH/4-Japan4.9GHZ
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:*  10 - 80MHZ_HIGH_HIGH: 20/40MHZ offset HIGH 40/80MHZ offset HIGH
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:*  1 - LOWER:  Secondary channel 40MHZ is located below the primary channel
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:*  3 - HIGHER: Secondary channel 40 MHZ is located above the primary channel
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:*  4 - 80MHZ_LOW_CENTERED : 20/40MHZ offset LOW 40/80MHZ offset CENTERED
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:*  5 - 80MHZ_CENTERED_CENTERED : 20/40MHZ offset CENTERED 40/80MHZ offset CENTERED
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:*  6 - 80MHZ_HIGH_CENTERED : 20/40MHZ offset HIGH 40/80MHZ offset CENTERED
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:*  7 - 80MHZ_LOW_LOW: 20/40MHZ offset LOW 40/80MHZ offset LOW
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:*  8 - 80MHZ_HIGH_LOW: 20/40MHZ offset HIGH 40/80MHZ offset LOW
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:*  9 - 80MHZ_LOW_HIGH: 20/40MHZ offset LOW 40/80MHZ offset HIGH
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:* Broadcast/mutlicast rates for 2.4GHZ
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:* Broadcast/mutlicast rates for 5 GHZ
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 0_25MBPS_SLR_20MHZ_SIMO               29
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 0_5MBPS_SLR_20MHZ_SIMO                30
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 11AC_20MHZ_CENTERED_40MHZ_CENTERED  4
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 11AC_20MHZ_HIGH_40MHZ_CENTERED      5
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 11AC_20MHZ_HIGH_40MHZ_HIGH          9
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 11AC_20MHZ_HIGH_40MHZ_LOW           7
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 11AC_20MHZ_LOW_40MHZ_CENTERED       3
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 11AC_20MHZ_LOW_40MHZ_HIGH           8
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 11AC_20MHZ_LOW_40MHZ_LOW            6
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 13MBPS_MCS1_20MHZ_SIMO                14
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 14_4MBPS_MCS1_20MHZ_SIMO_SGI          22
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 160MHZ         2
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 19_5MBPS_MCS2_20MHZ_SIMO              15
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 20_40MHZ       0
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 21_7MBPS_MCS2_20MHZ_SIMO_SGI          23
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 26MBPS_MCS3_20MHZ_SIMO                16
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 28_9MBPS_MCS3_20MHZ_SIMO_SGI          24
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 39MBPS_MCS4_20MHZ_SIMO                17
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 43_3MBPS_MCS4_20MHZ_SIMO_SGI          25
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 52MBPS_MCS5_20MHZ_SIMO                18
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 57_8MBPS_MCS5_20MHZ_SIMO_SGI          26
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 58_5MBPS_MCS6_20MHZ_SIMO              19
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 6_5MBPS_MCS0_20MHZ_SIMO	            13
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 65MBPS_MCS6_20MHZ_SIMO_SGI            27
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 65MBPS_MCS7_20MHZ_SIMO                20
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 68_25MBPS_QC_PROP_20MHZ_SIMO          31
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 72_2MBPS_MCS7_20MHZ_SIMO_SGI          28
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 7_2MBPS_MCS0_20MHZ_SIMO_SGI           21
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 80MHZ          1
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM 80_PLUS_80MHZ  3
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM DSSS_CCK_MODE_40MHZ      12
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM SHORT_GI_20MHZ            5
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:#ENUM SHORT_GI_40MHZ            6
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:* Forty MHZ Utilization
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_DEFAULT_RATE_INDEX_24GHZ    I    4    9
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_DEFAULT_RATE_INDEX_5GHZ    I    4    9
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_FIXED_RATE_MULTICAST_24GHZ    I    4    8
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_FIXED_RATE_MULTICAST_5GHZ    I    4    8
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_SHORT_GI_20MHZ  I    4    7
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_SHORT_GI_40MHZ  I    4    7
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_VHT_160MHZ_UTILIZATION  I    4    19
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_VHT_40MHZ_UTILIZATION  I    4    19
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_VHT_80MHZ_UTILIZATION  I    4    19
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ  I    4    19
staging/prima/CORE/MAC/src/cfg/cfgUtil/cfg.txt:WNI_CFG_VHT_SHORT_GI_80MHZ  I    4    19
staging/prima/CORE/MAC/src/include/parserApi.h:#define HIGHEST_24GHZ_CHANNEL_NUM  ( 14 )
staging/prima/CORE/MAC/src/include/phyGlobal.h:    tANI_BOOLEAN wfm_clk80; //=ON if 20MHZ clock samples, =OFF for 80MHZ clock samples
staging/prima/CORE/MAC/src/include/sirParams.h:#define PARAM_HT20MHZCOEXIST_CHANGED                  (1<<6)
staging/prima/CORE/MAC/src/include/sirParams.h:    PARAM_llGCOEXIST_CHANGED|PARAM_HT20MHZCOEXIST_CHANGED|PARAM_NON_GF_DEVICES_PRESENT_CHANGED|PARAM_RIFS_MODE_CHANGED|PARAM_LSIG_TXOP_FULL_SUPPORT_CHANGED| PARAM_OBSS_MODE_CHANGED)
staging/prima/CORE/MAC/src/include/sirParams.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED = 5, //20/40MHZ offset CENTERED 40/80MHZ offset CENTERED
staging/prima/CORE/MAC/src/include/sirParams.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED = 6, //20/40MHZ offset HIGH 40/80MHZ offset CENTERED
staging/prima/CORE/MAC/src/include/sirParams.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH = 10,//20/40MHZ offset-HIGH 40/80MHZ offset HIGH
staging/prima/CORE/MAC/src/include/sirParams.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW = 8, //20/40MHZ offset HIGH 40/80MHZ offset LOW
staging/prima/CORE/MAC/src/include/sirParams.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED = 4, //20/40MHZ offset LOW 40/80MHZ offset CENTERED
staging/prima/CORE/MAC/src/include/sirParams.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH = 9, //20/40MHZ offset LOW 40/80MHZ offset HIGH
staging/prima/CORE/MAC/src/include/sirParams.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW = 7,//20/40MHZ offset LOW 40/80MHZ offset LOW
staging/prima/CORE/MAC/src/pe/include/schGlobal.h:#define ANI_SCH_ADAPTIVE_ALGO_BAND_2GHZ     0x00000001
staging/prima/CORE/MAC/src/pe/include/schGlobal.h:#define ANI_SCH_ADAPTIVE_ALGO_BAND_5GHZ     0x00000002
staging/prima/CORE/MAC/src/pe/include/schGlobal.h:#define ANI_SCH_ADAPTIVE_ALGO_BAND_ALL      (ANI_SCH_ADAPTIVE_ALGO_BAND_2GHZ | ANI_SCH_ADAPTIVE_ALGO_BAND_5GHZ)
staging/prima/CORE/MAC/src/pe/lim/limApi.c:   if (wlan_cfgGetInt(pMac, WNI_CFG_SHORT_GI_20MHZ, &val2) != eSIR_SUCCESS)
staging/prima/CORE/MAC/src/pe/lim/limApi.c:   if (wlan_cfgGetInt(pMac, WNI_CFG_SHORT_GI_40MHZ, &val3) != eSIR_SUCCESS)
staging/prima/CORE/MAC/src/pe/lim/limApi.c:   /* WNI_CFG_SHORT_GI_20MHZ */
staging/prima/CORE/MAC/src/pe/lim/limAssocUtils.c:                (eHT_CHANNEL_WIDTH_20MHZ == pStaDs->htSupportedChannelWidthSet))
staging/prima/CORE/MAC/src/pe/lim/limAssocUtils.c:    else if(SIR_BAND_2_4_GHZ == rfBand)
staging/prima/CORE/MAC/src/pe/lim/limAssocUtils.c:    if(SIR_BAND_5_GHZ == rfBand)
staging/prima/CORE/MAC/src/pe/lim/limAssocUtils.c:    //LSIG TXOP not supporting staiton leaving. applies to 2.4 as well as 5 GHZ.
staging/prima/CORE/MAC/src/pe/lim/limAssocUtils.c:        pAddStaParams->fDsssCckMode40Mhz = limGetHTCapability( pMac, eHT_DSSS_CCK_MODE_40MHZ);
staging/prima/CORE/MAC/src/pe/lim/limAssocUtils.c:        pAddStaParams->fDsssCckMode40Mhz = limGetHTCapability( pMac, eHT_DSSS_CCK_MODE_40MHZ, psessionEntry);
staging/prima/CORE/MAC/src/pe/lim/limAssocUtils.c:        pAddStaParams->fShortGI20Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_20MHZ);
staging/prima/CORE/MAC/src/pe/lim/limAssocUtils.c:        pAddStaParams->fShortGI20Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_20MHZ, psessionEntry);
staging/prima/CORE/MAC/src/pe/lim/limAssocUtils.c:        pAddStaParams->fShortGI40Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_40MHZ);
staging/prima/CORE/MAC/src/pe/lim/limAssocUtils.c:        pAddStaParams->fShortGI40Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_40MHZ, psessionEntry);
staging/prima/CORE/MAC/src/pe/lim/limIbssPeerMgmt.c:    if(SIR_BAND_2_4_GHZ== rfBand)
staging/prima/CORE/MAC/src/pe/lim/limIbssPeerMgmt.c:    if(SIR_BAND_2_4_GHZ == rfBand)
staging/prima/CORE/MAC/src/pe/lim/limP2P.c:        (SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel)) )
staging/prima/CORE/MAC/src/pe/lim/limProcessAssocReqFrame.c:            else if(SIR_BAND_2_4_GHZ == limGetRFBand(firstChannelNumber))
staging/prima/CORE/MAC/src/pe/lim/limProcessAssocReqFrame.c:            if(SIR_BAND_5_GHZ == limGetRFBand(firstChannelNumber))
staging/prima/CORE/MAC/src/pe/lim/limProcessCfgUpdates.c:    case WNI_CFG_SHORT_GI_20MHZ:
staging/prima/CORE/MAC/src/pe/lim/limProcessCfgUpdates.c:    case WNI_CFG_SHORT_GI_40MHZ:
staging/prima/CORE/MAC/src/pe/lim/limProcessCfgUpdates.c:        if (wlan_cfgGetInt(pMac, WNI_CFG_SHORT_GI_20MHZ, &val2) != eSIR_SUCCESS)
staging/prima/CORE/MAC/src/pe/lim/limProcessCfgUpdates.c:        if (wlan_cfgGetInt(pMac, WNI_CFG_SHORT_GI_40MHZ, &val2) != eSIR_SUCCESS)
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:            cbState =  PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED;
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:            cbState =  PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH;
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:            cbState =  PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW;
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:            cbState =  PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED;
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:            cbState =  PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH;
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:            cbState =  PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW;
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:        pSta->fDsssCckMode40Mhz = limGetHTCapability( pMac, eHT_DSSS_CCK_MODE_40MHZ);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:        pSta->fDsssCckMode40Mhz = limGetHTCapability( pMac, eHT_DSSS_CCK_MODE_40MHZ, psessionEntry);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:        pSta->fShortGI20Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_20MHZ);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:        pSta->fShortGI20Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_20MHZ, psessionEntry);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:        pSta->fShortGI40Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_40MHZ);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmReqMessages.c:        pSta->fShortGI40Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_40MHZ, psessionEntry);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmRspMessages.c:        pAddStaParams->fDsssCckMode40Mhz = limGetHTCapability( pMac, eHT_DSSS_CCK_MODE_40MHZ);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmRspMessages.c:        pAddStaParams->fDsssCckMode40Mhz = limGetHTCapability( pMac, eHT_DSSS_CCK_MODE_40MHZ, psessionEntry);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmRspMessages.c:        pAddStaParams->fShortGI20Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_20MHZ);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmRspMessages.c:        pAddStaParams->fShortGI20Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_20MHZ, psessionEntry);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmRspMessages.c:        pAddStaParams->fShortGI40Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_40MHZ);
staging/prima/CORE/MAC/src/pe/lim/limProcessMlmRspMessages.c:        pAddStaParams->fShortGI40Mhz     = limGetHTCapability( pMac, eHT_SHORT_GI_40MHZ, psessionEntry);
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW:
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:                    centerChan = limGetCenterChannel(pMac,channelNumber,pSmeStartBssReq->cbMode,WNI_CFG_VHT_CHANNEL_WIDTH_80MHZ);
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:    else if (chanWidth == WNI_CFG_VHT_CHANNEL_WIDTH_20_40MHZ)
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:                    if (cfgSetInt(pMac, WNI_CFG_VHT_CHANNEL_WIDTH, WNI_CFG_VHT_CHANNEL_WIDTH_20_40MHZ)
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:                    if (cfgSetInt(pMac, WNI_CFG_VHT_CHANNEL_WIDTH, WNI_CFG_VHT_CHANNEL_WIDTH_80MHZ)
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:                if(chanWidth == eHT_CHANNEL_WIDTH_20MHZ || chanWidth == eHT_CHANNEL_WIDTH_40MHZ)
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:                if (chanWidth == eHT_CHANNEL_WIDTH_80MHZ)
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:    if (chanWidth == WNI_CFG_VHT_CHANNEL_WIDTH_80MHZ)
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:        if(SIR_BAND_5_GHZ == psessionEntry->limRFBand)
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:                        limLog(pMac, LOGW, FL("***Center Channel for 80MHZ channel width = %ld\n"),centerChan);
staging/prima/CORE/MAC/src/pe/lim/limProcessSmeReqMessages.c:            (SIR_BAND_5_GHZ == psessionEntry->limRFBand) )
staging/prima/CORE/MAC/src/pe/lim/limPropExtsUtils.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED:
staging/prima/CORE/MAC/src/pe/lim/limPropExtsUtils.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED:
staging/prima/CORE/MAC/src/pe/lim/limPropExtsUtils.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH:
staging/prima/CORE/MAC/src/pe/lim/limPropExtsUtils.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW:
staging/prima/CORE/MAC/src/pe/lim/limPropExtsUtils.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED:
staging/prima/CORE/MAC/src/pe/lim/limPropExtsUtils.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH:
staging/prima/CORE/MAC/src/pe/lim/limPropExtsUtils.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW:
staging/prima/CORE/MAC/src/pe/lim/limPropExtsUtils.c:  else if(psessionEntry->limRFBand == SIR_BAND_5_GHZ)
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(nChannelNum))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:    if( ( SIR_BAND_5_GHZ == limGetRFBand(psessionEntry->currentOperChannel))
staging/prima/CORE/MAC/src/pe/lim/limSendManagementFrames.c:           && ( SIR_BAND_5_GHZ == limGetRFBand(pMac->ft.ftPEContext.pFTPreAuthReq->preAuthchannelNum)))
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    case eHT_DSSS_CCK_MODE_40MHZ:
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    case eHT_SHORT_GI_20MHZ:
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    case eHT_SHORT_GI_40MHZ:
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:            else if(eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT== pBeaconStruct->HTInfo.opMode)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:        else if(eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT == pBeaconStruct->HTInfo.opMode)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    else if(SIR_BAND_2_4_GHZ== rfBand)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    else if(SIR_BAND_2_4_GHZ == rfBand)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    else if(SIR_BAND_2_4_GHZ == rfBand)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    //following code block is only for HT station. ( 2.4 GHZ as well as 5 GHZ)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:        if(eHT_CHANNEL_WIDTH_20MHZ == pStaDs->htSupportedChannelWidthSet)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:        if ( eHT_CHANNEL_WIDTH_40MHZ == psessionEntry->htRecommendedTxWidthSet )
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                if(eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT == htInfo.opMode)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:            if(eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT == htInfo.opMode)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                if(eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT == pMac->lim.gHTOperMode)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                if(eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT == psessionEntry->htOperMode)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    if(SIR_BAND_5_GHZ == rfBand)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    if(SIR_BAND_5_GHZ == rfBand)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    if(SIR_BAND_5_GHZ == rfBand)
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    //if we are in 5 GHZ band
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:            pBeaconParams->paramChangeBitmap |= PARAM_HT20MHZCOEXIST_CHANGED;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:            pBeaconParams->paramChangeBitmap |= PARAM_HT20MHZCOEXIST_CHANGED;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:            pBeaconParams->paramChangeBitmap |= PARAM_HT20MHZCOEXIST_CHANGED;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:            pBeaconParams->paramChangeBitmap |= PARAM_HT20MHZCOEXIST_CHANGED;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                                    pMac->lim.gHTOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                                pMac->lim.gHTOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                            pMac->lim.gHTOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                            pMac->lim.gHTOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                            pMac->lim.gHTOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                        pMac->lim.gHTOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                        pMac->lim.gHTOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                    pMac->lim.gHTOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:    //protection related factors other than HT operating mode. Applies to 2.4 GHZ as well as 5 GHZ.
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                                //psessionEntry->htOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                            //psessionEntry->htOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                            //psessionEntry->htOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                        //psessionEntry->htOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                        //psessionEntry->htOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                        psessionEntry->htOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:                    //psessionEntry->htOperMode = eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/MAC/src/pe/lim/limUtils.c:        //We are 11N. we need to protect from 11A and Ht20. we don't need any other protection in 5 GHZ.
staging/prima/CORE/MAC/src/pe/lim/limUtils.h:        return SIR_BAND_2_4_GHZ;
staging/prima/CORE/MAC/src/pe/lim/limUtils.h:        return SIR_BAND_5_GHZ;
staging/prima/CORE/MAC/src/pe/sch/schBeaconProcess.c:                  else if(eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT == pBcnStruct->HTInfo.opMode)
staging/prima/CORE/MAC/src/pe/sch/schBeaconProcess.c:              else if(eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT == pBcnStruct->HTInfo.opMode)
staging/prima/CORE/MAC/src/pe/sch/schBeaconProcess.c:    else if(SIR_BAND_2_4_GHZ == rfBand)
staging/prima/CORE/MAC/src/pe/sch/schBeaconProcess.c:    if(SIR_BAND_5_GHZ == rfBand)
staging/prima/CORE/SAP/src/sapApiLinkCntl.c:                BAND(2.4GHz/5GHZ) */
staging/prima/CORE/SAP/src/sapApiLinkCntl.c:          if(RF_SUBBAND_2_4_GHZ == operatingBand )
staging/prima/CORE/SAP/src/sapApiLinkCntl.c:              psapContext->channel = SAP_DEFAULT_5GHZ_CHANNEL;
staging/prima/CORE/SAP/src/sapChSelect.c:    for (i = 0; i < SPECT_24GHZ_CH_COUNT; i++) {
staging/prima/CORE/SAP/src/sapChSelect.c:        for( j = i + 1; j < SPECT_24GHZ_CH_COUNT; j++) {
staging/prima/CORE/SAP/src/sapChSelect.h:#define SAP_DEFAULT_5GHZ_CHANNEL      (40)
staging/prima/CORE/SAP/src/sapChSelect.h:#define SPECT_24GHZ_CH_COUNT    (11) // USA regulatory domain
staging/prima/CORE/SAP/src/sapFsm.c:        case RF_SUBBAND_2_4_GHZ:
staging/prima/CORE/SAP/src/sapFsm.c:        case RF_SUBBAND_4_9_GHZ:
staging/prima/CORE/SAP/src/sapFsm.c:        case RF_SUBBAND_5_HIGH_GHZ:
staging/prima/CORE/SAP/src/sapFsm.c:        case RF_SUBBAND_5_LOW_GHZ:
staging/prima/CORE/SAP/src/sapFsm.c:        case RF_SUBBAND_5_MID_GHZ:
staging/prima/CORE/SAP/src/sapFsm.c:    list = (v_U8_t *)vos_mem_malloc(NUM_5GHZ_CHANNELS);
staging/prima/CORE/SAP/src/sapModule.c:       case RF_SUBBAND_2_4_GHZ:
staging/prima/CORE/SAP/src/sapModule.c:       case RF_SUBBAND_4_9_GHZ:
staging/prima/CORE/SAP/src/sapModule.c:       case RF_SUBBAND_5_HIGH_GHZ:
staging/prima/CORE/SAP/src/sapModule.c:       case RF_SUBBAND_5_LOW_GHZ:
staging/prima/CORE/SAP/src/sapModule.c:       case RF_SUBBAND_5_MID_GHZ:
staging/prima/CORE/SME/inc/csrApi.h:  This is the function to change the Band configuraiton (ALL/2.4 GHZ/5 GHZ)
staging/prima/CORE/SME/inc/csrInternal.h:#define CSR_IS_CHANNEL_24GHZ(chnNum) \
staging/prima/CORE/SME/inc/csrInternal.h:#define CSR_IS_CHANNEL_5GHZ(chnNum) \
staging/prima/CORE/SME/inc/csrInternal.h:#define CSR_IS_SAME_BAND_CHANNELS(ch1, ch2) (CSR_IS_CHANNEL_5GHZ(ch1) == CSR_IS_CHANNEL_5GHZ(ch2))
staging/prima/CORE/SME/src/csr/csrApiRoam.c:            "Band changed to %u (0 - ALL, 1 - 2.4 GHZ, 2 - 5GHZ)\n", eBand);
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:      case PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:      case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:      case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:      case PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:      case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:      case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:      case PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW:
staging/prima/CORE/SME/src/csr/csrApiRoam.c:                else if ( CSR_IS_CHANNEL_24GHZ(operationChn) )
staging/prima/CORE/SME/src/csr/csrApiRoam.c:            else if ( CSR_IS_CHANNEL_24GHZ(operationChn) )
staging/prima/CORE/SME/src/csr/csrApiRoam.c:            if(CSR_IS_CHANNEL_24GHZ(Channel))
staging/prima/CORE/SME/src/csr/csrApiRoam.c:                if(CSR_IS_CHANNEL_24GHZ(Channel))
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        if(CSR_IS_CHANNEL_24GHZ(channel))
staging/prima/CORE/SME/src/csr/csrApiRoam.c:                if ( CSR_IS_CHANNEL_24GHZ(pChannelList->channelList[ Index ]) )
staging/prima/CORE/SME/src/csr/csrApiRoam.c:    if(CSR_IS_CHANNEL_24GHZ(primaryChn))
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        if(CSR_IS_CHANNEL_5GHZ(pBssDesc->channelId))
staging/prima/CORE/SME/src/csr/csrApiRoam.c:                if ( CSR_IS_CHANNEL_5GHZ(pChannelList->channelList[ Index ]) )
staging/prima/CORE/SME/src/csr/csrApiRoam.c:                if ( CSR_IS_CHANNEL_5GHZ(pMac->roam.validChannelList[ idx ]) )   // the max channel# in 11g is 14
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        if(pIes->HTCaps.present && (eHT_CHANNEL_WIDTH_40MHZ == pIes->HTCaps.supportedChannelWidthSet))
staging/prima/CORE/SME/src/csr/csrApiRoam.c:                if (pIes->HTInfo.recommendedTxWidthSet == eHT_CHANNEL_WIDTH_40MHZ)
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        phyCbState = PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED;
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        phyCbState = PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED;
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        phyCbState = PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH;
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        phyCbState = PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW;
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        phyCbState = PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED;
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        phyCbState = PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH;
staging/prima/CORE/SME/src/csr/csrApiRoam.c:        phyCbState = PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW;
staging/prima/CORE/SME/src/csr/csrApiRoam.c:     pMac->roam.configParam.nVhtChannelWidth = WNI_CFG_VHT_CHANNEL_WIDTH_80MHZ + 1;
staging/prima/CORE/SME/src/csr/csrApiRoam.c:                        //See reason in else if ( CSR_IS_CHANNEL_24GHZ(operationChn) ) to pick 11B
staging/prima/CORE/SME/src/csr/csrApiScan.c:            else if ( (CSR_IS_CHANNEL_5GHZ(pChannelSet->firstChannel)) &&
staging/prima/CORE/SME/src/csr/csrApiScan.c:                (!fPopulate5GBand && (CSR_IS_CHANNEL_24GHZ(pMac->scan.defaultPowerTable[Index].chanId))) )
staging/prima/CORE/SME/src/csr/csrApiScan.c:            if( (CSR_IS_CHANNEL_24GHZ(pChannelSet->firstChannel)) &&
staging/prima/CORE/SME/src/csr/csrApiScan.c:                if(CSR_IS_CHANNEL_24GHZ(pMacChnSet[iC].firstChanNum))
staging/prima/CORE/SME/src/csr/csrApiScan.c:                    if (CSR_IS_CHANNEL_5GHZ(pControlList[j]))
staging/prima/CORE/SME/src/csr/csrApiScan.c:        if ( CSR_IS_CHANNEL_5GHZ( pMac->scan.channelOf11dInfo ) )
staging/prima/CORE/SME/src/csr/csrApiScan.c:        if(CSR_IS_CHANNEL_5GHZ(pSirBssDesc->channelId))
staging/prima/CORE/SME/src/csr/csrApiScan.c:            if ((fPopulate5GBand && (CSR_IS_CHANNEL_5GHZ(pMac->scan.defaultPowerTable[Index].chanId))) ||
staging/prima/CORE/SME/src/csr/csrApiScan.c:    static tANI_U8 validchannelList[CSR_MAX_2_4_GHZ_SUPPORTED_CHANNELS] = {0};
staging/prima/CORE/SME/src/csr/csrInsideApi.h:#define CSR_MAX_2_4_GHZ_SUPPORTED_CHANNELS 14
staging/prima/CORE/SME/src/csr/csrUtil.c:                    fMatch = csrGetPhyModeInUse( phyMode2, phyModeInBssDesc, CSR_IS_CHANNEL_5GHZ(pSirBssDesc->channelId),
staging/prima/CORE/SME/src/csr/csrUtil.c:            fMatch = csrGetPhyModeInUse( phyMode2, phyModeInBssDesc, CSR_IS_CHANNEL_5GHZ(pSirBssDesc->channelId),
staging/prima/CORE/SME/src/csr/csrUtil.c:                    if( !CSR_IS_CHANNEL_5GHZ(pSirBssDesc->channelId) )
staging/prima/CORE/SME/src/csr/csrUtil.c:    //REG_DOMAIN_HI_5GHZ
staging/prima/CORE/SME/src/csr/csrUtil.c:        REG_DOMAIN_HI_5GHZ,
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'A', 'L', ' '}},     //ALBANIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'A', 'R', ' '}},    //ARGENTINA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'B', 'G', ' '}},      //BULGARIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'C', 'N', ' '}},   //CHINA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'C', 'Z', ' '}},      //CZECH REPUBLIC
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'E', 'E', ' '}},      //ESTONIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'G', 'E', ' '}},     //GEORGIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'H', 'R', ' '}},      //CROATIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'H', 'U', ' '}},      //HUNGARY
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'L', 'T', ' '}},      //LITHUANIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'L', 'V', ' '}},      //LATVIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'M', 'N', ' '}},     //MONGOLIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'M', 'Y', ' '}},       //MALAYSIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'R', 'O', ' '}},      //ROMANIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'R', 'S', ' '}},      //SERBIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'S', 'I', ' '}},      //SLOVENNIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'S', 'K', ' '}},      //SLOVAKIA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'T', 'W', ' '}},       //TAIWAN, PROVINCE OF CHINA
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'U', 'A', ' '}},       //UKRAINE
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'U', 'Z', ' '}},     //UZBEKISTAN
staging/prima/CORE/SME/src/csr/csrUtil.c:    {REG_DOMAIN_HI_5GHZ, {'V', 'E', ' '}},       //VENEZUELA
staging/prima/CORE/SME/src/csr/csrUtil.c:    //REG_DOMAIN_NO_5GHZ
staging/prima/CORE/SME/src/csr/csrUtil.c:        REG_DOMAIN_NO_5GHZ,
staging/prima/CORE/SME/src/p2p/p2p_Api.c:    if (SIR_BAND_5_GHZ == GetRFBand(channel))
staging/prima/CORE/SME/src/p2p/p2p_Api.c:        return SIR_BAND_2_4_GHZ;
staging/prima/CORE/SME/src/p2p/p2p_Api.c:        return SIR_BAND_5_GHZ;
staging/prima/CORE/SME/src/sme_common/sme_Api.c:            pDomains[7] = REGDOMAIN_HI_5GHZ;
staging/prima/CORE/SME/src/sme_common/sme_Api.c:            pDomains[8] = REGDOMAIN_NO_5GHZ;
staging/prima/CORE/SYS/legacy/src/utils/src/parserApi.c:    CFG_GET_INT( nStatus, pMac, WNI_CFG_VHT_160MHZ_UTILIZATION,nCfgValue );
staging/prima/CORE/SYS/legacy/src/utils/src/parserApi.c:    CFG_GET_INT( nStatus, pMac, WNI_CFG_VHT_40MHZ_UTILIZATION,nCfgValue );
staging/prima/CORE/SYS/legacy/src/utils/src/parserApi.c:    CFG_GET_INT( nStatus, pMac, WNI_CFG_VHT_80MHZ_UTILIZATION,nCfgValue );
staging/prima/CORE/SYS/legacy/src/utils/src/parserApi.c:    CFG_GET_INT( nStatus, pMac, WNI_CFG_VHT_SHORT_GI_160_AND_80_PLUS_80MHZ,
staging/prima/CORE/SYS/legacy/src/utils/src/parserApi.c:    CFG_GET_INT( nStatus, pMac, WNI_CFG_VHT_SHORT_GI_80MHZ, nCfgValue );
staging/prima/CORE/SYS/legacy/src/utils/src/parserApi.c:       eHT_CHANNEL_WIDTH_20MHZ */
staging/prima/CORE/SYS/legacy/src/utils/src/parserApi.c:    else if ( HIGHEST_24GHZ_CHANNEL_NUM >= nChannelNum )
staging/prima/CORE/SYS/legacy/src/utils/src/parserApi.c:    if(pDot11f->supportedChannelWidthSet == eHT_CHANNEL_WIDTH_20MHZ)
staging/prima/CORE/SYS/legacy/src/utils/src/parserApi.c:        if (rfBand == SIR_BAND_5_GHZ)
staging/prima/CORE/SYS/legacy/src/utils/src/parserApi.c:    if(SIR_BAND_2_4_GHZ == rfBand)
staging/prima/CORE/VOSS/inc/vos_nvitem.h:   REGDOMAIN_HI_5GHZ,
staging/prima/CORE/VOSS/inc/vos_nvitem.h:   REGDOMAIN_NO_5GHZ,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 0,    208, RF_SUBBAND_4_9_GHZ},        //RF_CHAN_208,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 0,    212, RF_SUBBAND_4_9_GHZ},        //RF_CHAN_212,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 0,    216, RF_SUBBAND_4_9_GHZ},        //RF_CHAN_216,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 0,    240, RF_SUBBAND_4_9_GHZ},        //RF_CHAN_240,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 0,    244, RF_SUBBAND_4_9_GHZ},        //RF_CHAN_244,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 0,    248, RF_SUBBAND_4_9_GHZ},        //RF_CHAN_248,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 0,    252, RF_SUBBAND_4_9_GHZ},        //RF_CHAN_252,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2412, 1  , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_1,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2417, 2  , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_2,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2422, 3  , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_3,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2427, 4  , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_4,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2432, 5  , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_5,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2437, 6  , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_6,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2442, 7  , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_7,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2447, 8  , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_8,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2452, 9  , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_9,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2457, 10 , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_10,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2462, 11 , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_11,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2467, 12 , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_12,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2472, 13 , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_13,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 2484, 14 , RF_SUBBAND_2_4_GHZ},        //RF_CHAN_14,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5180, 36 , RF_SUBBAND_5_LOW_GHZ},      //RF_CHAN_36,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5200, 40 , RF_SUBBAND_5_LOW_GHZ},      //RF_CHAN_40,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5220, 44 , RF_SUBBAND_5_LOW_GHZ},      //RF_CHAN_44,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5240, 48 , RF_SUBBAND_5_LOW_GHZ},      //RF_CHAN_48,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5260, 52 , RF_SUBBAND_5_LOW_GHZ},      //RF_CHAN_52,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5280, 56 , RF_SUBBAND_5_LOW_GHZ},      //RF_CHAN_56,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5300, 60 , RF_SUBBAND_5_LOW_GHZ},      //RF_CHAN_60,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5320, 64 , RF_SUBBAND_5_LOW_GHZ},      //RF_CHAN_64,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5500, 100, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_100,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5520, 104, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_104,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5540, 108, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_108,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5560, 112, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_112,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5580, 116, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_116,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5600, 120, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_120,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5620, 124, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_124,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5640, 128, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_128,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5660, 132, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_132,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5680, 136, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_136,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5700, 140, RF_SUBBAND_5_MID_GHZ},      //RF_CHAN_140,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5745, 149, RF_SUBBAND_5_HIGH_GHZ},     //RF_CHAN_149,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5765, 153, RF_SUBBAND_5_HIGH_GHZ},     //RF_CHAN_153,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5785, 157, RF_SUBBAND_5_HIGH_GHZ},     //RF_CHAN_157,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5805, 161, RF_SUBBAND_5_HIGH_GHZ},     //RF_CHAN_161,
staging/prima/CORE/VOSS/src/vos_nvitem.c:    { 5825, 165, RF_SUBBAND_5_HIGH_GHZ},     //RF_CHAN_165,
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'B', 'F'}},  //BURKINA FASO
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'B', 'O'}},  //BOLIVIA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'B', 'Z'}},  //BELIZE
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'C', 'N'}},  //CHINA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'G', 'Y'}},  //GUYANA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'I', 'D'}},  //INDONESIA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'I', 'R'}},  //IRAN, ISLAMIC REPUBLIC OF
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'K', 'E'}},  //KENYA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'L', 'B'}},  //LEBANON
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'M', 'W'}},  //MALAWI
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'N', 'P'}},  //NEPAL
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'P', 'E'}},  //PERU
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'P', 'H'}},  //PHILIPPINES
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'P', 'K'}},  //PAKISTAN
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'Q', 'A'}},  //QATAR
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'R', 'U'}},  //RUSSIA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'R', 'W'}},  //RWANDA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'T', 'Z'}},  //TANZANIA, UNITED REPUBLIC OF
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_HI_5GHZ, {'V', 'E'}},  //VENEZUELA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'A', 'L'}},  //ALBANIA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'A', 'O'}},  //ANGOLA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'B', 'D'}},  //BANGLADESH
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'B', 'I'}},  //BURUNDI
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'B', 'J'}},  //BENIN
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'B', 'T'}},  //BHUTAN
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'C', 'D'}},  //CONGO, THE DEMOCRATIC REPUBLIC OF THE
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'C', 'F'}},  //CENTRAL AFRICAN REPUBLIC
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'C', 'G'}},  //CONGO
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'C', 'I'}},  //COTE D'IVOIRE
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'C', 'M'}},  //CAMEROON
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'C', 'U'}},  //CUBA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'D', 'J'}},  //DJIBOUTI
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'D', 'Z'}},  //ALGERIA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'E', 'R'}},  //ERITREA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'F', 'J'}},  //FIJI
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'G', 'A'}},  //GABON
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'G', 'M'}},  //GAMBIA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'G', 'N'}},  //GUINEA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'G', 'Q'}},  //EQUATORIAL GUINEA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'G', 'W'}},  //GUINEA-BISSAU
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'I', 'L'}},  //ISRAEL
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'I', 'Q'}},  //IRAQ
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'K', 'G'}},  //KYRGYZSTAN
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'K', 'M'}},  //COMOROS
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'K', 'Z'}},  //KAZAKHSTAN
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'L', 'Y'}},  //LIBYAN ARAB JAMAHIRIYA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'M', 'A'}},  //MOROCCO
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'M', 'G'}},  //MADAGASCAR
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'M', 'L'}},  //MALI
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'M', 'N'}},  //MONGOLIA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'N', 'C'}},  //NEW CALEDONIA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'N', 'R'}},  //NAURU
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'S', 'B'}},  //SOLOMON ISLANDS
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'S', 'C'}},  //SEYCHELLES
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'S', 'O'}},  //SOMALIA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'S', 'R'}},  //SURINAME
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'S', 'Y'}},  //SYRIAN ARAB REPUBLIC
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'S', 'Z'}},  //SWAZILAND
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'T', 'D'}},  //CHAD
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'T', 'G'}},  //TOGO
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'T', 'J'}},  //TAJIKISTAN
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'T', 'M'}},  //TURKMENISTAN
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'T', 'O'}},  //TONGA
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'T', 'V'}},  //TUVALU
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'U', 'A'}},  //UKRAINE
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'V', 'U'}},  //VANUATU
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'Y', 'E'}},  //YEMEN
staging/prima/CORE/VOSS/src/vos_nvitem.c:        { REGDOMAIN_NO_5GHZ, {'Z', 'W'}},  //ZIMBABWE
staging/prima/CORE/VOSS/src/vos_nvitem.c:    //RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/inc/legacy/halTypes.h:    eRF_BAND_2_4_GHZ = 1,
staging/prima/CORE/WDA/inc/legacy/halTypes.h:    eRF_BAND_5_GHZ = 2
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_13_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_19_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_26_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_39_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_52_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_58_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_6_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_78_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_14_4_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_21_6_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_28_8_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_43_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_57_7_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_72_2_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_7_2_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_86_6_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_13_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_19_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_26_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_39_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_52_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_58_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_6_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_78_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_14_4_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_21_6_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_28_8_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_43_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_57_7_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_72_2_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_7_2_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_86_6_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_108_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_108_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_121_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_121_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_13_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_13_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_135_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_135_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_162_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_162_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_180_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_180_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_27_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_27_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_40_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_40_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_54_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_54_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_81_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_81_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_120_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_120_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_135_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_135_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_150_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_150_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_15_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_15_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_180_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_180_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_200_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_200_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_30_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_30_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_45_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_45_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_60_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_60_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_90_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_90_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_117_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_117_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_175_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_175_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_234_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_234_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_263_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_263_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_292_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_292_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_29_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_29_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_351_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_351_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_390_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_390_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_58_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_58_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_87_8_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_87_8_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_130_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_130_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_195_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_195_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_260_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_260_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_292_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_292_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_32_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_32_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_325_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_325_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_390_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_390_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_433_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_433_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_97_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {0000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_97_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    { 0 },  // RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0}    // RF_SUBBAND_4_9_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0}    // RF_SUBBAND_4_9_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0}    // RF_SUBBAND_4_9_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0}    // RF_SUBBAND_4_9_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0}    // RF_SUBBAND_4_9_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0}    // RF_SUBBAND_4_9_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0}    // RF_SUBBAND_4_9_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0}    // RF_SUBBAND_4_9_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0}    // RF_SUBBAND_4_9_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_HIGH_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_HIGH_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_HIGH_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_HIGH_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_HIGH_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_HIGH_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_HIGH_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_HIGH_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_HIGH_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_LOW_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_LOW_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_LOW_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_LOW_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_LOW_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_LOW_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_LOW_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_LOW_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_LOW_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_MID_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_MID_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_MID_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_MID_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_MID_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_MID_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_MID_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_MID_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                    {0},   // RF_SUBBAND_5_MID_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_78_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_78_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_78_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_72_2_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_72_2_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_72_2_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_86_6_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_86_6_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_86_6_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_108_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_108_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_108_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_121_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_121_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_121_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_135_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_135_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_135_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_162_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_162_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_162_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_180_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_180_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_180_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_81_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_81_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_81_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_120_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_120_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_120_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_135_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_135_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_135_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_150_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_150_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_150_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_180_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_180_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_180_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_200_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_200_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_200_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_90_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_90_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_90_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_117_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_117_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_117_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_175_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_175_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_175_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_234_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_234_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_234_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_263_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_263_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_263_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_292_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_292_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_292_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_351_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_351_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_351_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_390_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_390_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_390_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_87_8_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_87_8_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_87_8_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_130_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_130_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_130_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_195_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_195_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_195_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_260_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_260_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_260_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_292_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_292_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_292_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_325_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_325_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_325_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_390_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_390_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_390_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_433_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_433_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_433_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_97_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_97_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1000},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_97_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_58_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_58_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_58_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_60_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_60_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_60_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_58_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_58_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_58_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1100},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_65_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 20MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 20MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 20MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 20MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 20MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 40MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 40MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 40MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 40MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 40MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 80MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 80MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 80MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 80MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:               //11ac 80MHZ NG, SG
staging/prima/CORE/WDA/src/wlan_nv.c:                {1200},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_57_7_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1200},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_57_7_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1200},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_57_7_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_39_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_39_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_39_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_52_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_52_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_52_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_43_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_43_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_43_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_40_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_40_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_40_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_54_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_54_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_54_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_45_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_45_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1250},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_45_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_26_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_26_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_26_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_28_8_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_28_8_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_28_8_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_27_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_27_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_27_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_30_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_30_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_30_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_29_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_29_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_29_3_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_32_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_32_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1300},    // HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_32_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1350},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_19_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1350},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_19_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1350},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_19_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1350},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_21_6_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1350},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_21_6_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1350},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_21_6_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_13_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_13_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_13_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_6_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_6_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_NGI_6_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_14_4_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_14_4_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_14_4_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_7_2_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_7_2_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_CB_SGI_7_2_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_13_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_13_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_13_5_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_15_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_15_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:                {1400},    // HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_15_MBPS,
staging/prima/CORE/WDA/src/wlan_nv.c:            }, // REG_DOMAIN_HI_5GHZ end
staging/prima/CORE/WDA/src/wlan_nv.c:            }, // REG_DOMAIN_HI_5GHZ end
staging/prima/CORE/WDA/src/wlan_nv.c:            {   // REG_DOMAIN_HI_5GHZ start
staging/prima/CORE/WDA/src/wlan_nv.c:            {   // REG_DOMAIN_HI_5GHZ start
staging/prima/CORE/WDA/src/wlan_nv.c:            } // REG_DOMAIN_NO_5GHZ end
staging/prima/CORE/WDA/src/wlan_nv.c:            } // REG_DOMAIN_NO_5GHZ end
staging/prima/CORE/WDA/src/wlan_nv.c:            {   // REG_DOMAIN_NO_5GHZ start
staging/prima/CORE/WDA/src/wlan_nv.c:            {   // REG_DOMAIN_NO_5GHZ start
staging/prima/CORE/WDA/src/wlan_nv.c:            },  //    RF_SUBBAND_2_4_GHZ,
staging/prima/CORE/WDA/src/wlan_nv.c:                },  //    RF_SUBBAND_2_4_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                },  //    RF_SUBBAND_4_9_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                },  //    RF_SUBBAND_5_HIGH_GHZ,
staging/prima/CORE/WDA/src/wlan_nv.c:                },  //    RF_SUBBAND_5_LOW_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:                },  //    //     RF_SUBBAND_5_MID_GHZ
staging/prima/CORE/WDA/src/wlan_nv.c:            //     uAbsPwrPrecision bRatePowerOffset[NUM_2_4GHZ_CHANNELS];
staging/prima/CORE/WDA/src/wlan_nv.c:            //     uAbsPwrPrecision bRatePowerOffset[NUM_2_4GHZ_CHANNELS];
staging/prima/CORE/WDA/src/wlan_qct_wda.c:      case WNI_CFG_DEFAULT_RATE_INDEX_24GHZ:
staging/prima/CORE/WDA/src/wlan_qct_wda.c:      case WNI_CFG_DEFAULT_RATE_INDEX_5GHZ:
staging/prima/CORE/WDA/src/wlan_qct_wda.c:      case WNI_CFG_FIXED_RATE_MULTICAST_24GHZ:
staging/prima/CORE/WDA/src/wlan_qct_wda.c:      case WNI_CFG_FIXED_RATE_MULTICAST_5GHZ:
staging/prima/CORE/WDA/src/wlan_qct_wda.c:                    "Failed to get value for WNI_CFG_DEFAULT_RATE_INDEX_24GHZ");
staging/prima/CORE/WDA/src/wlan_qct_wda.c:                    "Failed to get value for WNI_CFG_DEFAULT_RATE_INDEX_5GHZ");
staging/prima/CORE/WDA/src/wlan_qct_wda.c:                 "Failed to get value for WNI_CFG_FIXED_RATE_MULTICAST_24GHZ");
staging/prima/CORE/WDA/src/wlan_qct_wda.c:                 "Failed to get value for WNI_CFG_FIXED_RATE_MULTICAST_5GHZ");
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   if(wlan_cfgGetInt(pMac, WNI_CFG_DEFAULT_RATE_INDEX_24GHZ,
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   if(wlan_cfgGetInt(pMac, WNI_CFG_DEFAULT_RATE_INDEX_5GHZ,
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   if(wlan_cfgGetInt(pMac, WNI_CFG_FIXED_RATE_MULTICAST_24GHZ,
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   if(wlan_cfgGetInt(pMac, WNI_CFG_FIXED_RATE_MULTICAST_5GHZ,
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   /* QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_24GHZ   */
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   /* QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_5GHZ   */
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   /* QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_24GHZ   */
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   /* QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_5GHZ   */
staging/prima/CORE/WDA/src/wlan_qct_wda.c:         return QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_24GHZ;
staging/prima/CORE/WDA/src/wlan_qct_wda.c:         return QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_5GHZ;
staging/prima/CORE/WDA/src/wlan_qct_wda.c:         return QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_24GHZ;
staging/prima/CORE/WDA/src/wlan_qct_wda.c:         return QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_5GHZ;
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   tlvStruct->type = QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_24GHZ  ;
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   tlvStruct->type = QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_5GHZ  ;
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   tlvStruct->type = QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_24GHZ  ;
staging/prima/CORE/WDA/src/wlan_qct_wda.c:   tlvStruct->type = QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_5GHZ  ;
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_DEFAULT_RATE_INDEX_24GHZ           25
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_DEFAULT_RATE_INDEX_24GHZ_STADEF    1
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_DEFAULT_RATE_INDEX_24GHZ_STAMAX    31
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_DEFAULT_RATE_INDEX_24GHZ_STAMIN    0
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_DEFAULT_RATE_INDEX_5GHZ            26
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_DEFAULT_RATE_INDEX_5GHZ_STADEF    5
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_DEFAULT_RATE_INDEX_5GHZ_STAMAX    11
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_DEFAULT_RATE_INDEX_5GHZ_STAMIN    0
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_0_25MBPS_SLR_20MHZ_SIMO       29
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_0_5MBPS_SLR_20MHZ_SIMO        30
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_13MBPS_MCS1_20MHZ_SIMO        14
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_14_4MBPS_MCS1_20MHZ_SIMO_SGI  22
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_19_5MBPS_MCS2_20MHZ_SIMO      15
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_21_7MBPS_MCS2_20MHZ_SIMO_SGI  23
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_26MBPS_MCS3_20MHZ_SIMO        16
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_28_9MBPS_MCS3_20MHZ_SIMO_SGI  24
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_39MBPS_MCS4_20MHZ_SIMO        17
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_43_3MBPS_MCS4_20MHZ_SIMO_SGI  25
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_52MBPS_MCS5_20MHZ_SIMO        18
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_57_8MBPS_MCS5_20MHZ_SIMO_SGI  26
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_58_5MBPS_MCS6_20MHZ_SIMO      19
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_6_5MBPS_MCS0_20MHZ_SIMO       13
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_65MBPS_MCS6_20MHZ_SIMO_SGI    27
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_65MBPS_MCS7_20MHZ_SIMO        20
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_68_25MBPS_QC_PROP_20MHZ_SIMO  31
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_72_2MBPS_MCS7_20MHZ_SIMO_SGI  28
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_7_2MBPS_MCS0_20MHZ_SIMO_SGI   21
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_MULTICAST_24GHZ         23
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_MULTICAST_24GHZ_STADEF    1
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_MULTICAST_24GHZ_STAMAX    31
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_MULTICAST_24GHZ_STAMIN    0
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_MULTICAST_5GHZ          24
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_MULTICAST_5GHZ_STADEF    5
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_MULTICAST_5GHZ_STAMAX    31
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:#define WDI_CFG_FIXED_RATE_MULTICAST_5GHZ_STAMIN    0
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:/* WDI_CFG_DEFAULT_RATE_INDEX_24GHZ */
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:/* WDI_CFG_DEFAULT_RATE_INDEX_5GHZ */
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:/* WDI_CFG_FIXED_RATE_MULTICAST_24GHZ */
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi_cfg.h:/* WDI_CFG_FIXED_RATE_MULTICAST_5GHZ */
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED = 5, //20/40MHZ offset CENTERED 40/80MHZ offset CENTERED
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED = 6, //20/40MHZ offset HIGH 40/80MHZ offset CENTERED
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_CHANNEL_20MHZ_HIGH_40MHZ_HIGH = 10,//20/40MHZ offset-HIGH 40/80MHZ offset HIGH
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_CHANNEL_20MHZ_HIGH_40MHZ_LOW = 8, //20/40MHZ offset HIGH 40/80MHZ offset LOW
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_CHANNEL_20MHZ_LOW_40MHZ_CENTERED = 4, //20/40MHZ offset LOW 40/80MHZ offset CENTERED
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_CHANNEL_20MHZ_LOW_40MHZ_HIGH = 9, //20/40MHZ offset LOW 40/80MHZ offset HIGH
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_CHANNEL_20MHZ_LOW_40MHZ_LOW = 7,//20/40MHZ offset LOW 40/80MHZ offset LOW
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_HT_OP_MODE_NO_LEGACY_20MHZ_HT,
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED = 5, //20/40MHZ offset CENTERED 40/80MHZ offset CENTERED
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED = 6, //20/40MHZ offset HIGH 40/80MHZ offset CENTERED
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH = 10,//20/40MHZ offset-HIGH 40/80MHZ offset HIGH
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW = 8, //20/40MHZ offset HIGH 40/80MHZ offset LOW
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED = 4, //20/40MHZ offset LOW 40/80MHZ offset CENTERED
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH = 9, //20/40MHZ offset LOW 40/80MHZ offset HIGH
staging/prima/CORE/WDI/CP/inc/wlan_qct_wdi.h:  WDI_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW = 7,//20/40MHZ offset LOW 40/80MHZ offset LOW
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_CHANNEL_20MHZ_HIGH_40MHZ_HIGH:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_CHANNEL_20MHZ_HIGH_40MHZ_LOW:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_CHANNEL_20MHZ_LOW_40MHZ_CENTERED:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_CHANNEL_20MHZ_LOW_40MHZ_HIGH:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_CHANNEL_20MHZ_LOW_40MHZ_LOW:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_HT_OP_MODE_NO_LEGACY_20MHZ_HT:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:  case WDI_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW:
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:     return PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW;
staging/prima/CORE/WDI/CP/src/wlan_qct_wdi.c:    return PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW;
staging/prima/firmware_bin/WCNSS_qcom_cfg.ini:# 0:2.4GHZ 1: LOW-5GHZ 2:MID-5GHZ 3:HIGH-5GHZ 4: 4.9HZ BAND
staging/prima/riva/inc/pttModule.h:#define GRAB_RAM_SIZE_80MHZ_1_CHAIN 12000
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_24GHZ           25
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_24GHZ_STADEF     QWLAN_HAL_CFG_FIXED_RATE_1MBPS
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_24GHZ_STAMAX     QWLAN_HAL_CFG_FIXED_RATE_STAMAX
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_24GHZ_STAMIN    0
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_5GHZ            26
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_5GHZ_STADEF      QWLAN_HAL_CFG_FIXED_RATE_6MBPS
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_5GHZ_STAMAX      QWLAN_HAL_CFG_FIXED_RATE_STAMAX
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_5GHZ_STAMIN    0
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_108MBPS_MCS5_40MHZ_SIMO       34
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_120MBPS_MCS5_40MHZ_SIMO_SGI   42
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_121_5MBPS_MCS6_40MHZ_SIMO     35
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_13_5MBPS_MCS0_40MHZ_SIMO      29
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_135MBPS_MCS6_40MHZ_SIMO_SGI   43
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_135MBPS_MCS7_40MHZ_SIMO       36
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_13MBPS_MCS1_20MHZ_SIMO        14
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_14_4MBPS_MCS1_20MHZ_SIMO_SGI  22
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_150MBPS_MCS7_40MHZ_SIMO_SGI   44
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_15MBPS_MCS0_40MHZ_SIMO_SGI    37
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_19_5MBPS_MCS2_20MHZ_SIMO      15
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_21_7MBPS_MCS2_20MHZ_SIMO_SGI  23
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_26MBPS_MCS3_20MHZ_SIMO        16
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_27MBPS_MCS1_40MHZ_SIMO        30
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_28_9MBPS_MCS3_20MHZ_SIMO_SGI  24
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_30MBPS_MCS1_40MHZ_SIMO_SGI    38
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_39MBPS_MCS4_20MHZ_SIMO        17
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_40_5MBPS_MCS2_40MHZ_SIMO      31
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_43_3MBPS_MCS4_20MHZ_SIMO_SGI  25
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_45MBPS_MCS2_40MHZ_SIMO_SGI    39
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_52MBPS_MCS5_20MHZ_SIMO        18
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_54MBPS_MCS3_40MHZ_SIMO        32
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_57_8MBPS_MCS5_20MHZ_SIMO_SGI  26
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_58_5MBPS_MCS6_20MHZ_SIMO      19
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_60MBPS_MCS3_40MHZ_SIMO_SGI    40
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_6_5MBPS_MCS0_20MHZ_SIMO       13
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_65MBPS_MCS6_20MHZ_SIMO_SGI    27
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_65MBPS_MCS7_20MHZ_SIMO        20
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_72_2MBPS_MCS7_20MHZ_SIMO_SGI  28
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_7_2MBPS_MCS0_20MHZ_SIMO_SGI   21
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_81MBPS_MCS4_40MHZ_SIMO        33
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_90MBPS_MCS4_40MHZ_SIMO_SGI    41
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_24GHZ         23
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_24GHZ_STADEF   QWLAN_HAL_CFG_FIXED_RATE_1MBPS
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_24GHZ_STAMAX   QWLAN_HAL_CFG_FIXED_RATE_STAMAX
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_24GHZ_STAMIN    0
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_5GHZ          24
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_5GHZ_STADEF    QWLAN_HAL_CFG_FIXED_RATE_6MBPS
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_5GHZ_STAMAX    QWLAN_HAL_CFG_FIXED_RATE_STAMAX
staging/prima/riva/inc/wlan_hal_cfg.h:#define QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_5GHZ_STAMIN    0
staging/prima/riva/inc/wlan_hal_cfg.h:/* QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_24GHZ */
staging/prima/riva/inc/wlan_hal_cfg.h:/* QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_5GHZ */
staging/prima/riva/inc/wlan_hal_cfg.h:/* QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_24GHZ */
staging/prima/riva/inc/wlan_hal_cfg.h:/* QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_5GHZ */
staging/prima/riva/inc/wlan_hal_cfg.h:   uint32   cfgDefaultRateIndex24GHz;  //QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_24GHZ
staging/prima/riva/inc/wlan_hal_cfg.h:   uint32   cfgDefaultRateIndex5GHz;   //QWLAN_HAL_CFG_DEFAULT_RATE_INDEX_5GHZ
staging/prima/riva/inc/wlan_hal_cfg.h:   uint32   cfgFixedRateMcast24GHz;    //QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_24GHZ
staging/prima/riva/inc/wlan_hal_cfg.h:   uint32   cfgFixedRateMcast5GHz;     //QWLAN_HAL_CFG_FIXED_RATE_MULTICAST_5GHZ
staging/prima/riva/inc/wlan_hal_msg.h:#define PARAM_HT20MHZCOEXIST_CHANGED                  (1<<6)
staging/prima/riva/inc/wlan_hal_msg.h:  eSIR_HT_OP_MODE_NO_LEGACY_20MHZ_HT,  // No legacy device, but 20 MHz HT present
staging/prima/riva/inc/wlan_hal_msg.h:#ifdef FEATURE_5GHZ_BAND
staging/prima/riva/inc/wlan_hal_msg.h:    PARAM_llGCOEXIST_CHANGED|PARAM_HT20MHZCOEXIST_CHANGED|PARAM_NON_GF_DEVICES_PRESENT_CHANGED|PARAM_RIFS_MODE_CHANGED|PARAM_LSIG_TXOP_FULL_SUPPORT_CHANGED| PARAM_OBSS_MODE_CHANGED)
staging/prima/riva/inc/wlan_hal_msg.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_CENTERED_40MHZ_CENTERED = 5, //20/40MHZ offset CENTERED 40/80MHZ offset CENTERED
staging/prima/riva/inc/wlan_hal_msg.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_CENTERED = 6, //20/40MHZ offset HIGH 40/80MHZ offset CENTERED
staging/prima/riva/inc/wlan_hal_msg.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_HIGH = 10,//20/40MHZ offset-HIGH 40/80MHZ offset HIGH
staging/prima/riva/inc/wlan_hal_msg.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_HIGH_40MHZ_LOW = 8, //20/40MHZ offset HIGH 40/80MHZ offset LOW
staging/prima/riva/inc/wlan_hal_msg.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_CENTERED = 4, //20/40MHZ offset LOW 40/80MHZ offset CENTERED
staging/prima/riva/inc/wlan_hal_msg.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_HIGH = 9, //20/40MHZ offset LOW 40/80MHZ offset HIGH
staging/prima/riva/inc/wlan_hal_msg.h:    PHY_QUADRUPLE_CHANNEL_20MHZ_LOW_40MHZ_LOW = 7,//20/40MHZ offset LOW 40/80MHZ offset LOW
staging/prima/riva/inc/wlan_nv.h:    /*11AC rate 20MHZ Normal GI*/
staging/prima/riva/inc/wlan_nv.h:    /*11AC rate 20MHZ Shortl GI*/
staging/prima/riva/inc/wlan_nv.h:    /*11AC rates 40MHZ normal GI*/
staging/prima/riva/inc/wlan_nv.h:    /*11AC rates 40MHZ short GI*/
staging/prima/riva/inc/wlan_nv.h:    /*11AC rates 80 MHZ normal GI*/
staging/prima/riva/inc/wlan_nv.h:    /*11AC rates 80 MHZ short GI*/
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_13_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_19_5_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_26_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_39_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_52_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_58_5_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_6_5_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_65_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_NGI_78_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_14_4_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_21_6_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_28_8_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_43_3_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_57_7_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_65_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_72_2_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_7_2_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_20MHZ_MCS_1NSS_SGI_86_6_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_108_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_121_5_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_135_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_13_5_MBPS ,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_162_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_180_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_27_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_40_5_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_54_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_NGI_81_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_120_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_135_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_150_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_15_MBPS ,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_180_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_200_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_30_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_45_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_60_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_40MHZ_MCS_1NSS_CB_SGI_90_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_117_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_175_5_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_234_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_263_3_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_292_5_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_29_3_MBPS ,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_351_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_390_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_58_5_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_NGI_87_8_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_130_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_195_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_260_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_292_5_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_325_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_32_5_MBPS ,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_390_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_433_3_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_65_MBPS,
staging/prima/riva/inc/wlan_nv.h:    HAL_PHY_RATE_VHT_80MHZ_MCS_1NSS_CB_SGI_97_5_MBPS,
staging/prima/riva/inc/wlan_nv.h:    MAX_20MHZ_RF_CHANNEL = RF_CHAN_165,
staging/prima/riva/inc/wlan_nv.h:    MAX_2_4GHZ_CHANNEL = RF_CHAN_14,
staging/prima/riva/inc/wlan_nv.h:    MAX_40MHZ_RF_CHANNEL = RF_CHAN_BOND_163,
staging/prima/riva/inc/wlan_nv.h:    MAX_5GHZ_CHANNEL = RF_CHAN_165,
staging/prima/riva/inc/wlan_nv.h:    MAX_CB_2_4GHZ_CHANNEL = RF_CHAN_BOND_11,
staging/prima/riva/inc/wlan_nv.h:    MAX_CB_5GHZ_CHANNEL = RF_CHAN_BOND_163,
staging/prima/riva/inc/wlan_nv.h:    MIN_20MHZ_RF_CHANNEL = RF_CHAN_1,
staging/prima/riva/inc/wlan_nv.h:    MIN_2_4GHZ_CHANNEL = RF_CHAN_1,
staging/prima/riva/inc/wlan_nv.h:    MIN_40MHZ_RF_CHANNEL = RF_CHAN_BOND_3,
staging/prima/riva/inc/wlan_nv.h:    MIN_5GHZ_CHANNEL = RF_CHAN_240,
staging/prima/riva/inc/wlan_nv.h:    MIN_CB_2_4GHZ_CHANNEL = RF_CHAN_BOND_3,
staging/prima/riva/inc/wlan_nv.h:    MIN_CB_5GHZ_CHANNEL = RF_CHAN_BOND_242,
staging/prima/riva/inc/wlan_nv.h:    NUM_20MHZ_RF_CHANNELS = (MAX_20MHZ_RF_CHANNEL - MIN_20MHZ_RF_CHANNEL + 1),
staging/prima/riva/inc/wlan_nv.h:    NUM_2_4GHZ_CHANNELS = (MAX_2_4GHZ_CHANNEL - MIN_2_4GHZ_CHANNEL + 1),
staging/prima/riva/inc/wlan_nv.h:    NUM_40MHZ_RF_CHANNELS = (MAX_40MHZ_RF_CHANNEL - MIN_40MHZ_RF_CHANNEL + 1),
staging/prima/riva/inc/wlan_nv.h:    NUM_5GHZ_CHANNELS = (MAX_5GHZ_CHANNEL - MIN_5GHZ_CHANNEL + 1),
staging/prima/riva/inc/wlan_nv.h:    NUM_TPC_2_4GHZ_CHANNELS = 14,
staging/prima/riva/inc/wlan_nv.h:    NUM_TPC_5GHZ_CHANNELS = NUM_5GHZ_CHANNELS,
staging/prima/riva/inc/wlan_nv.h:    REG_DOMAIN_HI_5GHZ,
staging/prima/riva/inc/wlan_nv.h:    REG_DOMAIN_NO_5GHZ,
staging/prima/riva/inc/wlan_nv.h:    RF_BAND_2_4_GHZ = 0,
staging/prima/riva/inc/wlan_nv.h:    RF_BAND_5_GHZ = 1,
staging/prima/riva/inc/wlan_nv.h:    RF_SUBBAND_2_4_GHZ      = 0,
staging/prima/riva/inc/wlan_nv.h:    RF_SUBBAND_4_9_GHZ      = 4,    //Japanese
staging/prima/riva/inc/wlan_nv.h:    RF_SUBBAND_5_HIGH_GHZ   = 3,    //High U-NII
staging/prima/riva/inc/wlan_nv.h:    RF_SUBBAND_5_LOW_GHZ    = 1,    //Low & Mid U-NII
staging/prima/riva/inc/wlan_nv.h:    RF_SUBBAND_5_MID_GHZ    = 2,    //ETSI
staging/prima/riva/inc/wlan_nv.h:    uAbsPwrPrecision bRatePowerOffset[NUM_2_4GHZ_CHANNELS];
staging/prima/riva/inc/wlan_phy.h:    PHY_CCA_20MHZ_SOURCE = 1
staging/prima/riva/inc/wlan_phy.h:    PHY_CCA_40MHZ_SOURCE = 0,
staging/quatech_usb2/quatech_usb2.c:	jift = jiffies + (10 * HZ);	/* 10 sec timeout */
staging/rtl8187se/ieee80211/ieee80211_crypt.c:		ieee->crypt_deinit_timer.expires = jiffies + HZ;
staging/rtl8187se/ieee80211/ieee80211_crypt.c:		ieee->crypt_deinit_timer.expires = jiffies + HZ;
staging/rtl8187se/ieee80211/ieee80211.h:#define DEFAULT_MAX_SCAN_AGE (15 * HZ)
staging/rtl8187se/ieee80211/ieee80211.h:#define IEEE80211_24GHZ_BAND     (1<<0)
staging/rtl8187se/ieee80211/ieee80211.h:#define IEEE80211_52GHZ_BAND     (1<<1)
staging/rtl8187se/ieee80211/ieee80211.h:#define IEEE80211_SOFTMAC_ASSOC_RETRY_TIME	(HZ * 2)
staging/rtl8187se/ieee80211/ieee80211.h:#define IEEE80211_SOFTMAC_SCAN_TIME		100 /* (HZ / 2) */
staging/rtl8187se/ieee80211/ieee80211.h:	    (ieee->freq_band & IEEE80211_24GHZ_BAND))
staging/rtl8187se/ieee80211/ieee80211.h:	    (ieee->freq_band & IEEE80211_24GHZ_BAND))
staging/rtl8187se/ieee80211/ieee80211.h:	    (ieee->freq_band & IEEE80211_52GHZ_BAND))
staging/rtl8187se/ieee80211/ieee80211_rx.c:#define IEEE_PACKET_RETRY_TIME (5*HZ)
staging/rtl8187se/ieee80211/ieee80211_rx.c:			if (stats->freq == IEEE80211_24GHZ_BAND)
staging/rtl8187se/ieee80211/ieee80211_rx.c:	if (stats->freq == IEEE80211_52GHZ_BAND)
staging/rtl8187se/ieee80211/ieee80211_rx.c:	if (stats->freq == IEEE80211_52GHZ_BAND) {
staging/rtl8187se/ieee80211/ieee80211_rx.c:		    time_after(jiffies, entry->first_frag_time + 2 * HZ)) {
staging/rtl8187se/ieee80211/ieee80211_softmac.c:			ieee->associate_timer.expires = jiffies + (HZ / 2);
staging/rtl8187se/ieee80211/ieee80211_softmac.c:		ieee->associate_timer.expires = jiffies + (HZ / 2);
staging/rtl8187se/ieee80211/ieee80211_softmac.c:		ieee->associate_timer.expires = jiffies + (HZ / 2);
staging/rtl8187se/ieee80211/ieee80211_softmac.c:			//printk("beacon_interval:%x, dtim_period:%x, totol to Msecs:%x, HZ:%x\n", ieee->current_network.beacon_interval, ieee->current_network.dtim_period, MSECS(((ieee->current_network.beacon_interval * ieee->current_network.dtim_period))), HZ);
staging/rtl8187se/ieee80211/ieee80211_wx.c:					(jiffies - network->last_scanned) / (HZ / 100));
staging/rtl8187se/ieee80211/ieee80211_wx.c:		      " Last beacon: %lums ago", (jiffies - network->last_scanned) / (HZ / 100));
staging/rtl8187se/r8180_core.c:	dev->watchdog_timeo = HZ*3;
staging/rtl8187se/r8180_core.c:		.freq = IEEE80211_24GHZ_BAND,
staging/rtl8192e/rtl8192e/r8192E_dev.c:		regBwOpMode = BW_OPMODE_20MHZ;
staging/rtl8192e/rtl8192e/r8192E_dev.c:		regBwOpMode = BW_OPMODE_20MHZ;
staging/rtl8192e/rtl8192e/r8192E_dev.c:		regBwOpMode = BW_OPMODE_20MHZ;
staging/rtl8192e/rtl8192e/r8192E_dev.c:		regBwOpMode = BW_OPMODE_20MHZ;
staging/rtl8192e/rtl8192e/r8192E_dev.c:		regBwOpMode = BW_OPMODE_5G | BW_OPMODE_20MHZ;
staging/rtl8192e/rtl8192e/r8192E_hw.h:#define	BW_OPMODE_20MHZ			BIT2
staging/rtl8192e/rtl8192e/r8192E_phy.c:		regBwOpMode |= BW_OPMODE_20MHZ;
staging/rtl8192e/rtl8192e/r8192E_phy.c:		regBwOpMode &= ~BW_OPMODE_20MHZ;
staging/rtl8192e/rtl8192e/rtl_core.c:	dev->watchdog_timeo = HZ * 3;
staging/rtl8192e/rtl8192e/rtl_core.c:		.freq = RTLLIB_24GHZ_BAND,
staging/rtl8192e/rtl819x_HT.h:#define HT_OPMODE_40MHZ_PROTECT	2
staging/rtl8192e/rtl819x_HT.h:	HT_IOT_ACT_DISABLE_RX_40MHZ_SHORT_GI = 0x08000000,
staging/rtl8192e/rtl819x_HT.h:	HT_IOT_ACT_DISABLE_TX_40_MHZ = 0x00080000,
staging/rtl8192e/rtl819x_HT.h:	SC_MODE_FULL40MHZ = 3,
staging/rtl8192e/rtl819x_HTProc.c:		if (pHT->IOTAction & HT_IOT_ACT_DISABLE_RX_40MHZ_SHORT_GI)
staging/rtl8192e/rtllib_crypt.c:		info->crypt_deinit_timer.expires = jiffies + HZ;
staging/rtl8192e/rtllib_crypt.c:		info->crypt_deinit_timer.expires = jiffies + HZ;
staging/rtl8192e/rtllib.h:#define DEFAULT_MAX_SCAN_AGE (15 * HZ)
staging/rtl8192e/rtllib.h:#define RTLLIB_24GHZ_BAND     (1<<0)
staging/rtl8192e/rtllib.h:#define RTLLIB_24GHZ_CHANNELS (RTLLIB_24GHZ_MAX_CHANNEL - \
staging/rtl8192e/rtllib.h:#define RTLLIB_24GHZ_MAX_CHANNEL 14
staging/rtl8192e/rtllib.h:#define RTLLIB_24GHZ_MIN_CHANNEL 1
staging/rtl8192e/rtllib.h:#define RTLLIB_52GHZ_BAND     (1<<1)
staging/rtl8192e/rtllib.h:#define RTLLIB_52GHZ_CHANNELS (RTLLIB_52GHZ_MAX_CHANNEL - \
staging/rtl8192e/rtllib.h:#define RTLLIB_52GHZ_MAX_CHANNEL 165
staging/rtl8192e/rtllib.h:#define RTLLIB_52GHZ_MIN_CHANNEL 34
staging/rtl8192e/rtllib.h:#define RTLLIB_SOFTMAC_ASSOC_RETRY_TIME (HZ * 2)
staging/rtl8192e/rtllib.h:	    (ieee->freq_band & RTLLIB_24GHZ_BAND))
staging/rtl8192e/rtllib.h:	    (ieee->freq_band & RTLLIB_24GHZ_BAND))
staging/rtl8192e/rtllib.h:	    (ieee->freq_band & RTLLIB_52GHZ_BAND))
staging/rtl8192e/rtllib.h:				  RTLLIB_24GHZ_MIN_CHANNEL + 1)
staging/rtl8192e/rtllib.h:				  RTLLIB_52GHZ_MIN_CHANNEL + 1)
staging/rtl8192e/rtllib_rx.c:#define IEEE_PACKET_RETRY_TIME (5*HZ)
staging/rtl8192e/rtllib_rx.c:	if (stats->freq == RTLLIB_52GHZ_BAND)
staging/rtl8192e/rtllib_rx.c:	if (stats->freq == RTLLIB_52GHZ_BAND) {
staging/rtl8192e/rtllib_rx.c:		    time_after(jiffies, entry->first_frag_time + 2 * HZ)) {
staging/rtl8192e/rtllib_softmac.c:			ieee->associate_timer.expires = jiffies + (HZ / 2);
staging/rtl8192e/rtllib_softmac.c:		mod_timer(&ieee->associate_timer, jiffies + (HZ/2));
staging/rtl8192e/rtllib_softmac.c:		mod_timer(&ieee->associate_timer, jiffies + (HZ/2));
staging/rtl8192e/rtllib_wx.c:		      (jiffies - network->last_scanned) / (HZ / 100));
staging/rtl8192e/rtllib_wx.c:				(jiffies - network->last_scanned) / (HZ / 100));
staging/rtl8192u/ieee80211/ieee80211_crypt.c:		ieee->crypt_deinit_timer.expires = jiffies + HZ;
staging/rtl8192u/ieee80211/ieee80211_crypt.c:		ieee->crypt_deinit_timer.expires = jiffies + HZ;
staging/rtl8192u/ieee80211/ieee80211.h:#define DEFAULT_MAX_SCAN_AGE (15 * HZ)
staging/rtl8192u/ieee80211/ieee80211.h:#define IEEE80211_24GHZ_BAND     (1<<0)
staging/rtl8192u/ieee80211/ieee80211.h:#define IEEE80211_24GHZ_CHANNELS (IEEE80211_24GHZ_MAX_CHANNEL - \
staging/rtl8192u/ieee80211/ieee80211.h:#define IEEE80211_24GHZ_MAX_CHANNEL 14
staging/rtl8192u/ieee80211/ieee80211.h:#define IEEE80211_24GHZ_MIN_CHANNEL 1
staging/rtl8192u/ieee80211/ieee80211.h:#define IEEE80211_52GHZ_BAND     (1<<1)
staging/rtl8192u/ieee80211/ieee80211.h:#define IEEE80211_52GHZ_CHANNELS (IEEE80211_52GHZ_MAX_CHANNEL - \
staging/rtl8192u/ieee80211/ieee80211.h:#define IEEE80211_52GHZ_MAX_CHANNEL 165
staging/rtl8192u/ieee80211/ieee80211.h:#define IEEE80211_52GHZ_MIN_CHANNEL 34
staging/rtl8192u/ieee80211/ieee80211.h:#define IEEE80211_SOFTMAC_ASSOC_RETRY_TIME (HZ * 2)
staging/rtl8192u/ieee80211/ieee80211.h://(HZ / 2)
staging/rtl8192u/ieee80211/ieee80211.h:				  IEEE80211_24GHZ_MIN_CHANNEL + 1)
staging/rtl8192u/ieee80211/ieee80211.h:				  IEEE80211_52GHZ_MIN_CHANNEL + 1)
staging/rtl8192u/ieee80211/ieee80211.h:	    (ieee->freq_band & IEEE80211_24GHZ_BAND))
staging/rtl8192u/ieee80211/ieee80211.h:	    (ieee->freq_band & IEEE80211_24GHZ_BAND))
staging/rtl8192u/ieee80211/ieee80211.h:	    (ieee->freq_band & IEEE80211_52GHZ_BAND))
staging/rtl8192u/ieee80211/ieee80211_rx.c:#define IEEE_PACKET_RETRY_TIME (5*HZ)
staging/rtl8192u/ieee80211/ieee80211_rx.c:	if (stats->freq == IEEE80211_52GHZ_BAND)
staging/rtl8192u/ieee80211/ieee80211_rx.c:	if (stats->freq == IEEE80211_52GHZ_BAND) {
staging/rtl8192u/ieee80211/ieee80211_rx.c:		    time_after(jiffies, entry->first_frag_time + 2 * HZ)) {
staging/rtl8192u/ieee80211/ieee80211_softmac.c:			ieee->associate_timer.expires = jiffies + (HZ / 2);
staging/rtl8192u/ieee80211/ieee80211_softmac.c:		mod_timer(&ieee->associate_timer, jiffies + (HZ/2));
staging/rtl8192u/ieee80211/ieee80211_softmac.c:		mod_timer(&ieee->associate_timer, jiffies + (HZ/2));
staging/rtl8192u/ieee80211/ieee80211_wx.c:				(jiffies - network->last_scanned) / (HZ / 100));
staging/rtl8192u/ieee80211/ieee80211_wx.c:		      " Last beacon: %lums ago", (jiffies - network->last_scanned) / (HZ / 100));
staging/rtl8192u/ieee80211/rtl819x_HT.h:/* 2007/06/07 MH Define sub-carrier mode for 40MHZ. */
staging/rtl8192u/ieee80211/rtl819x_HT.h:#define HT_OPMODE_40MHZ_PROTECT	2
staging/rtl8192u/ieee80211/rtl819x_HT.h:	SC_MODE_FULL40MHZ = 3,
staging/rtl8192u/ieee80211/rtl819x_HT.h:typedef enum _HT_Bandwidth_40MHZ_Sub_Carrier{
staging/rtl8192u/r8192U_core.c:							&data, 2, HZ / 2);
staging/rtl8192u/r8192U_core.c:							&data, 4, HZ / 2);
staging/rtl8192u/r8192U_core.c:	dev->watchdog_timeo = HZ*3;	//modified by john, 0805
staging/rtl8192u/r8192U_core.c:		.freq = IEEE80211_24GHZ_BAND,
staging/rtl8192u/r8192U_core.c:		.freq = IEEE80211_24GHZ_BAND,
staging/rtl8192u/r8192U_core.c:			       indx|0xfe00, 0, &data, 1, HZ / 2);
staging/rtl8192u/r8192U_core.c:			       indx|0xfe00, 0, &data, 1, HZ / 2);
staging/rtl8192u/r8192U_core.c:				       indx|0xfe00, 0, &data, 2, HZ / 2);
staging/rtl8192u/r8192U_core.c:			       (indx&0xff)|0xff00, (indx>>8)&0x0f, &data, 1, HZ / 2);
staging/rtl8192u/r8192U_core.c:			       (indx&0xff)|0xff00, (indx>>8)&0x0f, &data, 1, HZ / 2);
staging/rtl8192u/r8192U_core.c:			       (indx&0xff)|0xff00, (indx>>8)&0x0f, &data, 2, HZ / 2);
staging/rtl8192u/r8192U_core.c:			       (indx&0xff)|0xff00, (indx>>8)&0x0f, &data, 4, HZ / 2);
staging/rtl8192u/r8192U_core.c:		    regBwOpMode = BW_OPMODE_20MHZ;
staging/rtl8192u/r8192U_core.c:		    regBwOpMode = BW_OPMODE_20MHZ;
staging/rtl8192u/r8192U_core.c:		regBwOpMode = BW_OPMODE_20MHZ;
staging/rtl8192u/r8192U_core.c:		regBwOpMode = BW_OPMODE_20MHZ;
staging/rtl8192u/r8192U_core.c:		regBwOpMode = BW_OPMODE_20MHZ;
staging/rtl8192u/r8192U_core.c:		regBwOpMode = BW_OPMODE_5G |BW_OPMODE_20MHZ;
staging/rtl8192u/r8192U_core.c:				stats.freq = IEEE80211_24GHZ_BAND;
staging/rtl8192u/r8192U_dm.c:			/* 2008/01/11 MH 40MHZ 90/92 register are not the same. */
staging/rtl8192u/r8192U_dm.c:			/* 2008/01/11 MH 40MHZ 90/92 register are not the same. */
staging/rtl8192u/r8192U_dm.c:					/* 2008/01/11 MH 40MHZ 90/92 register are not the same. */
staging/rtl8192u/r8192U_dm.c:					/* 2008/01/11 MH 40MHZ 90/92 register are not the same. */
staging/rtl8192u/r8192U_hw.h:#define	BW_OPMODE_20MHZ			BIT2
staging/rtl8192u/r819xU_HTType.h:/* 2007/06/07 MH Define sub-carrier mode for 40MHZ. */
staging/rtl8192u/r819xU_HTType.h:#define HT_OPMODE_40MHZ_PROTECT	2
staging/rtl8192u/r819xU_HTType.h:	SC_MODE_FULL40MHZ = 3,
staging/rtl8192u/r819xU_HTType.h:typedef enum _HT_Bandwidth_40MHZ_Sub_Carrier{
staging/rtl8192u/r819xU_phy.c:			regBwOpMode |= BW_OPMODE_20MHZ;
staging/rtl8192u/r819xU_phy.c:			regBwOpMode &= ~BW_OPMODE_20MHZ;
staging/rtl8712/ieee80211.h:#define DEFAULT_MAX_SCAN_AGE (15 * HZ)
staging/rtl8712/ieee80211.h:#define IEEE80211_24GHZ_BAND     (1<<0)
staging/rtl8712/ieee80211.h:#define IEEE80211_52GHZ_BAND     (1<<1)
staging/rtl8712/ieee80211.h:#define IEEE80211_SOFTMAC_ASSOC_RETRY_TIME (HZ * 2)
staging/rtl8712/ieee80211.h:/*(HZ / 2)*/
staging/rtl8712/osdep_service.h:	delta = (ms * HZ) / 1000;/*(ms)*/
staging/rtl8712/osdep_service.h:	mod_timer(ptimer, (jiffies+(delay_time*HZ/1000)));
staging/rtl8712/os_intfs.c:	pnetdev->watchdog_timeo = HZ; /* 1 second timeout */
staging/rtl8712/rtl8712_efuse.c:		/* Change Efuse Clock for write action to 40MHZ */
staging/rtl8712/rtl8712_wmac_bitdef.h:#define	_20MHZBW				BIT(2)
staging/rtl8712/rtl871x_mlme.c:	delta_time = (curr_time - (u32)pnetwork->last_scanned) / HZ;
staging/rtl8712/rtl871x_mp_phy_regdef.h:/* Reg 0x880 rFPGA0_AnalogParameter1 20/40 CCK support switch 40/80 BB MHZ */
staging/rtl8712/usb_ops_linux.c:				 pIo_buf, len, HZ / 2);
staging/rtl8712/usb_vendor_req.h:#define	RT_USB_SYSCLK_32KHZ		0
staging/rtl8712/usb_vendor_req.h:#define	RT_USB_SYSCLK_40MHZ		1
staging/rtl8712/usb_vendor_req.h:#define	RT_USB_SYSCLK_60MHZ		2
staging/rts5139/rts51x.c:					     delay_use * HZ);
staging/rts5139/rts51x.c:	wait_timeout((delay_use + 5) * HZ);
staging/rts5139/rts51x.h:	schedule_timeout((msecs) * HZ / 1000);	\
staging/rts5139/rts51x_transport.c:						      (timeout * HZ /
staging/rts5139/rts51x_transport.c:						      (timeout * HZ /
staging/rts5139/sd.h:/* #define MMC_26MHZ_SPEED                       0x0002 */
staging/rts5139/sd.h:/* #define MMC_52MHZ_SPEED                       0x0001 */
staging/rts_pstor/rtsx.c:				delay_use * HZ);
staging/rts_pstor/rtsx_transport.c:			&trans_done, timeout * HZ / 1000);
staging/rts_pstor/rtsx_transport.c:			&trans_done, timeout * HZ / 1000);
staging/rts_pstor/rtsx_transport.c:			&trans_done, timeout * HZ / 1000);
staging/rts_pstor/rtsx_transport.c:		&trans_done, timeout * HZ / 1000);
staging/rts_pstor/rtsx_transport.c:		&trans_done, timeout * HZ / 1000);
staging/rts_pstor/rtsx_transport.c:		&trans_done, timeout * HZ / 1000);
staging/sbe-2t3e3/module.c:	card->timer.expires = jiffies + HZ / 10;
staging/sbe-2t3e3/module.c:	card->timer.expires = jiffies + HZ / 10;
staging/sep/sep_crypto.c:		end_time = jiffies + (WAIT_TIME * HZ);
staging/sep/sep_crypto.c:	end_time = jiffies + (WAIT_TIME * HZ);
staging/sep/sep_crypto.c:	end_time = jiffies + (WAIT_TIME * HZ);
staging/sep/sep_crypto.c:	end_time = jiffies + (WAIT_TIME * HZ);
staging/sep/sep_crypto.c:	end_time = jiffies + (WAIT_TIME * HZ);
staging/sep/sep_crypto.c:	end_time = jiffies + (WAIT_TIME * HZ);
staging/sep/sep_main.c:	end_time = jiffies + (WAIT_TIME * HZ);
staging/serial/68360serial.c:	info->timeout += HZ/50;		/* Add .02 seconds of slop */
staging/serial/68360serial.c:	info->timeout = (TX_BUF_SIZE*HZ*bits);
staging/serial/68360serial.c:		state->close_delay = 5*HZ/10;
staging/serial/68360serial.c:		state->closing_wait = 30*HZ;
staging/serqt_usb2/serqt_usb2.c:	int timeout = HZ / 10;
staging/slicoss/slicoss.c:	adapter->pingtimer.expires = jiffies + (PING_TIMER_INTERVAL * HZ);
staging/slicoss/slicoss.c:	card->loadtimer.expires = jiffies + (SLIC_LOADTIMER_PERIOD * HZ);
staging/slicoss/slicoss.c:		    jiffies + (PING_TIMER_INTERVAL * HZ);
staging/slicoss/slicoss.c:		    jiffies + (SLIC_LOADTIMER_PERIOD * HZ);
staging/telephony/ixj.c:		case IXJCTL_HZ:
staging/telephony/ixj.c:	case IXJCTL_HZ:
staging/telephony/ixj.c:static int hertz = HZ;
staging/tidspbridge/core/tiomap3430.c:			dev_dbg(bridge, "%s: DSP clock rate (KHZ): 0x%x \n",
staging/vt6655/baseband.c:        else {//11g, 2.4GHZ
staging/vt6655/baseband.c:        else {//11g, 2.4GHZ
staging/vt6655/baseband.c:        else {//11g, 2.4GHZ
staging/vt6655/baseband.c:        else {//11g, 2.4GHZ
staging/vt6655/baseband.c:        else {//11g, 2.4GHZ
staging/vt6655/baseband.c:        else {//11g, 2.4GHZ
staging/vt6655/baseband.c:        else {//11g, 2.4GHZ
staging/vt6655/baseband.c:        else {//11g, 2.4GHZ
staging/vt6655/baseband.c:        else {//11g, 2.4GHZ
staging/vt6655/baseband.c:        if (byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6655/baseband.c:        if (byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6655/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6655/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6655/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6655/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6655/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6655/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6655/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6655/baseband.c:                pDevice->TimerSQ3Tmax1.expires =  RUN_AT(pDevice->byTMax * HZ);
staging/vt6655/baseband.c:                pDevice->TimerSQ3Tmax2.expires =  RUN_AT(pDevice->byTMax2 * HZ);
staging/vt6655/baseband.c:            pDevice->TimerSQ3Tmax2.expires =  RUN_AT(pDevice->byTMax2 * HZ);
staging/vt6655/baseband.c:        pDevice->TimerSQ3Tmax2.expires =  RUN_AT(pDevice->byTMax2 * HZ);
staging/vt6655/baseband.c:    pDevice->TimerSQ3Tmax2.expires =  RUN_AT(pDevice->byTMax2 * HZ);
staging/vt6655/baseband.c:                pDevice->TimerSQ3Tmax3.expires =  RUN_AT(pDevice->byTMax3 * HZ);
staging/vt6655/baseband.c:                pDevice->TimerSQ3Tmax3.expires =  RUN_AT(pDevice->byTMax3 * HZ);
staging/vt6655/baseband.c:            pDevice->TimerSQ3Tmax3.expires =  RUN_AT(pDevice->byTMax3 * HZ);
staging/vt6655/baseband.c:        pDevice->TimerSQ3Tmax3.expires =  RUN_AT(pDevice->byTMax3 * HZ);
staging/vt6655/baseband.c:    pDevice->TimerSQ3Tmax3.expires =  RUN_AT(pDevice->byTMax3 * HZ);
staging/vt6655/bssdb.c:    pMgmt->sTimerSecondCallback.expires = RUN_AT(HZ);
staging/vt6655/card.c:        if (ePHYType == PHY_TYPE_11A) {//5GHZ
staging/vt6655/card.c:        if (ePHYType == PHY_TYPE_11A) {//5GHZ
staging/vt6655/card.c:        if (ePHYType == PHY_TYPE_11A) {//5GHZ
staging/vt6655/card.c:        if (ePHYType == PHY_TYPE_11A) {//5GHZ
staging/vt6655/card.c:        if (ePHYType == PHY_TYPE_11A) {//5GHZ
staging/vt6655/card.c:        if (ePHYType == PHY_TYPE_11A) {//5GHZ
staging/vt6655/card.c:        if (ePHYType == PHY_TYPE_11A) {//5GHZ
staging/vt6655/card.c:        if (ePHYType == PHY_TYPE_11A) {//5GHZ
staging/vt6655/device_main.c:    pDevice->TimerSQ3Tmax1.expires = RUN_AT(HZ);
staging/vt6655/device_main.c:    pDevice->TimerSQ3Tmax2.expires = RUN_AT(HZ);
staging/vt6655/device_main.c:    pDevice->TimerSQ3Tmax3.expires = RUN_AT(HZ);
staging/vt6655/device_main.c:                 schedule_timeout (HZ/20);          //wait 50ms
staging/vt6655/device_main.c:              //    wait_event_timeout(Set_wait, ((pDevice->wpadev==NULL)&&(pDevice->skb == NULL)),5*HZ);    //1s wait
staging/vt6655/hostap.c:	        (jiffies - pMgmt->sNodeDBTable[uNodeIndex].ulLastRxJiffer) / HZ;
staging/vt6655/rxtx.c://byFreqType: 0=>5GHZ 1=>2.4GHZ
staging/vt6655/rxtx.c://byFreqType: 0=>5GHZ 1=>2.4GHZ
staging/vt6655/rxtx.c:    else if (byRTSRsvType == 1){ //RTSTxRrvTime_ba, only in 2.4GHZ
staging/vt6655/rxtx.c:    else if (byRTSRsvType == 3) { //CTSTxRrvTime_ba, only in 2.4GHZ
staging/vt6655/wcmd.c:    pDevice->sTimerCommand.expires = RUN_AT(HZ);
staging/vt6655/wcmd.c:    pDevice->sTimerCommand.expires = (unsigned int)RUN_AT((MSecond * HZ) >> 10);
staging/vt6655/wcmd.c:                      pDevice->sTimerTxData.expires = RUN_AT(10*HZ);      //10s callback
staging/vt6655/wcmd.c:     pDevice->sTimerTxData.expires = RUN_AT(10*HZ);      //10s callback
staging/vt6655/wcmd.c:  pDevice->sTimerTxData.expires = RUN_AT(10*HZ);      //10s callback
staging/vt6655/wcmd.c:    // RUN_AT :1 msec ~= (HZ/1024)
staging/vt6655/wmgr.c:    pDevice->sTimerCommand.expires = RUN_AT(HZ);
staging/vt6655/wmgr.c:    pDevice->sTimerTxData.expires = RUN_AT(10*HZ);      //10s callback
staging/vt6655/wmgr.c:    pMgmt->sTimerSecondCallback.expires = RUN_AT(HZ);
staging/vt6656/baseband.c:        else {//11g, 2.4GHZ
staging/vt6656/baseband.c:        else {//11g, 2.4GHZ
staging/vt6656/baseband.c:        else {//11g, 2.4GHZ
staging/vt6656/baseband.c:        else {//11g, 2.4GHZ
staging/vt6656/baseband.c:        else {//11g, 2.4GHZ
staging/vt6656/baseband.c:        else {//11g, 2.4GHZ
staging/vt6656/baseband.c:        else {//11g, 2.4GHZ
staging/vt6656/baseband.c:        else {//11g, 2.4GHZ
staging/vt6656/baseband.c:        else {//11g, 2.4GHZ
staging/vt6656/baseband.c:        if (byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6656/baseband.c:        if (byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6656/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6656/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6656/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6656/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6656/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6656/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6656/baseband.c:        if(byPacketType == PK_TYPE_11A) {//11a, 5GHZ
staging/vt6656/baseband.c:                pDevice->TimerSQ3Tmax1.expires =  RUN_AT(pDevice->byTMax * HZ);
staging/vt6656/baseband.c:    pDevice->TimerSQ3Tmax1.expires =  RUN_AT(pDevice->byTMax * HZ);
staging/vt6656/baseband.c:                pDevice->TimerSQ3Tmax2.expires =  RUN_AT(pDevice->byTMax2 * HZ);
staging/vt6656/baseband.c:    pDevice->TimerSQ3Tmax2.expires =  RUN_AT(pDevice->byTMax2 * HZ);
staging/vt6656/baseband.c:                pDevice->TimerSQ3Tmax3.expires =  RUN_AT(pDevice->byTMax3 * HZ);
staging/vt6656/baseband.c:                pDevice->TimerSQ3Tmax3.expires =  RUN_AT(pDevice->byTMax3 * HZ);
staging/vt6656/baseband.c:        pDevice->TimerSQ3Tmax3.expires =  RUN_AT(pDevice->byTMax3 * HZ);
staging/vt6656/baseband.c:    pDevice->TimerSQ3Tmax3.expires =  RUN_AT(pDevice->byTMax3 * HZ);
staging/vt6656/bssdb.c:    pMgmt->sTimerSecondCallback.expires = RUN_AT(HZ);
staging/vt6656/card.c:        if (byBBType == BB_TYPE_11A) {//5GHZ
staging/vt6656/card.c:        if (byBBType == BB_TYPE_11A) {//5GHZ
staging/vt6656/card.c:        if (byBBType == BB_TYPE_11A) {//5GHZ
staging/vt6656/card.c:        if (byBBType == BB_TYPE_11A) {//5GHZ
staging/vt6656/card.c:        if (byBBType == BB_TYPE_11A) {//5GHZ
staging/vt6656/card.c:        if (byBBType == BB_TYPE_11A) {//5GHZ
staging/vt6656/card.c:        if (byBBType == BB_TYPE_11A) {//5GHZ
staging/vt6656/card.c:        if (byBBType == BB_TYPE_11A) {//5GHZ
staging/vt6656/hostap.c:	        (jiffies - pMgmt->sNodeDBTable[uNodeIndex].ulLastRxJiffer) / HZ;
staging/vt6656/main_usb.c:    pDevice->TimerSQ3Tmax1.expires = RUN_AT(HZ);
staging/vt6656/main_usb.c:    pDevice->TimerSQ3Tmax2.expires = RUN_AT(HZ);
staging/vt6656/main_usb.c:    pDevice->TimerSQ3Tmax3.expires = RUN_AT(HZ);
staging/vt6656/main_usb.c:                 schedule_timeout (HZ/20);          //wait 50ms
staging/vt6656/main_usb.c:              //    wait_event_timeout(Set_wait, ((pDevice->wpadev==NULL)&&(pDevice->skb == NULL)),5*HZ);    //1s wait
staging/vt6656/rxtx.c://byFreqType: 0=>5GHZ 1=>2.4GHZ
staging/vt6656/rxtx.c://byFreqType: 0=>5GHZ 1=>2.4GHZ
staging/vt6656/rxtx.c:    else if (byRTSRsvType == 1){ //RTSTxRrvTime_ba, only in 2.4GHZ
staging/vt6656/rxtx.c:    else if (byRTSRsvType == 3) { //CTSTxRrvTime_ba, only in 2.4GHZ
staging/vt6656/usbpipe.c:                            HZ
staging/vt6656/wcmd.c:    pDevice->sTimerCommand.expires = RUN_AT(HZ);
staging/vt6656/wcmd.c:	pDevice->sTimerCommand.expires = RUN_AT((MSecond * HZ) / 1000);
staging/vt6656/wcmd.c:                      pDevice->sTimerTxData.expires = RUN_AT(10*HZ);      //10s callback
staging/vt6656/wcmd.c:     pDevice->sTimerTxData.expires = RUN_AT(10*HZ);      //10s callback
staging/vt6656/wcmd.c:  pDevice->sTimerTxData.expires = RUN_AT(10*HZ);      //10s callback
staging/vt6656/wmgr.c:    pDevice->sTimerCommand.expires = RUN_AT(HZ);
staging/vt6656/wmgr.c:    pDevice->sTimerTxData.expires = RUN_AT(10*HZ);      //10s callback
staging/vt6656/wmgr.c:    pMgmt->sTimerSecondCallback.expires = RUN_AT(HZ);
staging/winbond/wb35reg.c:			       0x0, RegisterNo, pltmp, 4, HZ * 100);
staging/winbond/wb35reg.c:			       0x0, RegisterNo, &RegisterValue, 4, HZ * 100);
staging/winbond/wbusb.c:			     0x0, 0x400, &ltmp, 4, HZ * 100);
staging/winbond/wbusb.c:	dev->wiphy->bands[IEEE80211_BAND_2GHZ] = &wbsoft_band_2GHz;
staging/wlags49_h2/hcfcfg.h:#define CFG_SCAN_CHANNELS_2GHZ 0xFCC2
staging/wlags49_h2/hcfcfg.h:#endif /* CFG_SCAN_CHANNELS_2GHZ */
staging/wlags49_h2/hcfcfg.h:#ifndef CFG_SCAN_CHANNELS_2GHZ
staging/wlags49_h2/wl_if.h:#define TX_TIMEOUT                  ((800 * HZ) / 1000)
staging/wlags49_h2/wl_internal.h:#define PARM_BRSC_2GHZ                          BRSC2GHz
staging/wlags49_h2/wl_internal.h:#define PARM_BRSC_5GHZ                          BRSC5GHz
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_BRSC_2GHZ                  0x000F
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_BRSC_5GHZ                  0x0150
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_MULTICAST_RATE_2GHZ        0x0002
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_MULTICAST_RATE_2GHZ        0x0004
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_MULTICAST_RATE_5GHZ        0x0000
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_MULTICAST_RATE_5GHZ        0x0010
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_PROBE_DATA_RATES_2GHZ      0x0002
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_PROBE_DATA_RATES_5GHZ      0x0010
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_SRSC_2GHZ                  0x0FFF
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_SRSC_5GHZ                  0x0FF0
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_TX_RATE_2GHZ               0x0003
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_TX_RATE_2GHZ               0x0FFF
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_TX_RATE_5GHZ               0x0000
staging/wlags49_h2/wl_internal.h:#define PARM_DEFAULT_TX_RATE_5GHZ               0x0FF0
staging/wlags49_h2/wl_internal.h:#define PARM_NAME_BRSC_2GHZ                     TEXT("BRSC2GHz")
staging/wlags49_h2/wl_internal.h:#define PARM_NAME_BRSC_5GHZ                     TEXT("BRSC5GHz")
staging/wlags49_h2/wl_internal.h:#define PARM_NAME_SRSC_2GHZ                     TEXT("SRSC2GHz")
staging/wlags49_h2/wl_internal.h:#define PARM_NAME_SRSC_5GHZ                     TEXT("SRSC5GHz")
staging/wlags49_h2/wl_internal.h:#define PARM_SRSC_2GHZ                          SRSC2GHz
staging/wlags49_h2/wl_internal.h:#define PARM_SRSC_5GHZ                          SRSC5GHz
staging/wlags49_h2/wl_main.c:	lp->brsc[0] = PARM_BRSC_2GHZ;
staging/wlags49_h2/wl_main.c:	lp->brsc[1] = PARM_BRSC_5GHZ;
staging/wlags49_h2/wl_main.c:	lp->MulticastRate[0]    = PARM_DEFAULT_MULTICAST_RATE_2GHZ;
staging/wlags49_h2/wl_main.c:	lp->MulticastRate[1]    = PARM_DEFAULT_MULTICAST_RATE_5GHZ;
staging/wlags49_h2/wl_main.c:	lp->srsc[0] = PARM_SRSC_2GHZ;
staging/wlags49_h2/wl_main.c:	lp->srsc[1] = PARM_SRSC_5GHZ;
staging/wlags49_h2/wl_main.c:		lp->timer_oor.expires = RUN_AT( 3 * HZ );
staging/wlags49_h2/wl_main.c:	lp->timer_oor.expires = RUN_AT( (lp->timer_oor_cnt & ~DS_OOR) * HZ );
staging/wlags49_h2/wl_main.c:	lp->TxRateControl[0]    = PARM_DEFAULT_TX_RATE_2GHZ;
staging/wlags49_h2/wl_main.c:	lp->TxRateControl[1]    = PARM_DEFAULT_TX_RATE_5GHZ;
staging/wlags49_h2/wl_main.c:MODULE_PARM_DESC(PARM_BRSC_2GHZ,                "Basic Rate Set Control 2.4 GHz");
staging/wlags49_h2/wl_main.c:MODULE_PARM_DESC(PARM_BRSC_5GHZ,                "Basic Rate Set Control 5.0 GHz");
staging/wlags49_h2/wl_main.c:MODULE_PARM_DESC(PARM_SRSC_2GHZ,                "Supported Rate Set Control 2.4 GHz");
staging/wlags49_h2/wl_main.c:MODULE_PARM_DESC(PARM_SRSC_5GHZ,                "Supported Rate Set Control 5.0 GHz");
staging/wlags49_h2/wl_main.c:MODULE_PARM(PARM_BRSC_2GHZ,             "b");
staging/wlags49_h2/wl_main.c:MODULE_PARM(PARM_BRSC_5GHZ,             "b");
staging/wlags49_h2/wl_main.c:MODULE_PARM(PARM_SRSC_2GHZ,             "b");
staging/wlags49_h2/wl_main.c:MODULE_PARM(PARM_SRSC_5GHZ,             "b");
staging/wlags49_h2/wl_main.c:static p_u16    PARM_BRSC_2GHZ             	= PARM_DEFAULT_BRSC_2GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_BRSC_5GHZ             	= PARM_DEFAULT_BRSC_5GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_MULTICAST_RATE        	= PARM_DEFAULT_MULTICAST_RATE_2GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_SRSC_2GHZ             	= PARM_DEFAULT_SRSC_2GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_SRSC_5GHZ             	= PARM_DEFAULT_SRSC_5GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_TX_RATE1              	= PARM_DEFAULT_TX_RATE_2GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_TX_RATE2              	= PARM_DEFAULT_TX_RATE_2GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_TX_RATE3              	= PARM_DEFAULT_TX_RATE_2GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_TX_RATE4              	= PARM_DEFAULT_TX_RATE_2GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_TX_RATE5              	= PARM_DEFAULT_TX_RATE_2GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_TX_RATE6              	= PARM_DEFAULT_TX_RATE_2GHZ;
staging/wlags49_h2/wl_main.c:static p_u16    PARM_TX_RATE               	= PARM_DEFAULT_TX_RATE_2GHZ;
staging/wlags49_h2/wl_profile.c:		DBG_TRACE(DbgInfo, "%s, value: %s\n", PARM_NAME_BRSC_2GHZ, value);
staging/wlags49_h2/wl_profile.c:		DBG_TRACE(DbgInfo, "%s, value: %s\n", PARM_NAME_BRSC_5GHZ, value);
staging/wlags49_h2/wl_profile.c:		DBG_TRACE(DbgInfo, "%s, value: %s\n", PARM_NAME_SRSC_2GHZ, value);
staging/wlags49_h2/wl_profile.c:		DBG_TRACE(DbgInfo, "%s, value: %s\n", PARM_NAME_SRSC_5GHZ, value);
staging/wlags49_h2/wl_profile.c:			DBG_WARNING(DbgInfo, "%s invaid; will be ignored\n", PARM_NAME_BRSC_2GHZ);
staging/wlags49_h2/wl_profile.c:			DBG_WARNING(DbgInfo, "%s invaid; will be ignored\n", PARM_NAME_BRSC_5GHZ);
staging/wlags49_h2/wl_profile.c:			DBG_WARNING(DbgInfo, "%s invaid; will be ignored\n", PARM_NAME_SRSC_2GHZ);
staging/wlags49_h2/wl_profile.c:			DBG_WARNING(DbgInfo, "%s invaid; will be ignored\n", PARM_NAME_SRSC_5GHZ);
staging/wlags49_h2/wl_profile.c:	} else if (strcmp(key, PARM_NAME_BRSC_2GHZ) == 0) {
staging/wlags49_h2/wl_profile.c:	} else if (strcmp(key, PARM_NAME_BRSC_5GHZ) == 0) {
staging/wlags49_h2/wl_profile.c:	} else if (strcmp(key, PARM_NAME_SRSC_2GHZ) == 0) {
staging/wlags49_h2/wl_profile.c:	} else if (strcmp(key, PARM_NAME_SRSC_5GHZ) == 0) {
staging/wlags49_h2/wl_wext.c:	DBG_TRACE( DbgInfo, "CFG_SCAN_CHANNELS_2GHZ result: 0x%x\n", ret );
staging/wlags49_h2/wl_wext.c:	lp->ltvRecord.typ       = CFG_SCAN_CHANNELS_2GHZ;
staging/wlan-ng/cfg80211.c:	priv->band.band = IEEE80211_BAND_2GHZ;
staging/wlan-ng/cfg80211.c:	wiphy->bands[IEEE80211_BAND_2GHZ] = &priv->band;
staging/wlan-ng/hfa384x_usb.c:#define THROTTLE_JIFFIES	(HZ/8)
staging/wlan-ng/hfa384x_usb.c:			hw->reqtimer.expires = jiffies + HZ;
staging/wlan-ng/hfa384x_usb.c:			hw->resptimer.expires = jiffies + 2 * HZ;
staging/wlan-ng/prism2mgmt.c:	/* Figure out our timeout first Kus, then HZ */
staging/wlan-ng/prism2mgmt.c:	timeout = (timeout * HZ) / 1000;
staging/wlan-ng/prism2sta.c:	mod_timer(&hw->commsqual_timer, jiffies + HZ);
staging/xgifb/vb_init.c:	 * Modify SR32 value, when MCLK=207MHZ, ELCK=250MHz,
staging/zcache/ramster/ramster.c:/* In HZ, controls frequency of worker invocation. */
staging/zcache/ramster/ramster.c:	ramster_remotify_queue_delayed_work(HZ);
staging/zcache/ramster/ramster.c:	ramster_remotify_queue_delayed_work(n * HZ);
staging/zcache/ramster/ramster.c:					selfshrink_interval * HZ);
staging/zcache/ramster/ramster.c:			selfshrink_interval * HZ);
switch/hds_fsa8008.c:#define FSA8008_WAKELOCK_TIMEOUT	(2*HZ)
target/iscsi/iscsi_target.c:					ISCSI_RX_THREAD_TCP_TIMEOUT * HZ);
target/iscsi/iscsi_target.c:					ISCSI_TX_THREAD_TCP_TIMEOUT * HZ);
target/iscsi/iscsi_target.c:						SECONDS_FOR_LOGOUT_COMP * HZ);
target/iscsi/iscsi_target_erl0.c:		(get_jiffies_64() + sess->sess_ops->DefaultTime2Retain * HZ);
target/iscsi/iscsi_target_erl1.c:	cmd->dataout_timer.expires = (get_jiffies_64() + na->dataout_timeout * HZ);
target/iscsi/iscsi_target_erl1.c:		(get_jiffies_64() + na->dataout_timeout * HZ));
target/iscsi/iscsi_target_login.c:	np->np_login_timer.expires = (get_jiffies_64() + TA_LOGIN_TIMEOUT * HZ);
target/iscsi/iscsi_target_stat.c:#define INITIAL_JIFFIES ((unsigned long)(unsigned int) (-300*HZ))
target/iscsi/iscsi_target_stat.c:				INITIAL_JIFFIES) * 100 / HZ) : 0;
target/iscsi/iscsi_target_tq.c:		wait_for_completion_timeout(&comp, 1 * HZ);
target/iscsi/iscsi_target_util.c:	conn->nopin_timer.expires = (get_jiffies_64() + na->nopin_timeout * HZ);
target/iscsi/iscsi_target_util.c:	conn->nopin_timer.expires = (get_jiffies_64() + na->nopin_timeout * HZ);
target/iscsi/iscsi_target_util.c:		(get_jiffies_64() + na->nopin_response_timeout * HZ);
target/iscsi/iscsi_target_util.c:		(get_jiffies_64() + na->nopin_response_timeout * HZ));
target/target_core_pscsi.c:			HZ, 1, NULL);
target/target_core_pscsi.c:			      INQUIRY_VPD_SERIAL_LEN, NULL, HZ, 1, NULL);
target/target_core_pscsi.c:			      NULL, HZ, 1, NULL);
target/target_core_pscsi.h:#define PS_TIMEOUT_DISK		(15*HZ)
target/target_core_pscsi.h:#define PS_TIMEOUT_OTHER	(500*HZ)
target/target_core_stat.c:#define INITIAL_JIFFIES ((unsigned long)(unsigned int) (-300*HZ))
target/target_core_stat.c:				INITIAL_JIFFIES) * 100 / HZ));
target/target_core_stat.c:				INITIAL_JIFFIES) * 100 / HZ));
thermal/msm_thermal.c:        schedule_delayed_work(&temp_log_work,HZ*2);
thermal/msm_thermal.c:    schedule_delayed_work(&temp_log_work, HZ*5);
tty/amiserial.c:	char_time = (info->timeout - HZ/50) / info->xmit_fifo_size;
tty/amiserial.c:	info->timeout += HZ/50;		/* Add .02 seconds of slop */
tty/amiserial.c:	info->timeout = ((info->xmit_fifo_size*HZ*bits*quot) / baud_base);
tty/amiserial.c:	port->close_delay = new_serial.close_delay * HZ/100;
tty/amiserial.c:	port->closing_wait = new_serial.closing_wait * HZ/100;
tty/bfin_jtag_comm.c:				schedule_timeout_interruptible(HZ);
tty/cyclades.c:	char_time = (info->timeout - HZ / 50) / info->xmit_fifo_size;
tty/cyclades.c:		cyz_polling_cycle = (arg * HZ) / 1000;
tty/cyclades.c:					HZ, info->idle_stats.overruns,
tty/cyclades.c:					HZ, info->idle_stats.recv_bytes,
tty/cyclades.c:					HZ, info->idle_stats.xmit_bytes,
tty/cyclades.c:		info->port.close_delay = 5 * HZ / 10;
tty/cyclades.c:	info->port.close_delay = new_serial.close_delay * HZ / 100;
tty/cyclades.c:	info->port.closing_wait = new_serial.closing_wait * HZ / 100;
tty/cyclades.c:		info->port.closing_wait = (unsigned short)arg * HZ / 100;
tty/cyclades.c:			info->timeout = (info->xmit_fifo_size * HZ * 15 /
tty/cyclades.c:			info->timeout = (info->xmit_fifo_size * HZ * 15 /
tty/cyclades.c:			info->timeout = (info->xmit_fifo_size * HZ * 15 /
tty/cyclades.c:			info->timeout = (info->xmit_fifo_size * HZ * 15 /
tty/cyclades.c:			info->timeout = (info->xmit_fifo_size * HZ * 30 / 269) +
tty/cyclades.c:			info->timeout = (info->xmit_fifo_size * HZ * 30 / 269) +
tty/cyclades.c:		ret_val = (cyz_polling_cycle * 1000) / HZ;
tty/cyclades.c:		ret_val = info->port.closing_wait / (HZ / 100);
tty/cyclades.c:	unsigned long expires = jiffies + HZ;
tty/hvc/hvc_console.c:#define HVC_CLOSE_WAIT (HZ/100) /* 1/10 of a second */
tty/hvc/hvc_iucv.c:#define QUEUE_SNDBUF_DELAY	(HZ / 25)
tty/hvc/hvc_iucv.c:				   tty_outqueue_empty(priv), HZ/10);
tty/hvc/hvcs.c:#define HVCS_CLOSE_WAIT (HZ/100) /* 1/10 of a second */
tty/hvc/hvsi.c:#define HVSI_TIMEOUT (5*HZ)
tty/hvc/hvsi.c:		schedule_delayed_work(&hp->writer, HZ);
tty/ipwireless/hardware.c:	if (since >= HZ) {
tty/isicom.c:			port->port.close_delay = 50 * HZ/100;
tty/isicom.c:			port->port.closing_wait = 3000 * HZ/100;
tty/moxa.c:		info->port.close_delay = new_serial.close_delay * HZ / 100;
tty/moxa.c:		mod_timer(&moxaTimer, jiffies + HZ / 50);
tty/moxa.c:		mod_timer(&moxaTimer, jiffies + HZ / 50);
tty/moxa.c:static unsigned int moxaFuncTout = HZ / 2;
tty/mxser.c:	char_time = (info->timeout - HZ / 50) / info->xmit_fifo_size;
tty/mxser.c:		info->port.close_delay = 5 * HZ / 10;
tty/mxser.c:		info->port.closing_wait = 30 * HZ;
tty/mxser.c:	info->timeout += HZ / 50;	/* Add .02 seconds of slop */
tty/mxser.c:	info->timeout = ((info->xmit_fifo_size * HZ * 10 * quot) / info->baud_base);
tty/mxser.c:		port->close_delay = new_serial.close_delay * HZ / 100;
tty/mxser.c:		port->closing_wait = new_serial.closing_wait * HZ / 100;
tty/mxser.c:	timeout = jiffies + HZ;
tty/n_gsm.c:#define	GSM_NET_TX_TIMEOUT (HZ*10)
tty/n_gsm.c:			mod_timer(&dlci->t1, jiffies + gsm->t1 * HZ / 100);
tty/n_gsm.c:			mod_timer(&dlci->t1, jiffies + gsm->t1 * HZ / 100);
tty/n_gsm.c:	mod_timer(&dlci->t1, jiffies + gsm->t1 * HZ / 100);
tty/n_gsm.c:	mod_timer(&dlci->t1, jiffies + gsm->t1 * HZ / 100);
tty/n_gsm.c:		mod_timer(&gsm->t2_timer, jiffies + gsm->t2 * HZ / 100);
tty/n_gsm.c:	mod_timer(&gsm->t2_timer, jiffies + gsm->t2 * HZ / 100);
tty/n_tty.c:	if (time_before(tty->overrun_time, jiffies - HZ) ||
tty/n_tty.c:		time = (HZ / 10) * TIME_CHAR(tty);
tty/rocket.c:			check_time = (HZ / info->cps) / 5;
tty/rocket.c:			check_time = HZ * txcnt / info->cps;
tty/rocket.c:#define POLL_PERIOD HZ/100	/*  Polling period .01 seconds (10ms) */
tty/rocket.c:                      FREQ_137HZ - 137 Hertz
tty/rocket.c:                      FREQ_137HZ - 137 Hertz
tty/rocket.c:                      FREQ_17HZ - 17 Hertz
tty/rocket.c:                      FREQ_17HZ - 17 Hertz
tty/rocket.c:                      FREQ_34HZ - 34 Hertz
tty/rocket.c:                      FREQ_34HZ - 34 Hertz
tty/rocket.c:                      FREQ_4HZ - 4 Hertz
tty/rocket.c:                      FREQ_4HZ - 4 Hertz
tty/rocket.c:                      FREQ_69HZ - 69 Hertz
tty/rocket.c:                      FREQ_69HZ - 69 Hertz
tty/rocket.c:                      FREQ_9HZ - 9 Hertz
tty/rocket.c:                      FREQ_9HZ - 9 Hertz
tty/rocket.c: *  The top level polling routine.  Repeats every 1/100 HZ (10ms).
tty/rocket.c:	timeout = (sGetTxCnt(cp) + 1) * HZ / info->cps;
tty/rocket_int.h:#define FREQ_137HZ 0x50
tty/rocket_int.h:#define FREQ_17HZ  0x20
tty/rocket_int.h:#define FREQ_274HZ 0x60
tty/rocket_int.h:#define FREQ_34HZ  0x30
tty/rocket_int.h:#define FREQ_69HZ  0x40
tty/rocket_int.h:#define FREQ_9HZ   0x10
tty/serial/8250/8250.c:		jiffies + uart_poll_timeout(&up->port) + HZ / 5);
tty/serial/8250/8250.c:			uart_poll_timeout(port) + HZ / 5);
tty/serial/8250/8250_pci.c:		PCI_SUBDEVICE_ID_CONNECT_TECH_BH2_20MHZ, 0, 0,
tty/serial/bfin_uart.c:#define DMA_RX_FLUSH_JIFFIES	(HZ / 50)
tty/serial/crisv10.c:			  (curr_time - info->last_rx_active) * (1000000/HZ) +
tty/serial/crisv10.c:			(curr_time - info->last_tx_active) * (1000000/HZ) +
tty/serial/crisv10.c:		(curr_time - info->last_tx_active) * (1000000/HZ) +
tty/serial/crisv10.c:		(curr_time - info->last_tx_active) * 1000000/HZ +
tty/serial/crisv10.c:		info->close_delay = 5*HZ/10;
tty/serial/crisv10.c:		info->closing_wait = 30*HZ;
tty/serial/crisv10.c:		rs_wait_until_sent(tty, HZ);
tty/serial/ifx6x60.c:				jiffies + IFX_SPI_TIMEOUT_SEC*HZ;
tty/serial/ifx6x60.h:#define IFX_SPI_STATUS_TIMEOUT		(2000*HZ)
tty/serial/imx.c:#define MCTRL_TIMEOUT	(250*HZ/1000)
tty/serial/ioc3_serial.c:	 * again timeout * SRTR_HZ / HZ
tty/serial/ioc3_serial.c:#define TX_LOWAT_CHARS(baud) (baud / 10 / TX_LOWAT_HZ)
tty/serial/ioc3_serial.c:#define TX_LOWAT_HZ          (1000000 / TX_LOWAT_LATENCY)
tty/serial/ioc3_serial.c:	 * So .... timeout * baud / 10 / HZ / 4, with HZ = 100.
tty/serial/ioc3_serial.c:	timeout = timeout * SRTR_HZ / 100;
tty/serial/ioc3_serial.c:	writel(SRTR_HZ / 100, &port->ip_serial_regs->srtr);
tty/serial/ioc4_serial.c:	 * again timeout * IOC4_SRTR_HZ / HZ
tty/serial/ioc4_serial.c:#define IOC4_SRTR_HZ                 16000	/* SRTR clock frequency */
tty/serial/ioc4_serial.c:#define TX_LOWAT_CHARS(baud) (baud / 10 / TX_LOWAT_HZ)
tty/serial/ioc4_serial.c:#define TX_LOWAT_HZ          (1000000 / TX_LOWAT_LATENCY)
tty/serial/ioc4_serial.c:	 * So .... timeout * baud / 10 / HZ / 4, with HZ = 100.
tty/serial/ioc4_serial.c:	the_port->timeout += HZ / 50;	/* Add .02 seconds of slop */
tty/serial/ioc4_serial.c:	the_port->timeout = ((the_port->fifosize * HZ * bits) / (baud / 10));
tty/serial/ioc4_serial.c:	timeout = timeout * IOC4_SRTR_HZ / 100;
tty/serial/ioc4_serial.c:	writel(IOC4_SRTR_HZ / 100, &port->ip_serial_regs->srtr);
tty/serial/max3100.c:	max3100s[i]->poll_time = pdata->poll_time * HZ / 1000;
tty/serial/mrst_max3110.c:	/* First calc the div for 1.8MHZ clock case */
tty/serial/mrst_max3110.c:		schedule_timeout(HZ / 20);
tty/serial/mrst_max3110.h:#define MAX3110_HIGH_CLK	0x1	/* 3.6864 MHZ */
tty/serial/mrst_max3110.h:#define MAX3110_LOW_CLK		0x0	/* 1.8432 MHZ */
tty/serial/msm_serial_hs.c:	wake_lock_timeout(&msm_uport->rx.wake_lock, HZ / 2);
tty/serial/msm_serial_hs_lite.c:	const unsigned long WAKE_LOCK_EXPIRE_TIME = HZ;
tty/serial/mux.c:#define MUX_POLL_DELAY (30 * HZ / 1000)
tty/serial/mux.c:		port->timeout   = HZ / 50;
tty/serial/pmac_zilog.c:			uap->port.sysrq = jiffies + HZ*5;
tty/serial/pnx8xxx_uart.c:#define MCTRL_TIMEOUT	(250*HZ/1000)
tty/serial/sa1100.c:#define MCTRL_TIMEOUT	(250*HZ/1000)
tty/serial/serial_core.c:	char_time = (port->timeout - HZ/50) / port->fifosize;
tty/serial/serial_core.c:		port->close_delay     = HZ / 2;	/* .5 seconds */
tty/serial/serial_core.c:		port->closing_wait    = 30 * HZ;/* 30 seconds */
tty/serial/serial_core.c:	port->timeout = (HZ * bits) / baud + HZ/50;
tty/serial/sh-sci.c:#define SCI_BREAK_JIFFIES (HZ/20)
tty/serial/sh-sci.c:			s->rx_timeout * 1000 / HZ, port->timeout);
tty/serial/sh-sci.c:		s->rx_timeout = (port->timeout - HZ / 50) * s->buf_len_rx * 3 /
tty/serial/sn_console.c:		/* 960cps / 16 char FIFO = 60HZ
tty/serial/sn_console.c:		 * HZ / (SN_SAL_FIFO_SPEED_CPS / SN_SAL_FIFO_DEPTH) */
tty/serial/sn_console.c:		    HZ * SN_SAL_UART_FIFO_DEPTH / SN_SAL_UART_FIFO_SPEED_CPS;
tty/serial/sn_console.c:                        unsigned long sysrq_timeout = sysrq_requested + HZ*5;
tty/smux_ctl.c:	unsigned wait_time = DEFAULT_OPEN_TIMEOUT * HZ;
tty/smux_ctl.c:			wait_time = devp->open_timeout_val * HZ;
tty/smux_test.c:					&cb_data.cb_completion, 10*HZ),
tty/smux_test.c:				&cb_data.cb_completion, 1*HZ),
tty/smux_test.c:					&cb_data.cb_completion, 2*HZ),
tty/smux_test.c:					&cb_data.cb_completion, 2*HZ),
tty/smux_test.c:					&cb_data.cb_completion, 2*HZ),
tty/smux_test.c:					&cb_data.cb_completion, 2*HZ),
tty/smux_test.c:						&cb_data.cb_completion, HZ),
tty/smux_test.c:						&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:					&cb_data.cb_completion, HZ),
tty/smux_test.c:				&cb_data.cb_completion, HZ),
tty/smux_test.c:				&cb_data.cb_completion, HZ),
tty/smux_test.c:				&cb_data.cb_completion, HZ),
tty/smux_test.c:				&cb_data.cb_completion, HZ),
tty/smux_test.c:				&cb_data.cb_completion, HZ);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:					&cb_data.cb_completion, HZ), >, 0);
tty/smux_test.c:	wait_for_completion_timeout(&cb_data.cb_completion, HZ);
tty/synclink.c:	dev->watchdog_timeo = 10 * HZ;
tty/synclink.c:		info->port.close_delay = 5*HZ/10;
tty/synclink.c:		info->port.closing_wait = 30*HZ;
tty/synclink.c:		info->timeout = (32*HZ*bits_per_char) /
tty/synclink.c:	info->timeout += HZ/50;		/* Add .02 seconds of slop */
tty/synclink_gt.c:	dev->watchdog_timeo = 10 * HZ;
tty/synclink_gt.c:		info->port.close_delay = 5*HZ/10;
tty/synclink_gt.c:		info->port.closing_wait = 30*HZ;
tty/synclink_gt.c:		info->timeout = (32*HZ*bits_per_char) /
tty/synclink_gt.c:	info->timeout += HZ/50;		/* Add .02 seconds of slop */
tty/synclinkmp.c:	dev->watchdog_timeo = 10 * HZ;
tty/synclinkmp.c:		info->port.close_delay = 5*HZ/10;
tty/synclinkmp.c:		info->port.closing_wait = 30*HZ;
tty/synclinkmp.c:		info->timeout = (32*HZ*bits_per_char) /
tty/synclinkmp.c:	info->timeout += HZ/50;		/* Add .02 seconds of slop */
tty/tty_ldisc.c:			long timeout = 3 * HZ;
tty/tty_ldisc.c:	retval = tty_ldisc_wait_idle(tty, 5 * HZ);
tty/tty_port.c:				(HZ * 10 * port->drain_delay) / bps, HZ / 10);
tty/tty_port.c:	port->close_delay = (50 * HZ) / 100;
tty/tty_port.c:	port->closing_wait = (3000 * HZ) / 100;
tty/tty_port.c:			timeout = 2 * HZ;
tty/vt/vt.c:#define DEFAULT_BELL_DURATION	(HZ/8)
tty/vt/vt.c: * Here is the default bell parameters: 750HZ, 1/8th of a second
tty/vt/vt.c:		mod_timer(&console_timer, jiffies + (blankinterval * HZ));
tty/vt/vt.c:		mod_timer(&console_timer, jiffies + (blankinterval * HZ));
tty/vt/vt.c:		mod_timer(&console_timer, jiffies + (blankinterval * HZ));
tty/vt/vt.c:		mod_timer(&console_timer, jiffies + (blankinterval * HZ));
tty/vt/vt.c:					vc->vc_par[1] * HZ / 1000 : 0;
tty/vt/vt.c:			vesa_off_interval = ((vc->vc_par[1] < 60) ? vc->vc_par[1] : 60) * 60 * HZ;
tty/vt/vt_ioctl.c:		ticks = HZ * ((arg >> 16) & 0xffff) / 1000;
usb/atm/cxacru.c:				round_jiffies_relative(POLL_INTERVAL*HZ));
usb/c67x00/c67x00-ll-hpi.c:	res = wait_for_completion_timeout(&dev->hpi.lcp.msg_received, 5 * HZ);
usb/c67x00/c67x00-sched.c:		wait_for_completion_timeout(&c67x00->endpoint_disable, 1 * HZ);
usb/core/hcd.c:	 * exceed that limit if HZ is 100. The math is more clunky than
usb/core/hcd.c:		mod_timer (&hcd->rh_timer, (jiffies/(HZ/4) + 1) * (HZ/4));
usb/core/hcd.c:		mod_timer(&hcd->rh_timer, (jiffies/(HZ/4) + 1) * (HZ/4));
usb/core/hub.c:#define	LED_CYCLE_PERIOD	((2*HZ)/3)
usb/core/usb.c:	unsigned long jiffies_expire = jiffies + HZ;
usb/dwc3/dwc3-msm.c:#define DWC3_CHG_DCD_POLL_TIME		(100 * HZ/1000) /* 100 msec */
usb/dwc3/dwc3-msm.c:#define DWC3_CHG_PRIMARY_DET_TIME	(50 * HZ/1000) /* TVDPSRC_ON */
usb/dwc3/dwc3-msm.c:#define DWC3_CHG_SECONDARY_DET_TIME	(50 * HZ/1000) /* TVDMSRC_ON */
usb/dwc3/dwc3-msm.c:	 * run at 125Mhz in SSUSB mode and >60MHZ for HSUSB mode.
usb/early/ehci-dbgp.c:		schedule_timeout_interruptible(kgdbdbgp_wait_time * HZ);
usb/gadget/amd5536udc.c:					HZ * UDC_POLLSTALL_TIMER_USECONDS
usb/gadget/amd5536udc.c:					HZ * UDC_POLLSTALL_TIMER_USECONDS
usb/gadget/amd5536udc.c:							HZ/UDC_RDE_TIMER_DIV;
usb/gadget/amd5536udc.c:						+ HZ*UDC_RDE_TIMER_SECONDS;
usb/gadget/amd5536udc.c:					jiffies + HZ/UDC_RDE_TIMER_DIV;
usb/gadget/amd5536udc.c:			udc_timer.expires = jiffies + HZ/UDC_RDE_TIMER_DIV;
usb/gadget/amd5536udc.c:			udc_timer.expires = jiffies + HZ*UDC_RDE_TIMER_SECONDS;
usb/gadget/android.c:	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
usb/gadget/dummy_hcd.c:	/* FIXME if HZ != 1000 this will probably misbehave ... */
usb/gadget/f_adb.c:	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
usb/gadget/f_adb.c:	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
usb/gadget/f_diag.c:	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
usb/gadget/f_diag.c:	static DEFINE_RATELIMIT_STATE(rl, 10*HZ, 1);
usb/gadget/m66592-udc.c:		case M66592_PLATDATA_XTAL_12MHZ:
usb/gadget/m66592-udc.c:		case M66592_PLATDATA_XTAL_24MHZ:
usb/gadget/m66592-udc.c:		case M66592_PLATDATA_XTAL_48MHZ:
usb/gadget/net2272.h:#define 		LOCAL_CLOCK_OUTPUT_15MHZ		3
usb/gadget/net2272.h:#define 		LOCAL_CLOCK_OUTPUT_30MHZ		4
usb/gadget/net2272.h:#define 		LOCAL_CLOCK_OUTPUT_3_75MHZ		1
usb/gadget/net2272.h:#define 		LOCAL_CLOCK_OUTPUT_60MHZ		5
usb/gadget/net2272.h:#define 		LOCAL_CLOCK_OUTPUT_7_5MHZ		2
usb/gadget/omap_udc.c:#define PIO_OUT_TIMEOUT	(jiffies + HZ/3)
usb/gadget/pxa25x_udc.h:#define start_watchdog(dev) mod_timer(&dev->timer, jiffies + (HZ/200))
usb/gadget/r8a66597-udc.h:	case R8A66597_PLATDATA_XTAL_12MHZ:
usb/gadget/r8a66597-udc.h:	case R8A66597_PLATDATA_XTAL_24MHZ:
usb/gadget/r8a66597-udc.h:	case R8A66597_PLATDATA_XTAL_48MHZ:
usb/gadget/s3c-hsotg.c:		case 12*MHZ:
usb/gadget/s3c-hsotg.c:		case 24*MHZ:
usb/gadget/s3c-hsotg.c:		case 48*MHZ:
usb/gadget/u_ctrl_hsuart.c:				&port->close_complete, 3 * HZ);
usb/gadget/u_data_hsuart.c:				&port->close_complete, 3 * HZ);
usb/gadget/u_serial.c:					GS_CLOSE_TIMEOUT * HZ);
usb/gadget/zero.c:		mod_timer(&autoresume_timer, jiffies + (HZ * autoresume));
usb/host/ehci-msm72k.c:		wake_lock_timeout(&mhcd->wlock, HZ/2);
usb/host/imx21-hcd.c:	timeout = jiffies + HZ;
usb/host/isp1760-hcd.c:	errata2_timer.expires = jiffies + SLOT_CHECK_PERIOD * HZ / 1000;
usb/host/isp1760-hcd.c:	errata2_timer.expires = jiffies + SLOT_CHECK_PERIOD * HZ / 1000;
usb/host/isp1760-hcd.c:					SLOT_TIMEOUT * HZ / 1000)) {
usb/host/ohci-hcd.c:		mod_timer(&ohci->unlink_watchdog, round_jiffies(jiffies + HZ));
usb/host/ohci-hub.c:	 * 3msec gap between pulses.  scheduler HZ==100 must work;
usb/host/ohci-hub.c:				ohci->next_statechange = jiffies + HZ;
usb/host/ohci-omap.c:			omap_cfg_reg(W4_USB_HIGHZ);
usb/host/ohci-q.c:		mod_timer(&ohci->unlink_watchdog, round_jiffies(jiffies + HZ));
usb/host/oxu210hp.h:#define EHCI_ASYNC_JIFFIES      (HZ/20)		/* async idle timeout */
usb/host/oxu210hp.h:#define EHCI_IAA_JIFFIES	(HZ/100)	/* arbitrary; ~10 msec */
usb/host/oxu210hp.h:#define EHCI_IO_JIFFIES	 	(HZ/10)		/* io watchdog > irq_thresh */
usb/host/oxu210hp.h:#define EHCI_SHRINK_JIFFIES     (HZ/200)	/* async qh unlink delay */
usb/host/pehci/host/pehci.c:					+ ((50 /* msec */  * HZ) / 1000);
usb/host/r8a66597.h:	case R8A66597_PLATDATA_XTAL_12MHZ:
usb/host/r8a66597.h:	case R8A66597_PLATDATA_XTAL_24MHZ:
usb/host/r8a66597.h:	case R8A66597_PLATDATA_XTAL_48MHZ:
usb/host/uhci-hub.c:			uhci->auto_stop_time = jiffies + HZ;
usb/host/xhci.c:		mod_timer(&xhci->event_ring_timer, jiffies + POLL_TIMEOUT * HZ);
usb/host/xhci.c:	xhci->event_ring_timer.expires = jiffies + POLL_TIMEOUT * HZ;
usb/host/xhci.c:			XHCI_STOP_EP_CMD_TIMEOUT * HZ;
usb/host/xhci.h:#define XHCI_CMD_DEFAULT_TIMEOUT	(5 * HZ)
usb/image/mdc800.c:										TO_DOWNLOAD_GET_READY*HZ/1000);
usb/image/mdc800.c:	wait_event_timeout(mdc800->irq_wait, mdc800->irq_woken, msec*HZ/1000);
usb/image/mdc800.c:			wait_event_timeout(mdc800->write_wait, mdc800->written, TO_WRITE_GET_READY*HZ/1000);
usb/misc/adutux.c:#define COMMAND_TIMEOUT	(2*HZ)	/* 60 second timeout for a command */
usb/misc/appledisplay.c:		schedule_delayed_work(&pdata->work, HZ / 8);
usb/misc/iowarrior.c:			       GET_TIMEOUT*HZ);
usb/misc/iowarrior.c:			       size, HZ);
usb/misc/ldusb.c:					 USB_CTRL_SET_TIMEOUT * HZ);
usb/misc/ldusb.c:		wait_event_interruptible_timeout(dev->write_wait, !dev->interrupt_out_busy, 2 * HZ);
usb/misc/legousbtower.c:	dev->packet_timeout_jiffies = packet_timeout * HZ / 1000;
usb/misc/legousbtower.c:			timeout = jiffies + read_timeout * HZ / 1000;
usb/misc/legousbtower.c:		timeout = jiffies + read_timeout * HZ / 1000;
usb/misc/legousbtower.c:		wait_event_interruptible_timeout (dev->write_wait, !dev->interrupt_out_busy, 2 * HZ);
usb/misc/rio500.c:#define NAK_TIMEOUT (HZ)
usb/misc/sisusbvga/sisusb.c:					   5 * HZ,
usb/misc/sisusbvga/sisusb.c:						async ? 0 : 5 * HZ,
usb/misc/sisusbvga/sisusb.c:	int i, timeout = 5 * HZ;
usb/misc/sisusbvga/sisusb.c:	int timeout = 5 * HZ, i = 1;
usb/misc/uss720.c:	if (wait_for_completion_timeout(&rq->compl, HZ)) {
usb/misc/yurex.c:#define YUREX_WRITE_TIMEOUT	(HZ*2)
usb/mon/mon_bin.c: * amount for systems with HZ=250 and incomplete bus saturation.
usb/mon/mon_bin.c: * If HZ is 100, a 480 mbit/s bus drives 614 KB every jiffy. USB has an
usb/musb/am35x.c:			mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/am35x.c:			mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/am35x.c:		mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/blackfin.h:#define TIMER_DELAY	(1 * HZ)
usb/musb/da8xx.c:			mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/da8xx.c:			mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/da8xx.c:			mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/da8xx.c:		mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/davinci.c:			mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/davinci.c:			mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/davinci.c:			mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/davinci.c:		mod_timer(&otg_workaround, jiffies + POLL_SECONDS * HZ);
usb/musb/davinci.c: * of the time (24 MHZ oscillator and PLL off, etc) by setting POWER.D0
usb/musb/musb_gadget.c:			jiffies + msecs_to_jiffies(1 * HZ));
usb/musb/tusb6010.c:			idle_timeout = jiffies + (1 * HZ);
usb/musb/tusb6010.c:				idle_timeout = jiffies + (2 * HZ);
usb/musb/tusb6010.c:			idle_timeout = jiffies + (HZ * 3);
usb/otg/ab8500-usb.c:#define AB8500_V1x_LINK_STAT_WAIT (HZ/10)
usb/otg/isp1301_omap.c:#define	TIMER_JIFFIES	(TIMER_MINUTES * 60 * HZ)
usb/otg/msm72k_otg.c: * implemented. But hrtimers on MSM hardware can give atleast 1/32 KHZ
usb/otg/msm_otg_8930.c:							(1000 * HZ/1000));
usb/otg/msm_otg_8930.c:#define MSM_CHECK_TA_DELAY (5 * HZ)
usb/otg/msm_otg_8930.c:#define MSM_CHG_DCD_POLL_TIME		(50 * HZ/1000) /* 50 msec */
usb/otg/msm_otg_8930.c:#define MSM_CHG_DCD_TIMEOUT		(750 * HZ/1000) /* 750 msec */
usb/otg/msm_otg_8930.c:#define MSM_CHG_PRIMARY_DET_TIME	(50 * HZ/1000) /* TVDPSRC_ON */
usb/otg/msm_otg_8930.c:#define MSM_CHG_SECONDARY_DET_TIME	(50 * HZ/1000) /* TVDMSRC_ON */
usb/otg/msm_otg.c:							(1000 * HZ/1000));
usb/otg/msm_otg.c:#define MSM_CHECK_TA_DELAY (5 * HZ)
usb/otg/msm_otg.c:#define MSM_CHG_DCD_POLL_TIME		(50 * HZ/1000) /* 50 msec */
usb/otg/msm_otg.c:#define MSM_CHG_DCD_TIMEOUT		(750 * HZ/1000) /* 750 msec */
usb/otg/msm_otg.c:#define MSM_CHG_PRIMARY_DET_TIME	(50 * HZ/1000) /* TVDPSRC_ON */
usb/otg/msm_otg.c:#define MSM_CHG_SECONDARY_DET_TIME	(50 * HZ/1000) /* TVDMSRC_ON */
usb/otg/mv_otg.c:		mv_otg_run_state_machine(mvotg, 2 * HZ);
usb/otg/twl4030-usb.c:#define OTHER_IFC_CTRL_HIZ_ULPI_60MHZ_OUT	(1 << 3)
usb/otg/twl4030-usb.c:			timeout = jiffies + HZ;
usb/phy/mv_u3d_phy.c:	val |=  (USB3_PLL_25MHZ << USB3_POWER_PLL_CONTROL_REF_FREF_SEL_SHIFT)
usb/phy/mv_u3d_phy.h:#define USB3_PLL_25MHZ					0x2
usb/phy/mv_u3d_phy.h:#define USB3_PLL_26MHZ					0x5
usb/phy/samsung-usbphy.c:	case 12 * MHZ:
usb/phy/samsung-usbphy.c:	case 24 * MHZ:
usb/phy/samsung-usbphy.c:	case 48 * MHZ:
usb/phy/samsung-usbphy.c:#define MHZ (1000*1000)
usb/phy/samsung-usbphy.c:#ifndef MHZ
usb/serial/digi_acceleport.c:#define DIGI_CLOSE_TIMEOUT		(5*HZ)
usb/serial/digi_acceleport.c:#define DIGI_RETRY_TIMEOUT		(HZ/10)
usb/serial/ftdi_sio.c:	{ USB_DEVICE(FTDI_VID, FTDI_ELV_FHZ1000PC_PID) },
usb/serial/ftdi_sio.c:	{ USB_DEVICE(FTDI_VID, FTDI_ELV_FHZ1300PC_PID) },
usb/serial/ftdi_sio_ids.h:#define FTDI_ELV_FHZ1000PC_PID	0xF06F	/* FHZ 1000 PC */
usb/serial/ftdi_sio_ids.h:#define FTDI_ELV_FHZ1300PC_PID	0xE0E8	/* FHZ 1300 PC */
usb/serial/generic.c:		port->sysrq = jiffies + HZ*5;
usb/serial/io_edgeport.c:#define CHASE_TIMEOUT		(5*HZ)		/* 5 seconds */
usb/serial/io_edgeport.c:#define COMMAND_TIMEOUT		(5*HZ)		/* 5 seconds */
usb/serial/io_edgeport.c:#define OPEN_TIMEOUT		(5*HZ)		/* 5 seconds */
usb/serial/io_edgeport.c:	int timeout = 1*HZ;
usb/serial/io_edgeport.c:	int timeout = HZ/10;
usb/serial/io_edgeport.c:	tmp.close_delay		= 5*HZ;
usb/serial/io_edgeport.c:	tmp.closing_wait	= 30*HZ;
usb/serial/io_ti.c:	chase_port(edge_port, (HZ * closing_wait) / 100, 1);
usb/serial/io_ti.c:		timeout = (HZ * EDGE_CLOSING_WAIT)/100;
usb/serial/io_ti.c:	tmp.close_delay		= 5*HZ;
usb/serial/iuu_phoenix.c:	*actual = (T1FrekvensHZ / (256 - T1reload)) / 2;
usb/serial/iuu_phoenix.c:		T1FrekvensHZ = 2000000;
usb/serial/iuu_phoenix.c:		T1FrekvensHZ = 24000000;
usb/serial/iuu_phoenix.c:		T1FrekvensHZ = 500000;
usb/serial/iuu_phoenix.c:		T1FrekvensHZ = 6000000;
usb/serial/iuu_phoenix.c:	T1reload = 256 - (u8) (T1FrekvensHZ / (baud * 2));
usb/serial/iuu_phoenix.c:	unsigned int T1FrekvensHZ = 0;
usb/serial/keyspan.c:					p_priv->tx_start_time[flip] + 10 * HZ))
usb/serial/keyspan_pda.c:	   ought to translate into a break_ctl(-1),break_ctl(0) pair HZ/4
usb/serial/mos7720.c:	tmp.close_delay		= 5*HZ;
usb/serial/mos7720.c:	tmp.closing_wait	= 30*HZ;
usb/serial/mos7840.c:#define MOS_WDR_TIMEOUT (HZ * 5)	/* default urb timeout */
usb/serial/mos7840.c:#define WAIT_FOR_EVER   (HZ * 0)	/* timeout urb is wait for ever */
usb/serial/mos7840.c:	int timeout = 1 * HZ;
usb/serial/mos7840.c:	tmp.close_delay = 5 * HZ;
usb/serial/mos7840.c:	tmp.closing_wait = 30 * HZ;
usb/serial/mos7840.c:			(__u8) 0x03, 0x00, 0x01, 0x00, NULL, 0x00, 5 * HZ);
usb/serial/opticon.c:	tmp.close_delay		= 5*HZ;
usb/serial/opticon.c:	tmp.closing_wait	= 30*HZ;
usb/serial/pl2303.c:#define PL2303_CLOSING_WAIT	(30*HZ)
usb/serial/ssu100.c:	tmp.close_delay		= 5*HZ;
usb/serial/ssu100.c:	tmp.closing_wait	= 30*HZ;
usb/serial/ti_usb_3410_5052.c:	ti_drain(tport, (tport->tp_closing_wait*HZ)/100, 0);
usb/serial/ti_usb_3410_5052.c:	ti_drain(tport, (tport->tp_closing_wait*HZ)/100, 1);
usb/serial/usb_wwan.c:					portdata->tx_start_time[i] + 10 * HZ))
usb/serial/whiteheat.c:#define CLOSING_DELAY		(30 * HZ)
usb/serial/whiteheat.c:#define COMMAND_TIMEOUT		(2*HZ)	/* 2 second timeout for a command */
usb/storage/freecom.c:			0x4c, 0xc0, 0x4346, 0x0, buffer, 0x20, 3*HZ);
usb/storage/freecom.c:			0x4d, 0x40, 0x24d8, 0x0, NULL, 0x0, 3*HZ);
usb/storage/freecom.c:			0x4d, 0x40, 0x24f8, 0x0, NULL, 0x0, 3*HZ);
usb/storage/isd200.c:		endTime = jiffies + ISD200_ENUM_BSY_TIMEOUT * HZ;
usb/storage/isd200.c:		endTime = jiffies + ISD200_ENUM_DETECT_TIMEOUT * HZ;
usb/storage/realtek_cr.c:				      0, us->ifnum, us->iobuf, 1, 10 * HZ);
usb/storage/sddr55.c:	if (info->lba_to_pba == NULL || time_after(jiffies, info->last_access + HZ/2)) {
usb/storage/sierra_ms.c:				schedule_timeout_uninterruptible(2*HZ);
usb/storage/transport.c:				 0, us->ifnum, us->iobuf, 1, 10*HZ);
usb/storage/transport.c:			5*HZ);
usb/storage/transport.c:			HZ*6);
usb/storage/transport.c:		NULL, 0, 3*HZ);
usb/storage/usb.c:			delay_use * HZ);
usb/wusbcore/devconnect.c:			   (wusbhc->trust_timeout*CONFIG_HZ)/1000/2);
usb/wusbcore/wa-hc.h:	HWAHC_EPROTO_PERIOD = 4 * HZ,
usb/wusbcore/wa-rpipe.c:		HZ / 10);
usb/wusbcore/wusbhc.c:			   (trust_timeout * CONFIG_HZ)/1000/2);
uwb/i1480/dfu/dfu.c:		&i1480->evt_complete, HZ);
uwb/i1480/dfu/usb.c:		&i1480->evt_complete, HZ);
uwb/uwbd.c: * FIXME: should change so we don't have a 1HZ timer all the time, but
uwb/uwbd.c:			HZ);
uwb/whc-rc.c:		!(le_readl(whcrc->rc_base + URCCMD) & URCCMD_ACTIVE), HZ/2);
video/atmel_lcdfb.c:	dev_dbg(dev, "  pixclk:     %lu KHz\n", PICOS2KHZ(var->pixclock));
video/atmel_lcdfb.c:		dev_err(dev, "%lu KHz pixel clock is too fast\n", PICOS2KHZ(var->pixclock));
video/atmel_lcdfb.c:	if (PICOS2KHZ(var->pixclock) > clk_value_khz) {
video/atmel_lcdfb.c:			KHZ2PICOS(clk_value_khz / (pix_factor * (value + 1)));
video/atmel_lcdfb.c:					PICOS2KHZ(info->var.pixclock));
video/atmel_lcdfb.c:	value = DIV_ROUND_UP(clk_value_khz, PICOS2KHZ(info->var.pixclock));
video/aty/aty128fb.c:	unsigned long timeout = jiffies + HZ/100; // should be more than enough
video/aty/atyfb_base.c:					       count != vbl->count, HZ/10);
video/aty/atyfb_base.c:			   USE_F32KHZ | TRISTATE_MEM_EN, par);
video/au1200fb.c:	pixclock = max((u32)(PICOS2KHZ(var->pixclock) * 1000), fbi->monspecs.dclkmin);
video/au1200fb.c:			var->pixclock = KHZ2PICOS(12000);
video/au1200fb.c:			var->pixclock = KHZ2PICOS(6000);
video/au1200fb.c:	var->pixclock = KHZ2PICOS(pixclock/1000);
video/backlight/cr_bllcd.c:		schedule_timeout(HZ / 10);
video/backlight/cr_bllcd.c:		schedule_timeout(HZ / 10);
video/backlight/cr_bllcd.c:		schedule_timeout(HZ / 10);
video/broadsheetfb.c:	.delay		= HZ/4,
video/cg3.c:	CG3_AT_66HZ = 0,
video/cg3.c:	CG3_AT_76HZ,
video/cg3.c:				type = CG3_AT_66HZ;
video/cg3.c:				type = CG3_AT_76HZ;
video/cirrusfb.c:	freq = PICOS2KHZ(var->pixclock);
video/cirrusfb.c:	freq = PICOS2KHZ(var->pixclock);
video/console/fbcon.c:	mod_timer(&ops->cursor_timer, jiffies + HZ/5);
video/console/fbcon.c:		ops->cursor_timer.expires = jiffies + HZ / 5;
video/da8xx-fb.c:	par->vsync_timeout = HZ / 5;
video/ep93xx-fb.c:	clk_set_rate(fbi->clk, 1000 * PICOS2KHZ(info->var.pixclock));
video/exynos/exynos_mipi_dsi_common.c:			((byte_clk / esc_div) / MHZ));
video/exynos/exynos_mipi_dsi_common.c:			(byte_clk / MHZ));
video/exynos/exynos_mipi_dsi_common.c:#define DFIN_PLL_MAX_HZ		(12 * MHZ)
video/exynos/exynos_mipi_dsi_common.c:#define DFIN_PLL_MIN_HZ		(6 * MHZ)
video/exynos/exynos_mipi_dsi_common.c:#define DFVCO_MAX_HZ		(1000 * MHZ)
video/exynos/exynos_mipi_dsi_common.c:#define DFVCO_MIN_HZ		(500 * MHZ)
video/exynos/exynos_mipi_dsi_common.c:#define FIN_HZ			(24 * MHZ)
video/exynos/exynos_mipi_dsi_common.c:#define MHZ			(1000 * 1000)
video/exynos/exynos_mipi_dsi_common.c:	dfin_pll = (FIN_HZ / pre_divider);
video/exynos/exynos_mipi_dsi_common.c:		(dpll_out / MHZ));
video/exynos/exynos_mipi_dsi_common.c:			(dsim->dsim_config->esc_clk / MHZ));
video/exynos/exynos_mipi_dsi_common.c:		else if (dfin_pll < 10 * MHZ)
video/exynos/exynos_mipi_dsi_common.c:		else if (dfin_pll < 11 * MHZ)
video/exynos/exynos_mipi_dsi_common.c:		else if (dfin_pll < 8 * MHZ)
video/exynos/exynos_mipi_dsi_common.c:		else if (dfin_pll < 9 * MHZ)
video/exynos/exynos_mipi_dsi_common.c:		if ((byte_clk / esc_div) >= (20 * MHZ) ||
video/exynos/exynos_mipi_dsi_common.c:		if (dfin_pll < 7 * MHZ)
video/exynos/exynos_mipi_dsi_common.c:	if (dfin_pll < DFIN_PLL_MIN_HZ || dfin_pll > DFIN_PLL_MAX_HZ) {
video/exynos/exynos_mipi_dsi_common.c:	if (dfvco < DFVCO_MIN_HZ || dfvco > DFVCO_MAX_HZ)
video/exynos/exynos_mipi_dsi_common.c:		if (dpll_out < dpll_table[i] * MHZ) {
video/fbcvt.c:	mode->pixclock = KHZ2PICOS(cvt->pixclock/1000);
video/fb_defio.c:		fbdefio->delay = HZ;
video/fbmon.c:	mode->pixclock = KHZ2PICOS(mode->pixclock);
video/fbmon.c:			pixclock = PICOS2KHZ(modes[i].pixclock) * 1000;
video/fbmon.c:	pixclock = PICOS2KHZ(var->pixclock) * 1000;
video/fbmon.c:		timings->dclk = PICOS2KHZ(val) * 1000;
video/fbmon.c:		var->pixclock = KHZ2PICOS(timings->dclk/1000);
video/fbmon.c:			var->pixclock = KHZ2PICOS(var->pixclock);
video/hecubafb.c:	.delay		= HZ,
video/hyperv_fb.c:#define HVFB_UPDATE_DELAY (HZ / 20)
video/hyperv_fb.c:#define VSP_TIMEOUT (10 * HZ)
video/i740fb.c:	i740outreg(par, XRX, DRAM_EXT_CNTL, DRAM_REFRESH_60HZ);
video/i740fb.c:	par->pll_cntl = PLL_MEMCLK_100000KHZ; /* 100 MHz -- use as default */
video/i740_reg.h:#define DRAM_REFRESH_60HZ	0x01
video/i740_reg.h:#define PLL_MEMCLK_100000KHZ	0x03
video/i740_reg.h:#define PLL_MEMCLK__66667KHZ	0x00
video/i740_reg.h:#define PLL_MEMCLK__75000KHZ	0x01
video/i740_reg.h:#define PLL_MEMCLK__88889KHZ	0x02
video/i810/i810-i2c.c:        chan->algo.timeout              = (HZ/2);
video/intelfb/intelfbhw.c:					       count != vsync->count, HZ / 10);
video/intelfb/intelfbhw.c:				end = jiffies + (HZ * 3);
video/intelfb/intelfbhw.c:			end = jiffies + (HZ * 3);
video/intelfb/intelfbhw.c:	end = jiffies + (HZ * 3);
video/jz4740_fb.c:		mode->pixclock = KHZ2PICOS(rate / 1000);
video/jz4740_fb.c:		rate = PICOS2KHZ(mode->pixclock) * 1000;
video/kyro/fbdev.c:#define KHZ2PICOS(a) (1000000000UL/(a))
video/kyro/fbdev.c:	 * have infact already done the KHZ2PICOS conversion in both the modedb
video/kyro/fbdev.c:		NULL, 56, 800, 600, KHZ2PICOS(36000),
video/kyro/fbdev.c:		NULL, 60, 1024, 768, KHZ2PICOS(65000),
video/kyro/fbdev.c:		NULL, 60, 1280, 1024, KHZ2PICOS(108000),
video/kyro/fbdev.c:		NULL, 60, 1280, 960, KHZ2PICOS(108000),
video/kyro/fbdev.c:		NULL, 60, 1600, 1200, KHZ2PICOS(162000),
video/kyro/fbdev.c:		NULL, 60, 1792, 1344, KHZ2PICOS(204750),
video/kyro/fbdev.c:		NULL, 60, 1856, 1392, KHZ2PICOS(218250),
video/kyro/fbdev.c:		NULL, 60, 1920, 1440, KHZ2PICOS(234000),
video/kyro/fbdev.c:		NULL, 60, 640, 480, KHZ2PICOS(25175),
video/kyro/fbdev.c:		NULL, 60, 800, 600, KHZ2PICOS(40000),
video/kyro/fbdev.c:		NULL, 65, 1600, 1200, KHZ2PICOS(175500),
video/kyro/fbdev.c:		NULL, 70, 1024, 768, KHZ2PICOS(75000),
video/kyro/fbdev.c:		NULL, 70, 1600, 1200, KHZ2PICOS(189000),
video/kyro/fbdev.c:		NULL, 72, 640, 480, KHZ2PICOS(31500),
video/kyro/fbdev.c:		NULL, 72, 800, 600, KHZ2PICOS(50000),
video/kyro/fbdev.c:		NULL, 75, 1024, 768, KHZ2PICOS(78750),
video/kyro/fbdev.c:		NULL, 75, 1152, 864, KHZ2PICOS(108000),
video/kyro/fbdev.c:		NULL, 75, 1280, 1024, KHZ2PICOS(135000),
video/kyro/fbdev.c:		NULL, 75, 1600, 1200, KHZ2PICOS(202500),
video/kyro/fbdev.c:		NULL, 75, 1792, 1344, KHZ2PICOS(261000),
video/kyro/fbdev.c:		NULL, 75, 1856, 1392, KHZ2PICOS(288000),
video/kyro/fbdev.c:		NULL, 75, 1920, 1440, KHZ2PICOS(297000),
video/kyro/fbdev.c:		NULL, 75, 640, 480, KHZ2PICOS(31500),
video/kyro/fbdev.c:		NULL, 75, 800, 600, KHZ2PICOS(49500),
video/kyro/fbdev.c:		NULL, 85, 1024, 768, KHZ2PICOS(94500),
video/kyro/fbdev.c:		NULL, 85, 1280, 1024, KHZ2PICOS(157500),
video/kyro/fbdev.c:		NULL, 85, 1280, 960, KHZ2PICOS(148500),
video/kyro/fbdev.c:		NULL, 85, 1600, 1200, KHZ2PICOS(229500),
video/kyro/fbdev.c:		NULL, 85, 640, 350, KHZ2PICOS(31500),
video/kyro/fbdev.c:		NULL, 85, 640, 400, KHZ2PICOS(31500),
video/kyro/fbdev.c:		NULL, 85, 640, 480, KHZ2PICOS(36000),
video/kyro/fbdev.c:		NULL, 85, 720, 400, KHZ2PICOS(35500),
video/kyro/fbdev.c:		NULL, 85, 800, 600, KHZ2PICOS(56250),
video/kyro/fbdev.c:	.pixclock	= KHZ2PICOS(25175),
video/matrox/matroxfb_base.c:	ret = wait_event_interruptible_timeout(vs->wait, cnt != vs->cnt, HZ/10);
video/mbx/mbxfb.c:	pixclock = PICOS2KHZ(pixclock_ps);
video/mbx/mbxfb.c:	return KHZ2PICOS(best_clk);
video/metronomefb.c:	.delay		= HZ,
video/modedb.c:	pixclock = PICOS2KHZ(var->pixclock) * 1000;
video/msm/adv7520.c:		mod_timer(&hpd_duty_timer, jiffies + HPD_DUTY_CYCLE*HZ);
video/msm/adv7520.c:	mod_timer(&hpd_duty_timer, jiffies + HPD_DUTY_CYCLE*HZ);
video/msm/adv7520.c:		mod_timer(&hpd_duty_timer, jiffies + HZ/100);
video/msm/adv7520.c:	mod_timer(&hpd_duty_timer, jiffies + HZ/2);
video/msm/adv7520.c:			mod_timer(&hpd_timer, jiffies + HZ/2);
video/msm/adv7520.c:		mod_timer(&hpd_timer, jiffies + HZ/2);
video/msm/hdmi_msm.c:#define MSM_HDMI_SAMPLE_RATE_176_4KHZ		5
video/msm/hdmi_msm.c:#define MSM_HDMI_SAMPLE_RATE_192KHZ		6
video/msm/hdmi_msm.c:#define MSM_HDMI_SAMPLE_RATE_32KHZ		0
video/msm/hdmi_msm.c:#define MSM_HDMI_SAMPLE_RATE_44_1KHZ		1
video/msm/hdmi_msm.c:#define MSM_HDMI_SAMPLE_RATE_48KHZ		2
video/msm/hdmi_msm.c:#define MSM_HDMI_SAMPLE_RATE_88_2KHZ		3
video/msm/hdmi_msm.c:#define MSM_HDMI_SAMPLE_RATE_96KHZ		4
video/msm/hdmi_msm.c:		} else if ((MSM_HDMI_SAMPLE_RATE_44_1KHZ == audio_sample_rate)
video/msm/hdmi_msm.c:		} else if ((MSM_HDMI_SAMPLE_RATE_96KHZ == audio_sample_rate) ||
video/msm/hdmi_msm.c:		&hdmi_msm_state->cec_frame_wr_done, HZ);
video/msm/hdmi_msm.c:		&hdmi_msm_state->ddc_sw_done, HZ/2);
video/msm/hdmi_msm.c:		&hdmi_msm_state->ddc_sw_done, HZ/2);
video/msm/hdmi_msm.c:		&hdmi_msm_state->ddc_sw_done, HZ/2);
video/msm/hdmi_msm.c:			&hdmi_msm_state->hdcp_success_done, HZ*2);
video/msm/hdmi_msm.c:				&hdmi_msm_state->hpd_event_processed, HZ);
video/msm/hdmi_msm.c:		if ((MSM_HDMI_SAMPLE_RATE_192KHZ == audio_sample_rate) ||
video/msm/hdmi_msm.c:		if ((MSM_HDMI_SAMPLE_RATE_48KHZ == audio_sample_rate) ||
video/msm/hdmi_msm.c:					jiffies + HZ/2);
video/msm/hdmi_msm.c:			mod_timer(&hdmi_msm_state->hdcp_timer, jiffies + HZ/2);
video/msm/hdmi_msm.c:	mod_timer(&hdmi_msm_state->hdcp_timer, jiffies + HZ/2);
video/msm/hdmi_msm.c:			   || (MSM_HDMI_SAMPLE_RATE_176_4KHZ ==
video/msm/hdmi_msm.c:		    (MSM_HDMI_SAMPLE_RATE_176_4KHZ == audio_sample_rate)) {
video/msm/hdmi_msm.c:		    (MSM_HDMI_SAMPLE_RATE_192KHZ == audio_sample_rate)) {
video/msm/hdmi_msm.c:			   || (MSM_HDMI_SAMPLE_RATE_88_2KHZ ==
video/msm/hdmi_msm.c:			  (MSM_HDMI_SAMPLE_RATE_88_2KHZ == audio_sample_rate)) {
video/msm/hdmi_msm.c:		    (MSM_HDMI_SAMPLE_RATE_96KHZ == audio_sample_rate) ||
video/msm/hdmi_msm.c:static int msm_hdmi_sample_rate = MSM_HDMI_SAMPLE_RATE_48KHZ;
video/msm/lcdc_chimei_wxga.c:#define PWM_FREQ_HZ 210
video/msm/lcdc_chimei_wxga.c:#define PWM_PERIOD_USEC (USEC_PER_SEC / PWM_FREQ_HZ)
video/msm/lcdc_samsung_wsvga.c:#define PWM_FREQ_HZ 300
video/msm/lcdc_samsung_wsvga.c:#define PWM_PERIOD_USEC (USEC_PER_SEC / PWM_FREQ_HZ)
video/msm/lvds_chimei_wxga.c:#define LVDS_CHIMEI_PWM_FREQ_HZ 300
video/msm/lvds_chimei_wxga.c:#define LVDS_CHIMEI_PWM_PERIOD_USEC (USEC_PER_SEC / LVDS_CHIMEI_PWM_FREQ_HZ)
video/msm/mddi_client_nt35399.c:				HZ/2) == 0)
video/msm/mddi_client_toshiba.c:				HZ/2) == 0)
video/msm/mddihost.c:					&(llist_notify_ptr->done_comp), 5 * HZ);
video/msm/mddihost.c:					&(llist_notify_ptr->done_comp), 5 * HZ);
video/msm/mddihost.c:					&(llist_notify_ptr->done_comp), 5 * HZ);
video/msm/mddihost.c:					&(llist_notify_ptr->done_comp), 5 * HZ);
video/msm/mddihosti.c:			CLKRGM_MDDI_IO_CLOCK_IN_MHZ * 2);
video/msm/mddihosti.c:#ifdef CLKRGM_MDDI_IO_CLOCK_IN_MHZ
video/msm/mddihosti.c:		mddi_host_timer.expires = jiffies + ((time_ms * HZ) / 1000);
video/msm/mddi_quickvx.c:		pinfo->lcd.vsync_notifier_period = (1 * HZ);
video/msm/mddi_sharp.c:		pinfo->lcd.vsync_notifier_period = (1 * HZ);
video/msm/mddi_toshiba_vga.c:	pinfo.lcd.vsync_notifier_period = (1 * HZ);
video/msm/mddi_toshiba_wvga.c:	pinfo.lcd.vsync_notifier_period = (1 * HZ);
video/msm/mddi_toshiba_wvga_pt.c:	pinfo.lcd.vsync_notifier_period = (1 * HZ);
video/msm/mdp.c:								5 * HZ);
video/msm/mdp.c:			mfd->refresh_timer_duration = (42 * HZ / 1000);
video/msm/mdp.c:			mfd->refresh_timer_duration = (66 * HZ / 1000);
video/msm/mdp.c:unsigned long mdp_timer_duration = (HZ/20);   /* 50 msecond */
video/msm/mdp.c:	unsigned long timeout = (MDP_HISTOGRAM_TIMEOUT_MS * HZ) / 1000;
video/msm/mdp_dma.c:			mfd->refresh_timer.expires = jiffies + (HZ / 1000);
video/msm/mdp_dma.c:	mod_timer(&dsi_clock_timer, jiffies + HZ); /* one second */
video/msm/mdp_dma.c:					(&vsync_cntrl.vsync_comp, HZ/10))
video/msm/mdp_lcdc.c:	ret = wait_event_timeout(lcdc->vsync_waitq, lcdc->got_vsync, HZ / 2);
video/msm/mdss/mdss_mdp.c:	mdss_res->timeout = HZ/20;
video/msm/mhl/mhl_8334.c:			(&mhl_msm_state->rgnd_done, HZ/2);
video/msm/mhl_v2/sii8240.c:	31 : 1920x1080p 50HZ
video/msm/mhl_v2/sii8240/sii8240.c:	31 : 1920x1080p 50HZ
video/msm/mhl_v2/sii9234.c:							jiffies + 2*HZ);
video/msm/mhl_v2/sii9234/sii9234.c:							jiffies + 2*HZ);
video/msm/mipi_chimei_wuxga.c: * 3. Backlight LED control (PWM 200 HZ).
video/msm/mipi_chimei_wuxga.c:#define MHZ (1000*1000)
video/msm/mipi_chimei_wuxga.c:	 * LVDS-CLK = DSI-CLK/4 , 320 MHZ/4= 80 MHZ.
video/msm/mipi_chimei_wuxga.c:	pinfo->clk_rate = 635 * MHZ ; /* bitclk Calculated */
video/msm/mipi_chimei_wuxga.c:	 * The CMI panel requires 80 MHZ LVDS-CLK.
video/msm/mipi_chimei_wuxga.c:	 * The DSI-CLK = bitclk/2, 640 MHZ/2= 320 MHZ.
video/msm/mipi_chimei_wxga_pt.c:#define MHZ (1000*1000)
video/msm/mipi_chimei_wxga_pt.c:	pinfo->clk_rate = 473400000; /* 473.4 MHZ Calculated */
video/msm/mipi_ql_dsi2lvds.c:		bl_reg_old = (vx5b3d_level*V5D3BX_10KHZ_DEFAULT_RATIO)/1000 ;
video/msm/mipi_ql_dsi2lvds.c:		WriteRegister(0x164,(vx5b3d_level*V5D3BX_10KHZ_DEFAULT_RATIO)/1000);
video/msm/mipi_ql_dsi2lvds.h:#define V5D3BX_10KHZ_DEFAULT_RATIO	5078
video/msm/mipi_samsung_esd_refresh-8960.c:			wait_for_completion_timeout(&esd_completion, 10 * HZ);
video/msm/mipi_samsung_esd_refresh-8960.h:#define WAKE_LOCK_TIME		(10 * HZ)	/* 1 sec */
video/msm/mipi_samsung_esd_refresh.c:			wait_for_completion_timeout(&esd_completion, 10 * HZ);
video/msm/mipi_samsung_esd_refresh.h:#define WAKE_LOCK_TIME		(10 * HZ)	/* 1 sec */
video/msm/mipi_samsung_oled-8960.c:				&(msd.mpd->esd_work), ESD_INTERVAL * HZ);
video/msm/mipi_samsung_oled-8960.c:				&(msd.mpd->esd_work), ESD_INTERVAL * HZ);
video/msm/mipi_samsung_oled-8960.c:				&(msd.mpd->esd_work), ESD_INTERVAL * HZ);
video/msm/mipi_tc358764_dsi2lvds.c:#define KHZ 1000
video/msm/mipi_tc358764_dsi2lvds.c:#define MHZ (1000*1000)
video/msm/mipi_tc358764_dsi2lvds.c:#define PWM_FREQ_HZ	(6250)	/* 33 KHZ */
video/msm/mipi_tc358764_dsi2lvds.c:#define PWM_FREQ_HZ	(66*1000)	/* 66 KHZ */
video/msm/mipi_tc358764_dsi2lvds.c:#define PWM_PERIOD_USEC (USEC_PER_SEC / PWM_FREQ_HZ)
video/msm/mipi_toshiba.h:#define MIPI_TOSHIBA_PWM_FREQ_HZ 300
video/msm/mipi_toshiba.h:#define MIPI_TOSHIBA_PWM_PERIOD_USEC (USEC_PER_SEC / MIPI_TOSHIBA_PWM_FREQ_HZ)
video/msm/mipi_toshiba_video_wvga_pt.c:#define DSI_BIT_CLK_380MHZ
video/msm/mipi_toshiba_video_wvga_pt.c:#elif defined(DSI_BIT_CLK_380MHZ)
video/msm/mipi_toshiba_video_wvga_pt.c:#elif defined(DSI_BIT_CLK_400MHZ)
video/msm/mipi_toshiba_video_wvga_pt.c:#if defined(DSI_BIT_CLK_366MHZ)
video/msm/mipi_truly_tft540960_1_e.c:	0xBD, 0x01, 0x48, 0x10, 0x38, 0x01 /* 59 HZ */
video/msm/msm_fb.c:		&mfd->msmfb_no_update_notify, 4*HZ);
video/msm/msm_fb.c:	mfd->msmfb_no_update_notify_timer.expires = jiffies + (2 * HZ);
video/msm/msm_fb.c:	mfd->msmfb_no_update_notify_timer.expires = jiffies + (2 * HZ);
video/msm/msm_fb.c:		&mfd->msmfb_update_notify, 4*HZ);
video/msm/vidc/1080p/ddl/vcd_ddl_core.h:#define DDL_VIDC_1080P_133MHZ			(133330000)
video/msm/vidc/1080p/ddl/vcd_ddl_core.h:#define DDL_VIDC_1080P_133MHZ_TIMEOUT_VALUE	(0x2355)
video/msm/vidc/1080p/ddl/vcd_ddl_core.h:#define DDL_VIDC_1080P_200MHZ			(200000000)
video/msm/vidc/1080p/ddl/vcd_ddl_core.h:#define DDL_VIDC_1080P_200MHZ_TIMEOUT_VALUE	(0x3500)
video/msm/vidc/1080p/ddl/vcd_ddl_core.h:#define DDL_VIDC_1080P_48MHZ			(48000000)
video/msm/vidc/1080p/ddl/vcd_ddl_core.h:#define DDL_VIDC_1080P_48MHZ_TIMEOUT_VALUE	(0xCB8)
video/msm/vidc/1080p/ddl/vcd_ddl_helper.c:	u32 temp = DDL_VIDC_1080P_200MHZ_TIMEOUT_VALUE;
video/msm/vidc/1080p/ddl/vcd_ddl_helper.c:		vidc_time_out = 2 * DDL_VIDC_1080P_200MHZ_TIMEOUT_VALUE;
video/msm/vidc/1080p/ddl/vcd_ddl_helper.c:		vidc_time_out = DDL_VIDC_1080P_200MHZ_TIMEOUT_VALUE;
video/msm/vidc/720p/resource_tracker/vcd_res_tracker.c:	do_div(temp, VCD_RESTRK_HZ_PER_1000_PERFLVL);
video/msm/vidc/720p/resource_tracker/vcd_res_tracker.c:	temp = (perf_lvl * VCD_RESTRK_HZ_PER_1000_PERFLVL) + 999;
video/msm/vidc/720p/resource_tracker/vcd_res_tracker.h:#define VCD_RESTRK_HZ_PER_1000_PERFLVL 1580250
video/msm/vidc/common/enc/venc.c:				5 * HZ);
video/msm/vidc/common/init/vidc_init.c:		hw_timer->hw_timeout.expires = jiffies + 1*HZ;
video/mx3fb.c:				   (PICOS2KHZ(fbi->var.pixclock)) * 1000UL,
video/mx3fb.c:	ret = wait_for_completion_timeout(&mx3_fbi->flip_cmpl, HZ / 10);
video/mx3fb.c:			(u32) (PICOS2KHZ(fbi->var.pixclock) * 1000UL));
video/mx3fb.c:		var->pixclock = KHZ2PICOS(var->pixclock);
video/mxsfb.c:	clk_set_rate(host->clk, PICOS2KHZ(fb_info->var.pixclock) * 1000U);
video/mxsfb.c:	pr_debug("pixclk: %ldkHz\n", PICOS2KHZ(vmode.pixclock));
video/mxsfb.c:	vmode.pixclock = KHZ2PICOS(clk_get_rate(host->clk) / 1000U);
video/neofb.c:	if (PICOS2KHZ(var->pixclock) > par->maxClock)
video/neofb.c:	neoCalcVCLK(info, par, PICOS2KHZ(info->var.pixclock));
video/omap2/omapfb/omapfb-main.c:			&d->auto_update_work, HZ / freq);
video/omap2/omapfb/omapfb-main.c:			KHZ2PICOS(timings.pixel_clock) :
video/omap2/omapfb/omapfb-main.c:	timings->pixel_clock = PICOS2KHZ(var->pixclock);
video/omap2/omapfb/omapfb-main.c:	t->pixel_clock = PICOS2KHZ(m->pixclock);
video/omap/hwa742.c:#define HWA742_AUTO_UPDATE_TIME		(HZ / 20)
video/omap/hwa742.c:		dev_dbg(hwa742.fbdev->dev, "max_tx_rate %ld HZ\n",
video/omap/hwa742.c:		"pix_clk %ld HZ pix_tx_time %ld ps line_upd_time %ld ps\n",
video/omap/hwa742.c:	*pix_clk = *sys_clk / pix_div;			/* HZ */
video/omap/lcdc.c:	if (reset_count == 1 || time_after(jiffies, last_jiffies + HZ)) {
video/omap/sossi.c:	*clk_period = HZ_TO_PS(sossi.fck_hz);
video/omap/sossi.c:#define HZ_TO_PS(x)	(1000000000 / (x / 1000))
video/omap/sossi.c:	u32 clk_period = HZ_TO_PS(sossi.fck_hz) * div;
video/pm2fb.c:	if (PICOS2KHZ(var->pixclock) > PM2_MAX_PIXCLOCK) {
video/pm2fb.c:			PICOS2KHZ(var->pixclock));
video/pm2fb.c:	pixclock = PICOS2KHZ(info->var.pixclock);
video/pm3fb.c:	if (PICOS2KHZ(var->pixclock) > PM3_MAX_PIXCLOCK) {
video/pm3fb.c:			PICOS2KHZ(var->pixclock));
video/pm3fb.c:		unsigned long pixclock = PICOS2KHZ(info->var.pixclock);
video/pmag-aa-fb.c:#define CURSOR_TIMER_FREQ	(HZ / 50)
video/ps3fb.c:					       HZ / 10);
video/pxa3xx-gcu.c:						       priv->free, HZ*4);
video/pxa3xx-gcu.c:					!priv->shared->hw_running, HZ*4);
video/pxa3xx-gcu.c:	pxa3xx_gcu_debug_timer.expires = jiffies + 5*HZ; /* one second */
video/pxafb.c:				200 * HZ / 1000);
video/pxafb.c:	if (wait_for_completion_timeout(&fbi->command_done, HZ/2) == 0) {
video/pxafb.c:	if (wait_for_completion_timeout(&ofb->branch_done, 1 * HZ) == 0)
video/pxafb.c:	if (wait_for_completion_timeout(&ofb->branch_done, 1 * HZ) == 0)
video/pxafb.c:		schedule_timeout(30 * HZ / 1000);
video/pxafb.c:	wait_for_completion_timeout(&fbi->disable_done, 200 * HZ / 1000);
video/s3fb.c:	rv = svga_compute_pll(&s3_pll, PICOS2KHZ(var->pixclock), &m, &n, &r,
video/sa1100fb.c:	schedule_timeout(20 * HZ / 1000);
video/sgivwfb.c:	req_dot = PICOS2KHZ(var->pixclock);
video/sgivwfb.c:	var->pixclock = KHZ2PICOS(timing->cfreq);
video/sh_mobile_hdmi.c:		found->yres, found->refresh, PICOS2KHZ(found->pixclock) * 1000,
video/sh_mobile_hdmi.c:	rate = clk_round_rate(hdmi->hdmi_clk, PICOS2KHZ(37037));
video/sh_mobile_hdmi.c:	unsigned long target = PICOS2KHZ(mode->pixclock) * 1000, rate_error;
video/sis/sis.h:#define VB2_LCD162MHZBRIDGE	(VB2_301C  | VB2_307T)
video/sis/sis.h:#define VB2_RAMDAC202MHZBRIDGE	(VB2_301C  | VB2_307T)
video/smscufx.c:	clk_pixel = PICOS2KHZ(pixclock) * 1000;
video/smscufx.c:#define FREE_URB_TIMEOUT	(HZ*2)
video/smscufx.c:#define GET_URB_TIMEOUT		(HZ)
video/smscufx.c:#define UFX_DEFIO_WRITE_DISABLE	(HZ*60) /* "disable" with long delay */
video/smscufx.c:		schedule_delayed_work(&dev->free_framebuffer_work, HZ);
video/sstfb.c:	if (sst_calc_pll(PICOS2KHZ(var->pixclock), &freq, &par->pll)) {
video/sstfb.c:	           info->var.xres, info->var.yres, PICOS2KHZ(info->var.pixclock));
video/sstfb.c:				PICOS2KHZ(var->pixclock));
video/sstfb.c:		printk(KERN_ERR "sstfb: Pixclock at %ld KHZ out of range\n",
video/sstfb.c:	sst_calc_pll(PICOS2KHZ(info->var.pixclock), &freq, &par->pll);
video/sstfb.c:	var->pixclock = KHZ2PICOS(freq);
video/tdfxfb.c:	freq = PICOS2KHZ(info->var.pixclock);
video/tdfxfb.c:	if (PICOS2KHZ(var->pixclock) > par->max_pixclock) {
video/tdfxfb.c:			PICOS2KHZ(var->pixclock));
video/tridentfb.c:	if (PICOS2KHZ(var->pixclock) > ramdac)
video/tridentfb.c:	vclk = PICOS2KHZ(info->var.pixclock);
video/udlfb.c:				    HZ);
video/udlfb.c:		schedule_delayed_work(&dev->free_framebuffer_work, HZ);
video/uvesafb.c:		crtc->pixel_clock = PICOS2KHZ(info->var.pixclock) * 1000;
video/vermilion/vermilion.c:	clock = PICOS2KHZ(var->pixclock);
video/vermilion/vermilion.c:	clock = PICOS2KHZ(var->pixclock);
video/vermilion/vermilion.c:	v.pixclock = KHZ2PICOS(nearest_clock);
video/via/dvi.c:	if (maxPixelClock && PICOS2KHZ(var->pixclock) / 1000 > maxPixelClock) {
video/via/hw.c:	viafb_set_vclock(PICOS2KHZ(var->pixclock) * 1000, iga);
video/via/lcd.c:	clock = PICOS2KHZ(panel_crt_table->pixclock) * 1000;
video/via/viafbdev.c:	return PICOS2KHZ(var->pixclock) * 1000 / (htotal * vtotal);
video/vt8500lcdfb.c:			readl(fbi->regbase + 0x38) & (1 << 3), HZ / 10);
video/xen-fbfront.c:	.delay		= HZ / 20,
w1/masters/ds1wm.c:#define DS1WM_TIMEOUT (HZ * 5)
w1/masters/omap_hdq.c:#define OMAP_HDQ_TIMEOUT			(HZ/5)
watchdog/alim7101_wdt.c:#define WDT_INTERVAL (HZ/4+1)
watchdog/alim7101_wdt.c:/* in seconds, will be multiplied by HZ to get seconds to wait for a ping */
watchdog/alim7101_wdt.c:	next_heartbeat = jiffies + (timeout * HZ);
watchdog/alim7101_wdt.c:	next_heartbeat = jiffies + (timeout * HZ);
watchdog/at91sam9_wdt.c:		at91wdt_private.next_heartbeat = jiffies + heartbeat * HZ;
watchdog/at91sam9_wdt.c:		at91wdt_private.next_heartbeat = jiffies + heartbeat * HZ;
watchdog/at91sam9_wdt.c:	at91wdt_private.next_heartbeat = jiffies + heartbeat * HZ;
watchdog/at91sam9_wdt.c:	at91wdt_private.next_heartbeat = jiffies + heartbeat * HZ;
watchdog/at91sam9_wdt.c:	at91wdt_private.next_heartbeat = jiffies + heartbeat * HZ;
watchdog/at91sam9_wdt.c:#define WDT_TIMEOUT	(HZ/2)
watchdog/bcm47xx_wdt.c:		mod_timer(&wdt_timer, jiffies + HZ);
watchdog/bcm63xx_wdt.c:#define WDT_HZ		50000000 /* Fclk */
watchdog/bcm63xx_wdt.c:		mod_timer(&bcm63xx_wdt_device.timer, jiffies + HZ);
watchdog/cpu5wdt.c:#define CPU5WDT_INTERVAL	(HZ/10+1)
watchdog/cpwd.c:#define WD_BTIMEOUT	(jiffies + (HZ * 1000))
watchdog/da9052_wdt.c:	msec = (jnow - driver_data->jpast) * 1000/HZ;
watchdog/dw_wdt.c:#define WDT_TIMEOUT		(HZ / 2)
watchdog/dw_wdt.c:	dw_wdt.next_heartbeat = jiffies + dw_wdt_get_top() * HZ;
watchdog/ep93xx_wdt.c:#define WDT_INTERVAL (HZ/5)
watchdog/ep93xx_wdt.c:	next_heartbeat = jiffies + (timeout * HZ);
watchdog/ep93xx_wdt.c:	next_heartbeat = jiffies + (timeout * HZ);
watchdog/geodewdt.c:	cs5535_mfgpt_write(wdt_timer, MFGPT_REG_CMP2, val * GEODEWDT_HZ);
watchdog/geodewdt.c:#define GEODEWDT_HZ 500
watchdog/geodewdt.c:		timeout * GEODEWDT_HZ);
watchdog/imx2_wdt.c:	mod_timer(&imx2_wdt.timer, jiffies + imx2_wdt.timeout * HZ / 2);
watchdog/ixp2000_wdt.c:	wdt_tick_rate = (*IXP2000_T1_CLD * HZ) / 256;
watchdog/Kconfig:	  As a side note, saying Y here will automatically boost HZ to 1000
watchdog/Kconfig:config MACHZ_WDT
watchdog/machzwd.c:#define ZF_HW_TIMEO (HZ/2)
watchdog/machzwd.c:#define ZF_USER_TIMEO (HZ*10)
watchdog/Makefile:obj-$(CONFIG_MACHZ_WDT) += machzwd.o
watchdog/mixcomwd.c:		mod_timer(&mixcomwd_timer, jiffies + 5 * HZ);
watchdog/mixcomwd.c:	mod_timer(&mixcomwd_timer, jiffies + 5 * HZ);
watchdog/mpc8xxx_wdt.c:	mod_timer(&wdt_timer, jiffies + HZ * timeout_sec / 2);
watchdog/mpcore_wdt.c:	count = (0xFFFFFFFFU - count) * (HZ / 5);
watchdog/mtx-1_wdt.c:#define MTX1_WDT_INTERVAL	(5 * HZ)
watchdog/mtx-1_wdt.c:static int ticks = 100 * HZ;
watchdog/nuc900_wdt.c:#define WDT_TIMEOUT		(HZ/2)
watchdog/nuc900_wdt.c:	nuc900_wdt->next_heartbeat = jiffies + heartbeat * HZ;
watchdog/nuc900_wdt.c:	nuc900_wdt->next_heartbeat = jiffies + heartbeat * HZ;
watchdog/pcwd.c:#define WDT_INTERVAL (HZ/2+1)
watchdog/pcwd.c:	pcwd_private.next_heartbeat = jiffies + (heartbeat * HZ);
watchdog/pcwd.c:	pcwd_private.next_heartbeat = jiffies + (heartbeat * HZ);
watchdog/pika_wdt.c:#define WDT_TIMEOUT	(HZ/2)
watchdog/pika_wdt.c:	pikawdt_private.next_heartbeat = jiffies + heartbeat * HZ;
watchdog/pnx833x_wdt.c:#define WATCHDOG_COUNT_FREQUENCY 68000000U /* Watchdog counts at 68MHZ. */
watchdog/pnx833x_wdt.c:/* Set default timeout in MHZ.*/
watchdog/rdc321x_wdt.c:#define RDC_WDT_INTERVAL	(HZ/10+1)
watchdog/sbc60xxwdt.c:#define WDT_INTERVAL (HZ/4+1)
watchdog/sbc60xxwdt.c:	next_heartbeat = jiffies + (timeout * HZ);
watchdog/sbc60xxwdt.c:	next_heartbeat = jiffies + (timeout * HZ);
watchdog/sbc60xxwdt.c:static int timeout = WATCHDOG_TIMEOUT;	/* in seconds, multiplied by HZ to
watchdog/sc520_wdt.c:#define WDT_INTERVAL (HZ/4+1)
watchdog/sc520_wdt.c:/* in seconds, will be multiplied by HZ to get seconds to wait for a ping */
watchdog/sc520_wdt.c:	next_heartbeat = jiffies + (timeout * HZ);
watchdog/sc520_wdt.c:	next_heartbeat = jiffies + (timeout * HZ);
watchdog/shwdt.c: * HZ == 1000), and another for monitoring userspace writes to the WDT device.
watchdog/shwdt.c: * In order for this to work reliably we need to have HZ set to 1000 or
watchdog/shwdt.c:	next_heartbeat = jiffies + (heartbeat * HZ);
watchdog/shwdt.c:	next_heartbeat = jiffies + (heartbeat * HZ);
watchdog/softdog.c:	mod_timer(&watchdog_ticktock, jiffies+(w->timeout*HZ));
watchdog/via_wdt.c:#define WDT_HEARTBEAT	(HZ/2)	/* should be <= ((WDT_HW_HEARTBEAT*HZ)/2) */
watchdog/via_wdt.c:	next_heartbeat = jiffies + wdd->timeout * HZ;
watchdog/w83877f_wdt.c:#define WDT_INTERVAL (HZ/4+1)
watchdog/w83877f_wdt.c:/* in seconds, will be multiplied by HZ to get seconds to wait for a ping */
watchdog/w83877f_wdt.c:	next_heartbeat = jiffies + (timeout * HZ);
watchdog/w83877f_wdt.c:	next_heartbeat = jiffies + (timeout * HZ);
xen/balloon.c:		schedule_delayed_work(&balloon_worker, balloon_stats.schedule_delay * HZ);
xen/xenbus/xenbus_probe.c:	unsigned long timeout = 5*HZ;
xen/xenbus/xenbus_probe_frontend.c:			backend_state == expected, 5 * HZ);
xen/xenbus/xenbus_probe_frontend.c:	if (time_after(jiffies, start + (*seconds_waited+5)*HZ)) {
xen/xenbus/xenbus_probe_frontend.c:	schedule_timeout_interruptible(HZ/10);
xen/xen-pciback/pci_stub.c:				 &psdev->pdev->sh_info->flags)), 300*HZ);
xen/xen-selfballoon.c:/* In HZ, controls frequency of worker invocation. */
xen/xen-selfballoon.c:	schedule_delayed_work(&selfballoon_worker, selfballoon_interval * HZ);
xen/xen-selfballoon.c:			selfballoon_interval * HZ);
xen/xen-selfballoon.c:			selfballoon_interval * HZ);
xen/xen-selfballoon.c:			selfballoon_interval * HZ);
